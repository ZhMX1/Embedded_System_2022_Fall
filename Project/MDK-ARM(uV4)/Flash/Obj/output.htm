<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Obj\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Obj\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sun Dec 25 15:56:52 2022
<BR><P>
<H3>Maximum Stack Usage =       9176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MP3Player &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel4_5_IRQHandler</a> from bsp_sdio_sd.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[2]">EP2_OUT_Callback</a> from usb_endp.o(i.EP2_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from bsp_ps2.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">Get_Max_Lun</a> from usb_prop.o(i.Get_Max_Lun) referenced from usb_prop.o(i.MASS_Data_Setup)
 <LI><a href="#[f]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">IsKeyDown1</a> from bsp_key.o(i.IsKeyDown1) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[69]">IsKeyDown10</a> from bsp_key.o(i.IsKeyDown10) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[61]">IsKeyDown2</a> from bsp_key.o(i.IsKeyDown2) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[62]">IsKeyDown3</a> from bsp_key.o(i.IsKeyDown3) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[63]">IsKeyDown4</a> from bsp_key.o(i.IsKeyDown4) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[64]">IsKeyDown5</a> from bsp_key.o(i.IsKeyDown5) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[65]">IsKeyDown6</a> from bsp_key.o(i.IsKeyDown6) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[66]">IsKeyDown7</a> from bsp_key.o(i.IsKeyDown7) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[67]">IsKeyDown8</a> from bsp_key.o(i.IsKeyDown8) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[68]">IsKeyDown9</a> from bsp_key.o(i.IsKeyDown9) referenced from bsp_key.o(i.bsp_InitKeyVar)
 <LI><a href="#[7]">MASS_Data_Setup</a> from usb_prop.o(i.MASS_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">MASS_GetConfigDescriptor</a> from usb_prop.o(i.MASS_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">MASS_GetDeviceDescriptor</a> from usb_prop.o(i.MASS_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">MASS_GetStringDescriptor</a> from usb_prop.o(i.MASS_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">MASS_Get_Interface_Setting</a> from usb_prop.o(i.MASS_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">MASS_NoData_Setup</a> from usb_prop.o(i.MASS_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">MASS_Reset</a> from usb_prop.o(i.MASS_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5]">MASS_Status_In</a> from usb_prop.o(i.MASS_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">MASS_Status_Out</a> from usb_prop.o(i.MASS_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3]">MASS_init</a> from usb_prop.o(i.MASS_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5a]">MODBUS_RxTimeOut</a> from bsp_modbus.o(i.MODBUS_RxTimeOut) referenced from bsp_modbus.o(i.MODBUS_ReciveNew)
 <LI><a href="#[10]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 24 times from usb_istr.o(.data)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">RS485_ReciveNew</a> from bsp_uart_fifo.o(i.RS485_ReciveNew) referenced from bsp_uart_fifo.o(i.UartVarInit)
 <LI><a href="#[5b]">RS485_SendBefor</a> from bsp_uart_fifo.o(i.RS485_SendBefor) referenced from bsp_uart_fifo.o(i.UartVarInit)
 <LI><a href="#[5c]">RS485_SendOver</a> from bsp_uart_fifo.o(i.RS485_SendOver) referenced from bsp_uart_fifo.o(i.UartVarInit)
 <LI><a href="#[40]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">SDIO_IRQHandler</a> from bsp_sdio_sd.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from audio_rec.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[58]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[56]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[16]">SysTick_Handler</a> from bsp_timer.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[19]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from bsp_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from bsp_ir_decode.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from form_dac8501.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM6_IRQHandler</a> from bsp_step_moto.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM7_IRQHandler</a> from form_dac8562.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from bsp_uart_fifo.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from bsp_uart_fifo.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from bsp_uart_fifo.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">USB_HP_CAN1_TX_IRQHandler</a> from usb_hw.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5e]">fputc</a> from bsp_uart_fifo.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[53]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[31f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[320]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[321]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[322]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[323]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[324]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadHZDot
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitMouse
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>

<P><STRONG><a name="[325]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[326]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[328]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[122]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[221]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[117]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
</UL>

<P><STRONG><a name="[123]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetChipDescribe
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_GetLux
</UL>

<P><STRONG><a name="[8c]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_GetLux
</UL>

<P><STRONG><a name="[329]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_GetLux
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[32a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[32b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[76]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[74]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[32d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[32e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[32f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>BEEP_KeyTone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_beep.o(i.BEEP_KeyTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BEEP_KeyTone &rArr; BEEP_Start &rArr; bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>BEEP_Pro</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, bsp_beep.o(i.BEEP_Pro), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>

<P><STRONG><a name="[83]"></a>BEEP_Start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_beep.o(i.BEEP_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BEEP_Start &rArr; bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_KeyTone
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[86]"></a>BEEP_Stop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_beep.o(i.BEEP_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BEEP_Stop &rArr; bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[87]"></a>BH1750_AdjustSensitivity</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_bh1750.o(i.BH1750_AdjustSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BH1750_AdjustSensitivity &rArr; BH1750_ChageMode &rArr; BH1750_WriteCmd &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ChageMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBH1750
</UL>

<P><STRONG><a name="[89]"></a>BH1750_ChageMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_bh1750.o(i.BH1750_ChageMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BH1750_ChageMode &rArr; BH1750_WriteCmd &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBH1750
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_AdjustSensitivity
</UL>

<P><STRONG><a name="[8a]"></a>BH1750_GetLux</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_bh1750.o(i.BH1750_GetLux))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BH1750_GetLux &rArr; BH1750_ReadData &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[8b]"></a>BH1750_ReadData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_bh1750.o(i.BH1750_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BH1750_ReadData &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_GetLux
</UL>

<P><STRONG><a name="[88]"></a>BH1750_WriteCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_bh1750.o(i.BH1750_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BH1750_WriteCmd &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBH1750
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ChageMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_AdjustSensitivity
</UL>

<P><STRONG><a name="[94]"></a>BKP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[2c4]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[2cb]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[97]"></a>BMP180_ReadTempPress</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, bsp_bmp180.o(i.BMP180_ReadTempPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = BMP180_ReadTempPress &rArr; BMP180_WaitConvert &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WriteReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WaitConvert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[9d]"></a>Bot_Abort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bot.o(i.Bot_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bot_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[260]"></a>ByteSwap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2e5]"></a>CAN_Receive</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[a0]"></a>CBW_Decode</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, usb_bot.o(i.CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CBW_Decode &rArr; SCSI_TestUnitReady_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[b0]"></a>CH376ByteRead</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, file_sys.o(i.CH376ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376ByteRead &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[b6]"></a>CH376DiskConnect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, file_sys.o(i.CH376DiskConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376DiskConnect &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query376Interrupt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[ba]"></a>CH376DiskMount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_sys.o(i.CH376DiskMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH376DiskMount &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[bb]"></a>CH376FileOpen</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, file_sys.o(i.CH376FileOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376FileOpen &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpenDir
</UL>

<P><STRONG><a name="[be]"></a>CH376FileOpenDir</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, file_sys.o(i.CH376FileOpenDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CH376FileOpenDir &rArr; CH376FileOpen &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpenPath
</UL>

<P><STRONG><a name="[bf]"></a>CH376FileOpenPath</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_sys.o(i.CH376FileOpenPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CH376FileOpenPath &rArr; CH376FileOpenDir &rArr; CH376FileOpen &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpenDir
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[b8]"></a>CH376GetIntStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, file_sys.o(i.CH376GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH376Data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskConnect
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>

<P><STRONG><a name="[b5]"></a>CH376ReadBlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, file_sys.o(i.CH376ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH376ReadBlock &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH376Data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteRead
</UL>

<P><STRONG><a name="[b9]"></a>CH376SendCmdWaitInt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, file_sys.o(i.CH376SendCmdWaitInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskMount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskConnect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
</UL>

<P><STRONG><a name="[bc]"></a>CH376SetFileName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, file_sys.o(i.CH376SetFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH376SetFileName &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
</UL>

<P><STRONG><a name="[bd]"></a>CH376WriteVar32</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, file_sys.o(i.CH376WriteVar32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH376WriteVar32 &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
</UL>

<P><STRONG><a name="[c1]"></a>CH376_PORT_INIT</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spi_sw.o(i.CH376_PORT_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH376_PORT_INIT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
</UL>

<P><STRONG><a name="[29a]"></a>CTR_HP</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_int.o(i.CTR_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTR_HP
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>CTR_LP</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[19a]"></a>ClearDTOG_RX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[199]"></a>ClearDTOG_TX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[1a0]"></a>Clear_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[2eb]"></a>ComToUart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.ComToUart))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>

<P><STRONG><a name="[ce]"></a>DAC8501_SetCS1</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_dac8501.o(i.DAC8501_SetCS1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC8501_SetCS1
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetDacData
</UL>

<P><STRONG><a name="[d2]"></a>DAC8501_SetCS2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_dac8501.o(i.DAC8501_SetCS2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC8501_SetCS2
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetDacData
</UL>

<P><STRONG><a name="[d3]"></a>DAC8501_SetDacData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_dac8501.o(i.DAC8501_SetDacData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DAC8501_SetDacData &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS1
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>DAC8562_SetCS</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_dac8562.o(i.DAC8562_SetCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC8562_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_WriteCmd
</UL>

<P><STRONG><a name="[d6]"></a>DAC8562_SetDacData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_dac8562.o(i.DAC8562_SetDacData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC8562_SetDacData &rArr; DAC8562_WriteCmd &rArr; DAC8562_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>DHT11_ReadData</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, bsp_dht11.o(i.DHT11_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = DHT11_ReadData &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDHT11
</UL>

<P><STRONG><a name="[52]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_sdio_sd.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[241]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[242]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[244]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[243]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>EP1_IN_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = EP1_IN_Callback &rArr; Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>EP2_OUT_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = EP2_OUT_Callback &rArr; Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_TestUnitReady_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_ps2.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI15_10_IRQHandler &rArr; PS2_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StopWork
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
</UL>

<P><STRONG><a name="[10d]"></a>FSMC_NANDCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NANDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[10c]"></a>FSMC_NANDInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(i.FSMC_NANDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NANDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[de]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitNorFlash
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSRAM
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>

<P><STRONG><a name="[dd]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitNorFlash
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSRAM
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>

<P><STRONG><a name="[119]"></a>FT5X06_InitHard</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_ts_ft5x06.o(i.FT5X06_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FT5X06_InitHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[11d]"></a>FT5X06_PenInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(i.FT5X06_PenInt))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[11a]"></a>FT5X06_ReadID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_ts_ft5x06.o(i.FT5X06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT5X06_ReadID &rArr; FT5X06_ReadReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[11c]"></a>FT5X06_Scan</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, bsp_ts_ft5x06.o(i.FT5X06_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FT5X06_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_PenInt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[285]"></a>FT5X06_Timer1ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ts_ft5x06.o(i.FT5X06_Timer1ms), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[1e8]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitPS2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRA8875Flash
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDS18B20
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDHT11
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitNorFlash
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSRAM
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitSPI
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ConfigGPIO
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_InitHard
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_InitHard
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_PORT_INIT
</UL>

<P><STRONG><a name="[10f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_PenInt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query376Interrupt
</UL>

<P><STRONG><a name="[298]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[299]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[2d3]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[129]"></a>GT811_InitHard</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_gt811.o(i.GT811_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT811_InitHard &rArr; GT811_ReadVersion &rArr; GT811_ReadReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadVersion
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[12a]"></a>GT811_ReadVersion</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_gt811.o(i.GT811_ReadVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GT811_ReadVersion &rArr; GT811_ReadReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
</UL>

<P><STRONG><a name="[12c]"></a>GT811_Scan</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, bsp_gt811.o(i.GT811_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GT811_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>

<P><STRONG><a name="[284]"></a>GT811_Timer1ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_gt811.o(i.GT811_Timer1ms), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[e5]"></a>GetEPRxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[29d]"></a>GetEPRxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[e1]"></a>GetEPTxAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[59]"></a>Get_Max_Lun</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(i.Get_Max_Lun))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.MASS_Data_Setup)
</UL>
<P><STRONG><a name="[12d]"></a>Get_SerialNum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_hw.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[12f]"></a>HMC5883L_ReadData</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, bsp_hmc5883l.o(i.HMC5883L_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HMC5883L_ReadData &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>I2S_CODEC_DataTransfer</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, audio_rec.o(i.I2S_CODEC_DataTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2S_CODEC_DataTransfer &rArr; SPI_I2S_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetITStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>ILI9488_ClrScr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcd_ili9488.o(i.ILI9488_ClrScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ILI9488_ClrScr &rArr; ILI9488_SetDispWin
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
</UL>

<P><STRONG><a name="[139]"></a>ILI9488_DrawBMP</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lcd_ili9488.o(i.ILI9488_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ILI9488_DrawBMP &rArr; ILI9488_PutPixel &rArr; ILI9488_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_PutPixel
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
</UL>

<P><STRONG><a name="[13b]"></a>ILI9488_DrawCircle</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd_ili9488.o(i.ILI9488_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ILI9488_DrawCircle &rArr; ILI9488_PutPixel &rArr; ILI9488_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
</UL>

<P><STRONG><a name="[13c]"></a>ILI9488_DrawLine</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lcd_ili9488.o(i.ILI9488_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ILI9488_DrawLine &rArr; ILI9488_PutPixel &rArr; ILI9488_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawRect
</UL>

<P><STRONG><a name="[13d]"></a>ILI9488_DrawRect</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcd_ili9488.o(i.ILI9488_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ILI9488_DrawRect &rArr; ILI9488_DrawLine &rArr; ILI9488_PutPixel &rArr; ILI9488_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[13e]"></a>ILI9488_FillRect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_ili9488.o(i.ILI9488_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ILI9488_FillRect &rArr; ILI9488_SetDispWin
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
</UL>

<P><STRONG><a name="[13f]"></a>ILI9488_GetPixel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_ili9488.o(i.ILI9488_GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9488_GetPixel &rArr; ILI9488_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_InitHard
</UL>

<P><STRONG><a name="[141]"></a>ILI9488_InitHard</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lcd_ili9488.o(i.ILI9488_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = ILI9488_InitHard &rArr; Init_9488 &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_ReadID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_PutPixel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_GetPixel
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_9488
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
</UL>

<P><STRONG><a name="[13a]"></a>ILI9488_PutPixel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_ili9488.o(i.ILI9488_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9488_PutPixel &rArr; ILI9488_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_InitHard
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawLine
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawCircle
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawBMP
</UL>

<P><STRONG><a name="[142]"></a>ILI9488_ReadID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcd_ili9488.o(i.ILI9488_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_InitHard
</UL>

<P><STRONG><a name="[158]"></a>ILI9488_SetDirection</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lcd_ili9488.o(i.ILI9488_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ILI9488_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_9488
</UL>

<P><STRONG><a name="[144]"></a>IRD_DecodeNec</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, bsp_ir_decode.o(i.IRD_DecodeNec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRD_DecodeNec
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>IRD_StartWork</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, bsp_ir_decode.o(i.IRD_StartWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IRD_StartWork &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[14c]"></a>IRD_StopWork</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_ir_decode.o(i.IRD_StopWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRD_StopWork
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[c5]"></a>In0_Process</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[16c]"></a>LCD_Blend565</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_Blend565))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
</UL>

<P><STRONG><a name="[f3]"></a>LCD_ClrScr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_ClrScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_ClrScr &rArr; RA8875_ClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_ClrScr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_ClrScr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFormMP3
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitFace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>

<P><STRONG><a name="[ea]"></a>LCD_DispStr</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, bsp_tft_lcd.o(i.LCD_DispStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGroupBox
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_DispStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCheckBox
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMPU6050
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDHT11
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBMP180
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTopBar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBottomBar
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>

<P><STRONG><a name="[fc]"></a>LCD_DispStrEx</STRONG> (Thumb, 460 bytes, Stack size 192 bytes, bsp_tft_lcd.o(i.LCD_DispStrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFont
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackColor
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetStrWidth
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontHeight
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadHZDot
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[ec]"></a>LCD_DrawBMP</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_tft_lcd.o(i.LCD_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_DrawBMP &rArr; RA8875_DrawBMP &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawBMP
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileDispPic
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBackground
</UL>

<P><STRONG><a name="[f0]"></a>LCD_DrawButton</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, bsp_tft_lcd.o(i.LCD_DrawButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LCD_DrawButton &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFormMP3
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispButton
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[167]"></a>LCD_DrawCheckBox</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bsp_tft_lcd.o(i.LCD_DrawCheckBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LCD_DrawCheckBox &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[168]"></a>LCD_DrawCircle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_tft_lcd.o(i.LCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_DrawCircle &rArr; SPFD5420_DrawCircle &rArr; SPFD5420_PutPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawCircle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>

<P><STRONG><a name="[f4]"></a>LCD_DrawGroupBox</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_tft_lcd.o(i.LCD_DrawGroupBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LCD_DrawGroupBox &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFormMP3
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitFace
</UL>

<P><STRONG><a name="[81]"></a>LCD_DrawIcon32</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, bsp_tft_lcd.o(i.LCD_DrawIcon32))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LCD_DrawIcon32 &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Blend565
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayIcon
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[f5]"></a>LCD_DrawLabel</STRONG> (Thumb, 92 bytes, Stack size 272 bytes, bsp_tft_lcd.o(i.LCD_DrawLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = LCD_DrawLabel &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3DispStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFormMP3
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[166]"></a>LCD_DrawRect</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_tft_lcd.o(i.LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_DrawRect &rArr; SPFD5420_DrawRect &rArr; SPFD5420_DrawLine &rArr; SPFD5420_PutPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGroupBox
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCheckBox
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>

<P><STRONG><a name="[ed]"></a>LCD_Fill_Rect</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bsp_tft_lcd.o(i.LCD_Fill_Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_Fill_Rect &rArr; RA8875_FillRect &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawHLine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_FillRect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCheckBox
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTopBar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBottomBar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBackground
</UL>

<P><STRONG><a name="[172]"></a>LCD_GetChipDescribe</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_GetChipDescribe))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[15c]"></a>LCD_GetFontHeight</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_GetFontHeight))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
</UL>

<P><STRONG><a name="[175]"></a>LCD_GetFontWidth</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_GetFontWidth))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetStrWidth
</UL>

<P><STRONG><a name="[100]"></a>LCD_GetHeight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_GetHeight))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>

<P><STRONG><a name="[16b]"></a>LCD_GetPixel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_GetPixel &rArr; RA8875_GetPixel &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_GetPixel
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_GetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
</UL>

<P><STRONG><a name="[15b]"></a>LCD_GetStrWidth</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, bsp_tft_lcd.o(i.LCD_GetStrWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_GetStrWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[fa]"></a>LCD_GetWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_GetWidth))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>

<P><STRONG><a name="[176]"></a>LCD_InitHard</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, bsp_tft_lcd.o(i.LCD_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = LCD_InitHard &rArr; ILI9488_InitHard &rArr; Init_9488 &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_ReadID
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_InitHard
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_ReadID
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_InitHard
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>LCD_PutPixel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_tft_lcd.o(i.LCD_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_PutPixel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
</UL>

<P><STRONG><a name="[17a]"></a>LCD_SetBackLight</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_SetBackLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_SetBackLight &rArr; LCD_SetPwmBackLight &rArr; bsp_SetTIMOutPWM_N &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackLight
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPwmBackLight
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>LCD_SetDirection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_tft_lcd.o(i.LCD_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SetDirection &rArr; RA8875_SetDirection &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDirection
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
</UL>

<P><STRONG><a name="[17e]"></a>LCD_SetPwmBackLight</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_tft_lcd.o(i.LCD_SetPwmBackLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_SetPwmBackLight &rArr; bsp_SetTIMOutPWM_N &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
</UL>

<P><STRONG><a name="[231]"></a>Led_RW_OFF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_hw.o(i.Led_RW_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[230]"></a>Led_RW_ON</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_hw.o(i.Led_RW_ON))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[182]"></a>LoadParam</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, param.o(i.LoadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LoadParam &rArr; SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_LoadParam
</UL>

<P><STRONG><a name="[185]"></a>LoadUserPatch</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_vs1053b.o(i.LoadUserPatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoadUserPatch &rArr; vs1053_WriteCmd &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WaitTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SoftReset
</UL>

<P><STRONG><a name="[188]"></a>MAL_GetStatus</STRONG> (Thumb, 222 bytes, Stack size 112 bytes, mass_mal.o(i.MAL_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_FormatCapacity
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[18f]"></a>MAL_Read</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mass_mal.o(i.MAL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MAL_Read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[194]"></a>MAL_Write</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mass_mal.o(i.MAL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[7]"></a>MASS_Data_Setup</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, usb_prop.o(i.MASS_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MASS_Data_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Lun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>MASS_GetConfigDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_GetConfigDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>MASS_GetDeviceDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_GetDeviceDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>MASS_GetStringDescriptor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_GetStringDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>MASS_Get_Interface_Setting</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>MASS_NoData_Setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_NoData_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MASS_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>MASS_Reset</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, usb_prop.o(i.MASS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MASS_Reset &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>MASS_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>MASS_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>MASS_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MASS_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1a5]"></a>MODBUS_ReciveNew</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_modbus.o(i.MODBUS_ReciveNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MODBUS_ReciveNew &rArr; bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReciveNew
</UL>

<P><STRONG><a name="[1a7]"></a>MOTO_ISR</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, bsp_step_moto.o(i.MOTO_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MOTO_ISR &rArr; MOTO_Pause &rArr; bsp_SetTIMforInt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>MOTO_Pause</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_step_moto.o(i.MOTO_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MOTO_Pause &rArr; bsp_SetTIMforInt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_ISR
</UL>

<P><STRONG><a name="[1b6]"></a>MP3Player</STRONG> (Thumb, 782 bytes, Stack size 4456 bytes, mp3_player.o(i.MP3Player))
<BR><BR>[Stack]<UL><LI>Max Depth = 9176<LI>Call Chain = MP3Player &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StopTimer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartAutoTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CheckTimer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetKey
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetVolume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetBASS
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReqNewData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewDir
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3DispStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFormMP3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFormMP3
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>MPU6050_ReadData</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, bsp_mpu6050.o(i.MPU6050_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU6050_ReadData &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[1c9]"></a>MPU6050_WriteByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_mpu6050.o(i.MPU6050_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU6050_WriteByte &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMPU6050
</UL>

<P><STRONG><a name="[1ca]"></a>MainMenu</STRONG> (Thumb, 598 bytes, Stack size 64 bytes, main_menu.o(i.MainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = MainMenu &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetKey
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTopBar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBottomBar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBackground
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>Mass_Storage_In</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usb_bot.o(i.Mass_Storage_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[103]"></a>Mass_Storage_Out</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_bot.o(i.Mass_Storage_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_TestUnitReady_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>NAND_Format</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.NAND_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NAND_Format &rArr; NAND_BuildLUT &rArr; FSMC_NAND_ReadSpare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[18e]"></a>NAND_FormatCapacity</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.NAND_FormatCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[1cf]"></a>NAND_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NAND_Init &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Reset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1ce]"></a>NAND_IsBadBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_IsBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NAND_IsBadBlock &rArr; FSMC_NAND_ReadSpare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
</UL>

<P><STRONG><a name="[1d1]"></a>NAND_MarkBadBlock</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_MarkBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
</UL>

<P><STRONG><a name="[193]"></a>NAND_Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NAND_Read &rArr; FSMC_NAND_ReadData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_AddrToPhyBlockNo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>

<P><STRONG><a name="[18d]"></a>NAND_ReadID</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.NAND_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>

<P><STRONG><a name="[1d4]"></a>NAND_ReadMultiSectors</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsp_nand_flash.o(i.NAND_ReadMultiSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAND_ReadMultiSectors &rArr; FSMC_NAND_ReadData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_LBNtoPBN
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[197]"></a>NAND_Write</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.NAND_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NAND_Write &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBufOk
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_AddrToPhyBlockNo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteData
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>

<P><STRONG><a name="[1d8]"></a>NAND_WriteMultiSectors</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, bsp_nand_flash.o(i.NAND_WriteMultiSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_LBNtoPBN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1d7]"></a>NAND_WriteToNewBlock</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, bsp_nand_flash.o(i.NAND_WriteToNewBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>NOR_ReadID</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_nor_flash.o(i.NOR_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NOR_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
</UL>

<P><STRONG><a name="[147]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[1ea]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[c7]"></a>Out0_Process</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Out0_Process &rArr; DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[e6]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[1eb]"></a>PS2_ClearBuf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_ps2.o(i.PS2_ClearBuf))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StopWork
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
</UL>

<P><STRONG><a name="[295]"></a>PS2_DecodeMouse</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, bsp_ps2.o(i.PS2_DecodeMouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PS2_DecodeMouse
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1df]"></a>PS2_GetDevceType</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsp_ps2.o(i.PS2_GetDevceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PS2_GetDevceType &rArr; PS2_WaitMsg &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_WaitMsg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_SendCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1ef]"></a>PS2_GetMsg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_ps2.o(i.PS2_GetMsg))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_WaitMsg
</UL>

<P><STRONG><a name="[105]"></a>PS2_ISR</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, bsp_ps2.o(i.PS2_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PS2_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRunTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>PS2_InitKeyboard</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bsp_ps2.o(i.PS2_InitKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PS2_InitKeyboard &rArr; PS2_WaitMsg &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_WaitMsg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_SendCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1e5]"></a>PS2_InitMouse</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, bsp_ps2.o(i.PS2_InitMouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PS2_InitMouse &rArr; PS2_WaitMsg &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_WaitMsg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_SendCmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[294]"></a>PS2_IsMousePacket</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ps2.o(i.PS2_IsMousePacket))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1ee]"></a>PS2_PutMsg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_ps2.o(i.PS2_PutMsg), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Timer
</UL>

<P><STRONG><a name="[1e3]"></a>PS2_SetKeyboardLed</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bsp_ps2.o(i.PS2_SetKeyboardLed), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_HookKeyboard
</UL>

<P><STRONG><a name="[1e7]"></a>PS2_StartWork</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bsp_ps2.o(i.PS2_StartWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PS2_StartWork &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_ClearBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1ec]"></a>PS2_StopWork</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_ps2.o(i.PS2_StopWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PS2_StopWork &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_ClearBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1ed]"></a>PS2_Timer</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_ps2.o(i.PS2_Timer), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_PutMsg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_SendCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_HookKeyboard
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[21b]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteClock
</UL>

<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>Post0_Process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Post0_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[1a3]"></a>PowerOn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[1f1]"></a>PrintfHardInfo</STRONG> (Thumb, 484 bytes, Stack size 152 bytes, hard_test.o(i.PrintfHardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PrintfHardInfo &rArr; dm9k_ReadID &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_TestExtSRAM
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ReadID
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetChipDescribe
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetHeight
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>Query376Interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_sw.o(i.Query376Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Query376Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskConnect
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>

<P><STRONG><a name="[15a]"></a>RA8875_ClrScr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_ClrScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RA8875_ClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetTarBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
</UL>

<P><STRONG><a name="[1fa]"></a>RA8875_ConfigGPIO</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_ConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RA8875_ConfigGPIO &rArr; RA8875_InitSPI &rArr; RA8875_LowSpeedSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[208]"></a>RA8875_Delaly1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_ra8875_port.o(i.RA8875_Delaly1ms))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[207]"></a>RA8875_Delaly1us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ra8875_port.o(i.RA8875_Delaly1us))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[fb]"></a>RA8875_DispBmpInFlash</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_DispBmpInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RA8875_DispBmpInFlash &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg_Int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_QuitWinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[160]"></a>RA8875_DispStr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_DispStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RA8875_DispStr &rArr; RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[165]"></a>RA8875_DrawBMP</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RA8875_DrawBMP &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_QuitWinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
</UL>

<P><STRONG><a name="[16a]"></a>RA8875_DrawCircle</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RA8875_DrawCircle &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
</UL>

<P><STRONG><a name="[16e]"></a>RA8875_DrawRect</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RA8875_DrawRect &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[170]"></a>RA8875_FillRect</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RA8875_FillRect &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
</UL>

<P><STRONG><a name="[174]"></a>RA8875_GetPixel</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RA8875_GetPixel &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData16
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
</UL>

<P><STRONG><a name="[204]"></a>RA8875_HighSpeedSPI</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bsp_ra8875_port.o(i.RA8875_HighSpeedSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RA8875_HighSpeedSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[178]"></a>RA8875_InitHard</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RA8875_InitHard &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRA8875Flash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_HighSpeedSPI
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Delaly1us
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Delaly1ms
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ConfigGPIO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDirection
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
</UL>

<P><STRONG><a name="[1fc]"></a>RA8875_InitSPI</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_InitSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RA8875_InitSPI &rArr; RA8875_LowSpeedSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_LowSpeedSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ConfigGPIO
</UL>

<P><STRONG><a name="[286]"></a>RA8875_IsBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_ra8875.o(i.RA8875_IsBusy), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[20a]"></a>RA8875_LowSpeedSPI</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bsp_ra8875_port.o(i.RA8875_LowSpeedSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RA8875_LowSpeedSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitSPI
</UL>

<P><STRONG><a name="[17d]"></a>RA8875_PutPixel</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lcd_ra8875.o(i.RA8875_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>

<P><STRONG><a name="[1ff]"></a>RA8875_QuitWinMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_ra8875.o(i.RA8875_QuitWinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RA8875_QuitWinMode &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
</UL>

<P><STRONG><a name="[20c]"></a>RA8875_ReadData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_ReadData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg_Int
</UL>

<P><STRONG><a name="[203]"></a>RA8875_ReadData16</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_ReadData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_ReadData16 &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
</UL>

<P><STRONG><a name="[1fb]"></a>RA8875_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_ReadReg &rArr; RA8875_WriteCmd &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ConfigGPIO
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[1fe]"></a>RA8875_ReadReg_Int</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_ReadReg_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_ReadReg_Int &rArr; RA8875_WriteCmd &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
</UL>

<P><STRONG><a name="[1f9]"></a>RA8875_ReadStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_ReadStatus &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
</UL>

<P><STRONG><a name="[15e]"></a>RA8875_SetBackColor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RA8875_SetBackColor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[17f]"></a>RA8875_SetBackLight</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_SetBackLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RA8875_SetBackLight &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
</UL>

<P><STRONG><a name="[180]"></a>RA8875_SetDirection</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RA8875_SetDirection &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[1fd]"></a>RA8875_SetDispWin</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_SetDispWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_QuitWinMode
</UL>

<P><STRONG><a name="[15f]"></a>RA8875_SetFont</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RA8875_SetFont &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[15d]"></a>RA8875_SetFrontColor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_SetFrontColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_FillRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[20e]"></a>RA8875_SetTextZoom</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd_ra8875.o(i.RA8875_SetTextZoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RA8875_SetTextZoom &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[20f]"></a>RA8875_TouchInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_TouchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RA8875_TouchInit &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[210]"></a>RA8875_TouchReadX</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_TouchReadX), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[287]"></a>RA8875_TouchReadY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_ra8875.o(i.RA8875_TouchReadY), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[202]"></a>RA8875_WaitBusy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_ra8875.o(i.RA8875_WaitBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_WaitBusy &rArr; RA8875_ReadStatus &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_FillRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
</UL>

<P><STRONG><a name="[1f7]"></a>RA8875_WriteCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_WriteCmd &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_FillRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg_Int
</UL>

<P><STRONG><a name="[1f8]"></a>RA8875_WriteData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_FillRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
</UL>

<P><STRONG><a name="[201]"></a>RA8875_WriteData16</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.RA8875_WriteData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_WriteData16 &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
</UL>

<P><STRONG><a name="[9c]"></a>RA8875_WriteReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFont
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackColor
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ConfigGPIO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDirection
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackLight
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_FillRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextCursor
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetCursor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetTarBlock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
</UL>

<P><STRONG><a name="[db]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitNorFlash
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSRAM
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>

<P><STRONG><a name="[146]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[c2]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitPS2
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRA8875Flash
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDS18B20
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDHT11
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitNorFlash
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSRAM
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_LowSpeedSPI
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitSPI
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_HighSpeedSPI
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ConfigGPIO
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_InitHard
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_InitHard
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_PORT_INIT
</UL>

<P><STRONG><a name="[95]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[2cc]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[297]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2c6]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[2c5]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[2c8]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[2c7]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[211]"></a>RS485_InitTXE</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_uart_fifo.o(i.RS485_InitTXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RS485_InitTXE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[5d]"></a>RS485_ReciveNew</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.RS485_ReciveNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS485_ReciveNew &rArr; MODBUS_ReciveNew &rArr; bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReciveNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(i.UartVarInit)
</UL>
<P><STRONG><a name="[5b]"></a>RS485_SendBefor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.RS485_SendBefor))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(i.UartVarInit)
</UL>
<P><STRONG><a name="[5c]"></a>RS485_SendOver</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.RS485_SendOver))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart_fifo.o(i.UartVarInit)
</UL>
<P><STRONG><a name="[215]"></a>RTC_CalcWeek</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bsp_cpu_rtc.o(i.RTC_CalcWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_CalcWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadClock
</UL>

<P><STRONG><a name="[217]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[218]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[213]"></a>RTC_GetCounter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadClock
</UL>

<P><STRONG><a name="[2ca]"></a>RTC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[212]"></a>RTC_ReadClock</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bsp_cpu_rtc.o(i.RTC_ReadClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_ReadClock &rArr; RTC_CalcWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalcWeek
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[216]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteClock
</UL>

<P><STRONG><a name="[219]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[21c]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteClock
</UL>

<P><STRONG><a name="[2c9]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[21a]"></a>RTC_WriteClock</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, bsp_cpu_rtc.o(i.RTC_WriteClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_WriteClock &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[21d]"></a>RadioMain</STRONG> (Thumb, 2922 bytes, Stack size 1080 bytes, fm_radio.o(i.RadioMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 5808<LI>Call Chain = RadioMain &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_OutMute
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StopTimer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartAutoTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CheckTimer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetOutVolume
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_FM_Revice
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_AM_Revice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerDown
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4704_SetFMIntput
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SaveParam
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_FM_FreqList
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_DispStatus
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_AdjustVolume
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_AM_FreqList
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetKey
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCheckBox
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>ReadFileDispPic</STRONG> (Thumb, 142 bytes, Stack size 2192 bytes, touch_test.o(i.ReadFileDispPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = ReadFileDispPic &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
</UL>

<P><STRONG><a name="[22e]"></a>Read_Memory</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, memory.o(i.Read_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Read_Memory &rArr; MAL_Read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[232]"></a>SCSI_Address_Management</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Address_Management))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[ae]"></a>SCSI_Format_Cmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Format_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCSI_Format_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a4]"></a>SCSI_Inquiry_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_Inquiry_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_Inquiry_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[af]"></a>SCSI_Invalid_Cmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Invalid_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Invalid_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a7]"></a>SCSI_ModeSense10_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_ModeSense10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ModeSense10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a6]"></a>SCSI_ModeSense6_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_ModeSense6_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ModeSense6_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[ab]"></a>SCSI_Read10_Cmd</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usb_scsi.o(i.SCSI_Read10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a9]"></a>SCSI_ReadCapacity10_Cmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadCapacity10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCSI_ReadCapacity10_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a8]"></a>SCSI_ReadFormatCapacity_Cmd</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadFormatCapacity_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCSI_ReadFormatCapacity_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a3]"></a>SCSI_RequestSense_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_RequestSense_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_RequestSense_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[a5]"></a>SCSI_Start_Stop_Unit_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.SCSI_Start_Stop_Unit_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_Start_Stop_Unit_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[aa]"></a>SCSI_TestUnitReady_Cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_TestUnitReady_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SCSI_TestUnitReady_Cmd &rArr; MAL_GetStatus &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[ad]"></a>SCSI_Verify10_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Verify10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Verify10_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[ac]"></a>SCSI_Write10_Cmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Write10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[c9]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[249]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[247]"></a>SDIO_ClockCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[24c]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[126]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[23c]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ca]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[127]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[248]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[23f]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[cb]"></a>SDIO_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[48]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_sdio_sd.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24a]"></a>SDIO_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[238]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[128]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[125]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[246]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[237]"></a>SD_Detect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[18c]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>

<P><STRONG><a name="[18a]"></a>SD_GetCardInfo</STRONG> (Thumb, 604 bytes, Stack size 28 bytes, bsp_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>

<P><STRONG><a name="[239]"></a>SD_GetState</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[192]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[189]"></a>SD_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bsp_sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[23e]"></a>SD_InitializeCards</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, bsp_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[240]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, bsp_sdio_sd.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[245]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, bsp_sdio_sd.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[23b]"></a>SD_LowLevel_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[23d]"></a>SD_PowerON</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, bsp_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[df]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[236]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>SD_ReadBlock</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bsp_sdio_sd.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_ReadBlock &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[190]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, bsp_sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[18b]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>

<P><STRONG><a name="[23a]"></a>SD_SendStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[24d]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[191]"></a>SD_WaitReadOperation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[196]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>

<P><STRONG><a name="[24e]"></a>SD_WriteBlock</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bsp_sdio_sd.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_WriteBlock &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[195]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, bsp_sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[222]"></a>SI4704_SetFMIntput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_si4730.o(i.SI4704_SetFMIntput))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI4704_SetFMIntput &rArr; SI4730_SetProperty &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[256]"></a>SI4730_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_si4730.o(i.SI4730_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
</UL>

<P><STRONG><a name="[250]"></a>SI4730_GetAMSignalQuality</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, bsp_si4730.o(i.SI4730_GetAMSignalQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4730_GetAMSignalQuality &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
</UL>

<P><STRONG><a name="[253]"></a>SI4730_GetAMTuneStatus</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, bsp_si4730.o(i.SI4730_GetAMTuneStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4730_GetAMTuneStatus &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
</UL>

<P><STRONG><a name="[254]"></a>SI4730_GetFMSignalQuality</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, bsp_si4730.o(i.SI4730_GetFMSignalQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4730_GetFMSignalQuality &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
</UL>

<P><STRONG><a name="[255]"></a>SI4730_GetFMTuneStatus</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, bsp_si4730.o(i.SI4730_GetFMTuneStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4730_GetFMTuneStatus &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
</UL>

<P><STRONG><a name="[220]"></a>SI4730_GetRevision</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_si4730.o(i.SI4730_GetRevision))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI4730_GetRevision &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[223]"></a>SI4730_PowerDown</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_si4730.o(i.SI4730_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI4730_PowerDown &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[22c]"></a>SI4730_PowerUp_AM_Revice</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp_si4730.o(i.SI4730_PowerUp_AM_Revice))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI4730_PowerUp_AM_Revice &rArr; SI4730_SetProperty &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetProperty
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[21f]"></a>SI4730_PowerUp_FM_Revice</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_si4730.o(i.SI4730_PowerUp_FM_Revice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI4730_PowerUp_FM_Revice &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[251]"></a>SI4730_SendCmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_si4730.o(i.SI4730_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI4730_SendCmd &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_FM_Revice
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_AM_Revice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerDown
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetProperty
</UL>

<P><STRONG><a name="[227]"></a>SI4730_SetAMFreq</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, bsp_si4730.o(i.SI4730_SetAMFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI4730_SetAMFreq &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[228]"></a>SI4730_SetFMFreq</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, bsp_si4730.o(i.SI4730_SetFMFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI4730_SetFMFreq &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[22b]"></a>SI4730_SetOutVolume</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_si4730.o(i.SI4730_SetOutVolume))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_AdjustVolume
</UL>

<P><STRONG><a name="[24f]"></a>SI4730_SetProperty</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, bsp_si4730.o(i.SI4730_SetProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI4730_SetProperty &rArr; SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_AM_Revice
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4704_SetFMIntput
</UL>

<P><STRONG><a name="[252]"></a>SI4730_WaitStatus80</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_si4730.o(i.SI4730_WaitStatus80))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI4730_WaitStatus80 &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_FM_Revice
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerUp_AM_Revice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_PowerDown
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetProperty
</UL>

<P><STRONG><a name="[159]"></a>SPFD5420_ClrScr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd_spfd5420.o(i.SPFD5420_ClrScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPFD5420_ClrScr &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
</UL>

<P><STRONG><a name="[164]"></a>SPFD5420_DrawBMP</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lcd_spfd5420.o(i.SPFD5420_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPFD5420_DrawBMP &rArr; SPFD5420_SetDispWin &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_PutPixel
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
</UL>

<P><STRONG><a name="[169]"></a>SPFD5420_DrawCircle</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd_spfd5420.o(i.SPFD5420_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPFD5420_DrawCircle &rArr; SPFD5420_PutPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
</UL>

<P><STRONG><a name="[171]"></a>SPFD5420_DrawHLine</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd_spfd5420.o(i.SPFD5420_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPFD5420_DrawHLine &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
</UL>

<P><STRONG><a name="[259]"></a>SPFD5420_DrawLine</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lcd_spfd5420.o(i.SPFD5420_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPFD5420_DrawLine &rArr; SPFD5420_PutPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawRect
</UL>

<P><STRONG><a name="[16d]"></a>SPFD5420_DrawRect</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcd_spfd5420.o(i.SPFD5420_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPFD5420_DrawRect &rArr; SPFD5420_DrawLine &rArr; SPFD5420_PutPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[173]"></a>SPFD5420_GetPixel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd_spfd5420.o(i.SPFD5420_GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPFD5420_GetPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
</UL>

<P><STRONG><a name="[17b]"></a>SPFD5420_InitHard</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lcd_spfd5420.o(i.SPFD5420_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPFD5420_InitHard &rArr; Init_5420_4001 &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_WriteReg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_ReadReg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_61509
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_5420_4001
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
</UL>

<P><STRONG><a name="[17c]"></a>SPFD5420_PutPixel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_spfd5420.o(i.SPFD5420_PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPFD5420_PutPixel &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawLine
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawCircle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawBMP
</UL>

<P><STRONG><a name="[177]"></a>SPFD5420_ReadID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_spfd5420.o(i.SPFD5420_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPFD5420_ReadID &rArr; SPFD5420_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
</UL>

<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, audio_rec.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; I2S_CODEC_DataTransfer &rArr; SPI_I2S_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[206]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_LowSpeedSPI
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_HighSpeedSPI
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus
</UL>

<P><STRONG><a name="[132]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead0
</UL>

<P><STRONG><a name="[135]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
</UL>

<P><STRONG><a name="[131]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
</UL>

<P><STRONG><a name="[133]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead0
</UL>

<P><STRONG><a name="[136]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ShiftByte
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead0
</UL>

<P><STRONG><a name="[205]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_LowSpeedSPI
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_HighSpeedSPI
</UL>

<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[184]"></a>SaveParam</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i.SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SaveParam
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadParam
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SaveParam
</UL>

<P><STRONG><a name="[25c]"></a>SaveScreenToBmp</STRONG> (Thumb, 414 bytes, Stack size 3648 bytes, bmp_file.o(i.SaveScreenToBmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4712<LI>Call Chain = SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetWidth
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetHeight
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
</UL>

<P><STRONG><a name="[19b]"></a>SetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[14d]"></a>SetDeviceAddress</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[19d]"></a>SetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[19e]"></a>SetEPRxCount</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
</UL>

<P><STRONG><a name="[9f]"></a>SetEPRxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[1a1]"></a>SetEPRxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[19f]"></a>SetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[e3]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[9e]"></a>SetEPTxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[19c]"></a>SetEPType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[a2]"></a>Set_CSW</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_bot.o(i.Set_CSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[a1]"></a>Set_Scsi_Sense_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.Set_Scsi_Sense_Data))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[c6]"></a>Setup0_Process</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[1dd]"></a>Standard_ClearFeature</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[57]"></a>Standard_GetConfiguration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[198]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetStringDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetDeviceDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetConfigDescriptor
</UL>

<P><STRONG><a name="[58]"></a>Standard_GetInterface</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[56]"></a>Standard_GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[1da]"></a>Standard_SetConfiguration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1db]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1de]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1dc]"></a>Standard_SetInterface</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_timer.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[261]"></a>SysTick_ISR</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_timer.o(i.SysTick_ISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bsp_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, bsp_ir_decode.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_DecodeNec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, form_dac8501.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_IRQHandler &rArr; DAC8501_SetDacData &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusBusy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetDacData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_step_moto.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM6_IRQHandler &rArr; MOTO_ISR &rArr; MOTO_Pause &rArr; bsp_SetTIMforInt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, form_dac8562.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM7_IRQHandler &rArr; DAC8562_SetDacData &rArr; DAC8562_WriteCmd &rArr; DAC8562_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusBusy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_SetDacData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2dd]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_ISR
</UL>

<P><STRONG><a name="[14a]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StopWork
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2de]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[266]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2df]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[265]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>TIM_ICInit</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StopWork
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2d6]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2d7]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2d8]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2d9]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2da]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2db]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2dc]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2d4]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2e1]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[2e2]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[2e3]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[2e0]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartHardTimer
</UL>

<P><STRONG><a name="[269]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[26b]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[26c]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[26d]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[148]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[275]"></a>TOUCH_Abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_Abs))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MoveValid
</UL>

<P><STRONG><a name="[26e]"></a>TOUCH_Calibration</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, bsp_touch.o(i.TOUCH_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = TOUCH_Calibration &rArr; TOUCH_WaitRelease &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetHeight
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcY
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcX
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CelarFIFO
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Abs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_WaitRelease
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SaveParam
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PressValid
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DispPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[277]"></a>TOUCH_CapScan</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_CapScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TOUCH_CapScan &rArr; GT811_Scan &rArr; TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
</UL>

<P><STRONG><a name="[26f]"></a>TOUCH_CelarFIFO</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_CelarFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[1c3]"></a>TOUCH_GetKey</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_touch.o(i.TOUCH_GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TOUCH_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[278]"></a>TOUCH_GetX</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_touch.o(i.TOUCH_GetX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TOUCH_GetX &rArr; TOUCH_TransX &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcY
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcX
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[27a]"></a>TOUCH_GetY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_touch.o(i.TOUCH_GetY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TOUCH_GetY &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcY
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcX
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[1c4]"></a>TOUCH_InRect</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, bsp_touch.o(i.TOUCH_InRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TOUCH_InRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[27c]"></a>TOUCH_InitHard</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bsp_touch.o(i.TOUCH_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = TOUCH_InitHard &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadID
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_InitHard
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_LoadParam
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_InitHard
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27f]"></a>TOUCH_MoveValid</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, bsp_touch.o(i.TOUCH_MoveValid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[11e]"></a>TOUCH_PutKey</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, bsp_touch.o(i.TOUCH_PutKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TOUCH_PutKey &rArr; TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[272]"></a>TOUCH_ReadAdcX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_ReadAdcX))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetY
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetX
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_WaitRelease
</UL>

<P><STRONG><a name="[273]"></a>TOUCH_ReadAdcY</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_ReadAdcY))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetY
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetX
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_WaitRelease
</UL>

<P><STRONG><a name="[280]"></a>TOUCH_Scan</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, bsp_touch.o(i.TOUCH_Scan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusBusy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Timer1ms
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MoveValid
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PressValid
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_DataFilter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_PenInt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadY
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_IsBusy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Timer1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer1ms
</UL>

<P><STRONG><a name="[27d]"></a>TSC2046_InitHard</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_tsc2046.o(i.TSC2046_InitHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSC2046_InitHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[281]"></a>TSC2046_PenInt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_tsc2046.o(i.TSC2046_PenInt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[282]"></a>TSC2046_ReadAdc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_tsc2046.o(i.TSC2046_ReadAdc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead0
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[28b]"></a>TestMems</STRONG> (Thumb, 320 bytes, Stack size 176 bytes, mems_test.o(i.TestMems))
<BR><BR>[Stack]<UL><LI>Max Depth = 5104<LI>Call Chain = TestMems &rArr; DispDHT11 &rArr; DHT11_ReadData &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StopTimer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartAutoTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CheckTimer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMPU6050
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDS18B20
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBMP180
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_GetLux
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMPU6050
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitFace
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDHT11
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispButton
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBMP180
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[290]"></a>TestTouch</STRONG> (Thumb, 2018 bytes, Stack size 200 bytes, touch_test.o(i.TestTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 5264<LI>Call Chain = TestTouch &rArr; DispPic &rArr; ReadFileDispPic &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetChipDescribe
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetHeight
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InRect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetKey
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitPS2
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcY
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcX
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetY
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetX
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFont
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackColor
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StopWork
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_StartWork
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_IsMousePacket
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitMouse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitKeyboard
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_GetMsg
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_GetDevceType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_DecodeMouse
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StopWork
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_StartWork
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFormTouch
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_KeyTone
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>Transfer_Data_Request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_bot.o(i.Transfer_Data_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
</UL>

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART2_IRQHandler &rArr; UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_IRQHandler &rArr; UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[152]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[29e]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[151]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[150]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[29f]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[2a0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[1f0]"></a>USB_Cable_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_hw.o(i.USB_Cable_Config))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[2a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_hw.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; CTR_HP
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_HP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29b]"></a>USB_Istr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>USB_NotConfigured_LED</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_hw.o(i.USB_NotConfigured_LED))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[1a4]"></a>USB_SIL_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[1cb]"></a>USB_SIL_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SIL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[22f]"></a>USB_SIL_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_sil.o(i.USB_SIL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>UserToPMABufferCopy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[b4]"></a>Wait376Interrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, file_sys.o(i.Wait376Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query376Interrupt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteRead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>

<P><STRONG><a name="[234]"></a>Write_Memory</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, memory.o(i.Write_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
</UL>

<P><STRONG><a name="[2a2]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[332]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fe]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfLogo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StopTimer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_StartAutoTimer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewDir
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitMouse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitKeyboard
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_GetDevceType
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileDispPic
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[333]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[334]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2a4]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[335]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_SignalQuality
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_DispStatus
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3DispStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMPU6050
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDHT11
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBMP180
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[336]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[337]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[338]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[339]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[33a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c1]"></a>bsp_CheckTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_timer.o(i.bsp_CheckTimer))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[2c1]"></a>bsp_ClearMsg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_msg.o(i.bsp_ClearMsg))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMsg
</UL>

<P><STRONG><a name="[2aa]"></a>bsp_ConfigGpioOut</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_tim_pwm.o(i.bsp_ConfigGpioOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_ConfigGpioOut &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[2ac]"></a>bsp_ConfigTimGpio</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_tim_pwm.o(i.bsp_ConfigTimGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofTIM
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMOutPWM_N
</UL>

<P><STRONG><a name="[9a]"></a>bsp_DelayMS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_timer.o(i.bsp_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadData
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_WaitRelease
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_9488
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WaitConvert
</UL>

<P><STRONG><a name="[d9]"></a>bsp_DelayUS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_timer.o(i.bsp_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_WaitMsg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_SendCmd
</UL>

<P><STRONG><a name="[1c5]"></a>bsp_GetKey</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[2af]"></a>bsp_GetKey2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_GetKey2))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Idle
</UL>

<P><STRONG><a name="[2ab]"></a>bsp_GetRCCofGPIO</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, bsp_tim_pwm.o(i.bsp_GetRCCofGPIO))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
</UL>

<P><STRONG><a name="[2ad]"></a>bsp_GetRCCofTIM</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, bsp_tim_pwm.o(i.bsp_GetRCCofTIM))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetTIMforInt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
</UL>

<P><STRONG><a name="[f9]"></a>bsp_GetRunTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_timer.o(i.bsp_GetRunTime))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_ISR
</UL>

<P><STRONG><a name="[1bb]"></a>bsp_Idle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.bsp_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey2
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CapScan
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[2b0]"></a>bsp_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsp_Init &rArr; bsp_InitNorFlash &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitPS2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMPU6050
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBMP180
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitDHT11
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBH1750
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitNorFlash
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitExtSRAM
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bb]"></a>bsp_InitBH1750</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_bh1750.o(i.bsp_InitBH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_InitBH1750 &rArr; BH1750_AdjustSensitivity &rArr; BH1750_ChageMode &rArr; BH1750_WriteCmd &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ChageMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_AdjustSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[28c]"></a>bsp_InitBMP180</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_bmp180.o(i.bsp_InitBMP180))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitBMP180 &rArr; BMP180_Read2Bytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[2bc]"></a>bsp_InitDHT11</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_dht11.o(i.bsp_InitDHT11))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitDHT11 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[28e]"></a>bsp_InitDS18B20</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_ds18b20.o(i.bsp_InitDS18B20))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitDS18B20 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[2b5]"></a>bsp_InitExtSRAM</STRONG> (Thumb, 230 bytes, Stack size 112 bytes, bsp_fsmc_sram.o(i.bsp_InitExtSRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsp_InitExtSRAM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2bd]"></a>bsp_InitHardTimer</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bsp_timer.o(i.bsp_InitHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_InitHardTimer &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitTimer
</UL>

<P><STRONG><a name="[2b7]"></a>bsp_InitI2C</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.bsp_InitI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitI2C &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2b3]"></a>bsp_InitKey</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_InitKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_InitKey &rArr; bsp_InitKeyHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyVar
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2b2]"></a>bsp_InitLed</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_led.o(i.bsp_InitLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[28d]"></a>bsp_InitMPU6050</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_mpu6050.o(i.bsp_InitMPU6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitMPU6050 &rArr; MPU6050_WriteByte &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[2c0]"></a>bsp_InitMsg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_msg.o(i.bsp_InitMsg))
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ClearMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b6]"></a>bsp_InitNorFlash</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, bsp_nor_flash.o(i.bsp_InitNorFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsp_InitNorFlash &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[292]"></a>bsp_InitPS2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_ps2.o(i.bsp_InitPS2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitPS2 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[209]"></a>bsp_InitRA8875Flash</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_ra8875_flash.o(i.bsp_InitRA8875Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitRA8875Flash &rArr; w25_ReadInfo &rArr; w25_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_SetCS
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_ReadInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_InitHard
</UL>

<P><STRONG><a name="[2b4]"></a>bsp_InitRTC</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, bsp_cpu_rtc.o(i.bsp_InitRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_InitRTC &rArr; RTC_WriteClock &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2b9]"></a>bsp_InitSFlash</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.bsp_InitSFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_InitSFlash &rArr; sf_ReadInfo &rArr; sf_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2b8]"></a>bsp_InitSPIBus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp_spi_bus.o(i.bsp_InitSPIBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitSPIBus &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2ba]"></a>bsp_InitTimer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_timer.o(i.bsp_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_InitTimer &rArr; bsp_InitHardTimer &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitHardTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2b1]"></a>bsp_InitUart</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bsp_uart_fifo.o(i.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bsp_InitUart &rArr; InitHardUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartVarInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[2d2]"></a>bsp_KeyScan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_KeyScan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectKey
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer10ms
</UL>

<P><STRONG><a name="[25f]"></a>bsp_LedOff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_LedOff))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>

<P><STRONG><a name="[25d]"></a>bsp_LedOn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_LedOn))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[134]"></a>bsp_PutKey</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_PutKey))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CODEC_DataTransfer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectKey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRD_DecodeNec
</UL>

<P><STRONG><a name="[2e6]"></a>bsp_PutMsg</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_msg.o(i.bsp_PutMsg))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[263]"></a>bsp_RunPer10ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.bsp_RunPer10ms), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Pro
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[262]"></a>bsp_RunPer1ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.bsp_RunPer1ms), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Timer
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[d1]"></a>bsp_SPI_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_SetCS
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_SetCS
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetDS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetCS
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_SetCS
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch376_SetCS
</UL>

<P><STRONG><a name="[85]"></a>bsp_SetTIMOutPWM</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, bsp_tim_pwm.o(i.bsp_SetTIMOutPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Pro
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
</UL>

<P><STRONG><a name="[181]"></a>bsp_SetTIMOutPWM_N</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, bsp_tim_pwm.o(i.bsp_SetTIMOutPWM_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_SetTIMOutPWM_N &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigTimGpio
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ConfigGpioOut
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPwmBackLight
</UL>

<P><STRONG><a name="[1aa]"></a>bsp_SetTIMforInt</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, bsp_tim_pwm.o(i.bsp_SetTIMforInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_SetTIMforInt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRCCofTIM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Pause
</UL>

<P><STRONG><a name="[267]"></a>bsp_SpiBusBusy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SpiBusBusy))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[d0]"></a>bsp_SpiBusEnter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SpiBusEnter))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_SetCS
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_SetCS
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetDS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetCS
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_SetCS
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch376_SetCS
</UL>

<P><STRONG><a name="[cf]"></a>bsp_SpiBusExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_spi_bus.o(i.bsp_SpiBusExit))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_SetCS
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetCS1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_SetCS
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetDS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetCS
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_SetCS
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch376_SetCS
</UL>

<P><STRONG><a name="[1ba]"></a>bsp_StartAutoTimer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_timer.o(i.bsp_StartAutoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_StartAutoTimer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1a6]"></a>bsp_StartHardTimer</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bsp_timer.o(i.bsp_StartHardTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_StartHardTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReciveNew
</UL>

<P><STRONG><a name="[1c7]"></a>bsp_StopTimer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_timer.o(i.bsp_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_StopTimer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1f2]"></a>bsp_TestExtSRAM</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_fsmc_sram.o(i.bsp_TestExtSRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_TestExtSRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
</UL>

<P><STRONG><a name="[28a]"></a>bsp_spiRead0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_spi_bus.o(i.bsp_spiRead0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_spiRead0
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
</UL>

<P><STRONG><a name="[2e4]"></a>bsp_spiRead1</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_spi_bus.o(i.bsp_spiRead1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_spiRead1
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_ReadID
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH376Data
</UL>

<P><STRONG><a name="[d4]"></a>bsp_spiWrite0</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_spi_bus.o(i.bsp_spiWrite0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8501_SetDacData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SoftReset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_WriteCmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadReg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
</UL>

<P><STRONG><a name="[2cf]"></a>bsp_spiWrite1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_spi_bus.o(i.bsp_spiWrite1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_ReadID
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>

<P><STRONG><a name="[29c]"></a>can_ISR</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, can_network.o(i.can_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = can_ISR &rArr; BEEP_Stop &rArr; bsp_SetTIMOutPWM &rArr; bsp_ConfigTimGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutMsg
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2fa]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2ea]"></a>comSendBuf</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bsp_uart_fifo.o(i.comSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = comSendBuf &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>

<P><STRONG><a name="[2ec]"></a>comSendChar</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, bsp_uart_fifo.o(i.comSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = comSendChar &rArr; comSendBuf &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2ff]"></a>disk_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[300]"></a>disk_ioctl</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_FormatCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[301]"></a>disk_read</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[313]"></a>disk_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[302]"></a>disk_write</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1f5]"></a>dm9k_ReadID</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dm9k_uip.o(i.dm9k_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dm9k_ReadID &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ior
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
</UL>

<P><STRONG><a name="[183]"></a>ee_ReadBytes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bsp_eeprom_24xx.o(i.ee_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ee_ReadBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadParam
</UL>

<P><STRONG><a name="[25b]"></a>ee_WriteBytes</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bsp_eeprom_24xx.o(i.ee_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ee_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
</UL>

<P><STRONG><a name="[1bc]"></a>f_close</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileDispPic
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[2a1]"></a>f_closedir</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewDir
</UL>

<P><STRONG><a name="[1c6]"></a>f_lseek</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[fd]"></a>f_mount</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPic
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1bd]"></a>f_open</STRONG> (Thumb, 400 bytes, Stack size 624 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileDispPic
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[120]"></a>f_opendir</STRONG> (Thumb, 136 bytes, Stack size 552 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewDir
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
</UL>

<P><STRONG><a name="[1bf]"></a>f_read</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileDispPic
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[121]"></a>f_readdir</STRONG> (Thumb, 90 bytes, Stack size 544 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewDir
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillSongList
</UL>

<P><STRONG><a name="[304]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[25e]"></a>f_write</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveScreenToBmp
</UL>

<P><STRONG><a name="[2f1]"></a>ff_convert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2f4]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5e]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_uart_fifo.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputc &rArr; comSendChar &rArr; comSendBuf &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comSendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2ee]"></a>get_fat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[30c]"></a>get_fattime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, diskio.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fattime &rArr; RTC_ReadClock &rArr; RTC_CalcWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[91]"></a>i2c_Ack</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(i.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[1f4]"></a>i2c_CheckDevice</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(i.i2c_CheckDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_CheckDevice &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[92]"></a>i2c_NAck</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[90]"></a>i2c_ReadByte</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[8e]"></a>i2c_SendByte</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bsp_i2c_gpio.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteByte
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WriteReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[8d]"></a>i2c_Start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteByte
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WriteReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[93]"></a>i2c_Stop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetRevision
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteByte
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitI2C
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WriteReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[8f]"></a>i2c_WaitAck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetFMFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetAMFreq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_ReadData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteByte
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_InitHard
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadReg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_WaitStatus80
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SendCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_WriteReg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_Read2Bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadReg
</UL>

<P><STRONG><a name="[303]"></a>ior</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dm9k_uip.o(i.ior))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
</UL>

<P><STRONG><a name="[31e]"></a>mDelay0_5uS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_sw.o(i.mDelay0_5uS))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>

<P><STRONG><a name="[315]"></a>mDelayuS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_base.o(i.mDelayuS))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
</UL>

<P><STRONG><a name="[293]"></a>mInitCH376Host</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi_sw.o(i.mInitCH376Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mInitCH376Host &rArr; CH376_PORT_INIT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_PORT_INIT
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch376_SetCS
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 9176<LI>Call Chain = main &rArr; MP3Player &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfLogo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHardInfo
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitMsg
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadParam
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackLight
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_KeyTone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2ef]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[316]"></a>sf_ReadID</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.sf_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadInfo
</UL>

<P><STRONG><a name="[2ce]"></a>sf_ReadInfo</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.sf_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sf_ReadInfo &rArr; sf_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[1ac]"></a>vs1053_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bsp_vs1053b.o(i.vs1053_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vs1053_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[1ae]"></a>vs1053_ReadChipID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_vs1053b.o(i.vs1053_ReadChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vs1053_ReadChipID &rArr; vs1053_ReadReg &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[317]"></a>vs1053_ReadReg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_vs1053b.o(i.vs1053_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vs1053_ReadReg &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead0
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WaitTimeOut
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SoftReset
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadChipID
</UL>

<P><STRONG><a name="[1be]"></a>vs1053_ReqNewData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_vs1053b.o(i.vs1053_ReqNewData))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1b0]"></a>vs1053_SetBASS</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, bsp_vs1053b.o(i.vs1053_SetBASS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vs1053_SetBASS &rArr; vs1053_WriteCmd &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1af]"></a>vs1053_SetVolume</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_vs1053b.o(i.vs1053_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vs1053_SetVolume &rArr; vs1053_WriteCmd &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1ad]"></a>vs1053_SoftReset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_vs1053b.o(i.vs1053_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vs1053_SoftReset &rArr; LoadUserPatch &rArr; vs1053_WriteCmd &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WaitTimeOut
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[187]"></a>vs1053_WaitTimeOut</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_vs1053b.o(i.vs1053_WaitTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SoftReset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadReg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserPatch
</UL>

<P><STRONG><a name="[186]"></a>vs1053_WriteCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_vs1053b.o(i.vs1053_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vs1053_WriteCmd &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WaitTimeOut
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SoftReset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetVolume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetBASS
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserPatch
</UL>

<P><STRONG><a name="[1c0]"></a>vs1053_WriteData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_vs1053b.o(i.vs1053_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vs1053_WriteData &rArr; bsp_spiWrite0
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetDS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[31a]"></a>w25_ReadID</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_ra8875_flash.o(i.w25_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_ReadInfo
</UL>

<P><STRONG><a name="[2c3]"></a>w25_ReadInfo</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_ra8875_flash.o(i.w25_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = w25_ReadInfo &rArr; w25_ReadID &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRA8875Flash
</UL>

<P><STRONG><a name="[2c2]"></a>w25_SetCS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_ra8875_flash.o(i.w25_SetCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRA8875Flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25_ReadID
</UL>

<P><STRONG><a name="[1b3]"></a>wm8978_CfgAudioPath</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, bsp_wm8978.o(i.wm8978_CfgAudioPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wm8978_CfgAudioPath &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[31d]"></a>wm8978_CtrlGPIO1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_wm8978.o(i.wm8978_CtrlGPIO1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm8978_CtrlGPIO1 &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
</UL>

<P><STRONG><a name="[1b1]"></a>wm8978_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_wm8978.o(i.wm8978_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wm8978_Init &rArr; wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CtrlGPIO1
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[21e]"></a>wm8978_OutMute</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bsp_wm8978.o(i.wm8978_OutMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_OutMute &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[1b4]"></a>wm8978_SetEarVolume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_wm8978.o(i.wm8978_SetEarVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_SetEarVolume &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_AdjustVolume
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[1b5]"></a>wm8978_SetLineGain</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_wm8978.o(i.wm8978_SetLineGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wm8978_SetLineGain &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[1b2]"></a>wm8978_SetSpkVolume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_wm8978.o(i.wm8978_SetSpkVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wm8978_SetSpkVolume &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_AdjustVolume
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3HardInit
</UL>

<P><STRONG><a name="[b3]"></a>xEndCH376Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_sw.o(i.xEndCH376Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xEndCH376Cmd &rArr; ch376_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch376_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteRead
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[c0]"></a>xReadCH376Data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_sw.o(i.xReadCH376Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xReadCH376Data &rArr; bsp_spiRead1
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[b1]"></a>xWriteCH376Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_sw.o(i.xWriteCH376Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xWriteCH376Cmd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay0_5uS
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch376_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteRead
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[b2]"></a>xWriteCH376Data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_sw.o(i.xWriteCH376Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xWriteCH376Data &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteRead
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[226]"></a>radio_AM_FreqList</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fm_radio.o(i.radio_AM_FreqList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_AM_FreqList
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[224]"></a>radio_AdjustVolume</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm_radio.o(i.radio_AdjustVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_AdjustVolume &rArr; wm8978_SetSpkVolume &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_SetOutVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetSpkVolume
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetEarVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[229]"></a>radio_DispStatus</STRONG> (Thumb, 134 bytes, Stack size 160 bytes, fm_radio.o(i.radio_DispStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = radio_DispStatus &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[225]"></a>radio_FM_FreqList</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fm_radio.o(i.radio_FM_FreqList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_FM_FreqList
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[22d]"></a>radio_SaveParam</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fm_radio.o(i.radio_SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_SaveParam &rArr; SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[22a]"></a>radio_SignalQuality</STRONG> (Thumb, 192 bytes, Stack size 176 bytes, fm_radio.o(i.radio_SignalQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = radio_SignalQuality &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMTuneStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetFMSignalQuality
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMTuneStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4730_GetAMSignalQuality
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMain
</UL>

<P><STRONG><a name="[1f6]"></a>PrintfLogo</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.PrintfLogo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintfLogo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>ArrayIcon</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, main_menu.o(i.ArrayIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ArrayIcon &rArr; LCD_DrawIcon32 &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawIcon32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[eb]"></a>DispBackground</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, main_menu.o(i.DispBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispBackground &rArr; LCD_DrawBMP &rArr; RA8875_DrawBMP &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[ee]"></a>DispBottomBar</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, main_menu.o(i.DispBottomBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DispBottomBar &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[101]"></a>DispTopBar</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main_menu.o(i.DispTopBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DispTopBar &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Rect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[e8]"></a>DispBMP180</STRONG> (Thumb, 114 bytes, Stack size 152 bytes, mems_test.o(i.DispBMP180))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DispBMP180 &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[ef]"></a>DispButton</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, mems_test.o(i.DispButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = DispButton &rArr; LCD_DrawButton &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInitFace
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[f1]"></a>DispDHT11</STRONG> (Thumb, 108 bytes, Stack size 168 bytes, mems_test.o(i.DispDHT11))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = DispDHT11 &rArr; DHT11_ReadData &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[f6]"></a>DispInitFace</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, mems_test.o(i.DispInitFace))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DispInitFace &rArr; DispButton &rArr; LCD_DrawButton &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGroupBox
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispButton
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[f7]"></a>DispMPU6050</STRONG> (Thumb, 194 bytes, Stack size 152 bytes, mems_test.o(i.DispMPU6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DispMPU6050 &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMems
</UL>

<P><STRONG><a name="[f8]"></a>DispPic</STRONG> (Thumb, 986 bytes, Stack size 1808 bytes, touch_test.o(i.DispPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 5064<LI>Call Chain = DispPic &rArr; ReadFileDispPic &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetHeight
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispBmpInFlash
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpenPath
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskMount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskConnect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteRead
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileDispPic
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRunTime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBMP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[291]"></a>InitFormTouch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, touch_test.o(i.InitFormTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitFormTouch
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouch
</UL>

<P><STRONG><a name="[f2]"></a>DispFormMP3</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mp3_player.o(i.DispFormMP3))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = DispFormMP3 &rArr; LCD_DrawLabel &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGroupBox
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawButton
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[11f]"></a>FillSongList</STRONG> (Thumb, 188 bytes, Stack size 480 bytes, mp3_player.o(i.FillSongList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = FillSongList &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1b7]"></a>InitFormMP3</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, mp3_player.o(i.InitFormMP3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitFormMP3
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1ab]"></a>MP3HardInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mp3_player.o(i.MP3HardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = MP3HardInit &rArr; LCD_DrawLabel &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetSpkVolume
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetEarVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetLineGain
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SoftReset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetVolume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_SetBASS
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadChipID
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1c2]"></a>Mp3DispStatus</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mp3_player.o(i.Mp3DispStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Mp3DispStatus &rArr; LCD_DrawLabel &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLabel
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[1b9]"></a>ViewDir</STRONG> (Thumb, 126 bytes, Stack size 344 bytes, mp3_player.o(i.ViewDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = ViewDir &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[d7]"></a>DAC8562_WriteCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_dac8562.o(i.DAC8562_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC8562_WriteCmd &rArr; DAC8562_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_SetCS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC8562_SetDacData
</UL>

<P><STRONG><a name="[12b]"></a>GT811_ReadReg</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_gt811.o(i.GT811_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GT811_ReadReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_Scan
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT811_ReadVersion
</UL>

<P><STRONG><a name="[314]"></a>i2c_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_i2c_gpio.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[60]"></a>IsKeyDown1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown1))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[69]"></a>IsKeyDown10</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown10))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[61]"></a>IsKeyDown2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown2))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[62]"></a>IsKeyDown3</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown3))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[63]"></a>IsKeyDown4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown4))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[64]"></a>IsKeyDown5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown5))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[65]"></a>IsKeyDown6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown6))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[66]"></a>IsKeyDown7</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown7))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[67]"></a>IsKeyDown8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown8))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[68]"></a>IsKeyDown9</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_key.o(i.IsKeyDown9))
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_InitKeyVar)
</UL>
<P><STRONG><a name="[2ae]"></a>bsp_DetectKey</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, bsp_key.o(i.bsp_DetectKey), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan
</UL>

<P><STRONG><a name="[2bf]"></a>bsp_InitKeyHard</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bsp_key.o(i.bsp_InitKeyHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitKeyHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
</UL>

<P><STRONG><a name="[2be]"></a>bsp_InitKeyVar</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, bsp_key.o(i.bsp_InitKeyVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_InitKeyVar
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
</UL>

<P><STRONG><a name="[5a]"></a>MODBUS_RxTimeOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_modbus.o(i.MODBUS_RxTimeOut))
<BR>[Address Reference Count : 1]<UL><LI> bsp_modbus.o(i.MODBUS_ReciveNew)
</UL>
<P><STRONG><a name="[108]"></a>FSMC_NAND_EraseBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.FSMC_NAND_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NAND_EraseBlock &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[109]"></a>FSMC_NAND_GetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FSMC_NAND_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Reset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
</UL>

<P><STRONG><a name="[10b]"></a>FSMC_NAND_Init</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, bsp_nand_flash.o(i.FSMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[10e]"></a>FSMC_NAND_PageCopyBack</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp_nand_flash.o(i.FSMC_NAND_PageCopyBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FSMC_NAND_PageCopyBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[110]"></a>FSMC_NAND_PageCopyBackEx</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bsp_nand_flash.o(i.FSMC_NAND_PageCopyBackEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSMC_NAND_PageCopyBackEx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[111]"></a>FSMC_NAND_ReadData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FSMC_NAND_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSMC_NAND_ReadData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>

<P><STRONG><a name="[112]"></a>FSMC_NAND_ReadPage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.FSMC_NAND_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
</UL>

<P><STRONG><a name="[113]"></a>FSMC_NAND_ReadSpare</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FSMC_NAND_ReadSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSMC_NAND_ReadSpare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsFreeBlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
</UL>

<P><STRONG><a name="[10a]"></a>FSMC_NAND_ReadStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.FSMC_NAND_ReadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>

<P><STRONG><a name="[114]"></a>FSMC_NAND_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FSMC_NAND_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NAND_Reset &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[115]"></a>FSMC_NAND_WriteData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FSMC_NAND_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FSMC_NAND_WriteData &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[116]"></a>FSMC_NAND_WritePage</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.FSMC_NAND_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteData
</UL>

<P><STRONG><a name="[118]"></a>FSMC_NAND_WriteSpare</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.FSMC_NAND_WriteSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
</UL>

<P><STRONG><a name="[1d3]"></a>NAND_AddrToPhyBlockNo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.NAND_AddrToPhyBlockNo))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>

<P><STRONG><a name="[1cc]"></a>NAND_BuildLUT</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bsp_nand_flash.o(i.NAND_BuildLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NAND_BuildLUT &rArr; FSMC_NAND_ReadSpare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[1d6]"></a>NAND_IsBufOk</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.NAND_IsBufOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NAND_IsBufOk
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[1d0]"></a>NAND_IsFreeBlock</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_nand_flash.o(i.NAND_IsFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAND_IsFreeBlock &rArr; NAND_IsBadBlock &rArr; FSMC_NAND_ReadSpare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[1d5]"></a>NAND_LBNtoPBN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_nand_flash.o(i.NAND_LBNtoPBN))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadMultiSectors
</UL>

<P><STRONG><a name="[1d2]"></a>NAND_MarkUsedBlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_nand_flash.o(i.NAND_MarkUsedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAND_MarkUsedBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteMultiSectors
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[1e2]"></a>PS2_HookKeyboard</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, bsp_ps2.o(i.PS2_HookKeyboard), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_SetKeyboardLed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Timer
</UL>

<P><STRONG><a name="[1e0]"></a>PS2_SendCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_ps2.o(i.PS2_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PS2_SendCmd &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitMouse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitKeyboard
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_GetDevceType
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Timer
</UL>

<P><STRONG><a name="[1e1]"></a>PS2_WaitMsg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_ps2.o(i.PS2_WaitMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PS2_WaitMsg &rArr; bsp_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_GetMsg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitMouse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_InitKeyboard
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_GetDevceType
</UL>

<P><STRONG><a name="[20d]"></a>SPI_ShiftByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_ra8875_port.o(i.SPI_ShiftByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData16
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData
</UL>

<P><STRONG><a name="[c8]"></a>CmdResp1Error</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[cc]"></a>CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[cd]"></a>CmdResp6Error</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[124]"></a>FindSCR</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, bsp_sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[235]"></a>SDEnWideBus</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, bsp_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[2cd]"></a>sf_SetCS</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_SetCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sf_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadID
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
</UL>

<P><STRONG><a name="[2d0]"></a>sf_WaitForWriteEnd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.sf_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_WaitForWriteEnd &rArr; bsp_spiWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite1
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSFlash
</UL>

<P><STRONG><a name="[16f]"></a>LCD_FSMCConfig</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, bsp_tft_lcd.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitHard
</UL>

<P><STRONG><a name="[162]"></a>_LCD_ReadHZDot</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bsp_tft_lcd.o(i._LCD_ReadHZDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _LCD_ReadHZDot
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[288]"></a>CalTwoPoint</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_touch.o(i.CalTwoPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransY
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_TransX
</UL>

<P><STRONG><a name="[283]"></a>TOUCH_DataFilter</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, bsp_touch.o(i.TOUCH_DataFilter), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[270]"></a>TOUCH_DispPoint</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, bsp_touch.o(i.TOUCH_DispPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TOUCH_DispPoint &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; LCD_PutPixel &rArr; RA8875_PutPixel &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetHeight
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClrScr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[27e]"></a>TOUCH_LoadParam</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_touch.o(i.TOUCH_LoadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TOUCH_LoadParam &rArr; LoadParam &rArr; SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadParam
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_InitHard
</UL>

<P><STRONG><a name="[274]"></a>TOUCH_PressValid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_PressValid))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_WaitRelease
</UL>

<P><STRONG><a name="[276]"></a>TOUCH_SaveParam</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bsp_touch.o(i.TOUCH_SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TOUCH_SaveParam &rArr; SaveParam &rArr; ee_WriteBytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[279]"></a>TOUCH_TransX</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_touch.o(i.TOUCH_TransX))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TOUCH_TransX &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetX
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[27b]"></a>TOUCH_TransY</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_touch.o(i.TOUCH_TransY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TOUCH_TransY &rArr; CalTwoPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTwoPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_GetY
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PutKey
</UL>

<P><STRONG><a name="[271]"></a>TOUCH_WaitRelease</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_touch.o(i.TOUCH_WaitRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = TOUCH_WaitRelease &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcY
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdcX
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_PressValid
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[289]"></a>TSC2046_SetCS</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_tsc2046.o(i.TSC2046_SetCS), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC2046_ReadAdc
</UL>

<P><STRONG><a name="[14f]"></a>InitHardUart</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, bsp_uart_fifo.o(i.InitHardUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InitHardUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[296]"></a>UartIRQ</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, bsp_uart_fifo.o(i.UartIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2d1]"></a>UartVarInit</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.UartVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[318]"></a>vs1053_SetCS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_vs1053b.o(i.vs1053_SetCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vs1053_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteCmd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_ReadReg
</UL>

<P><STRONG><a name="[319]"></a>vs1053_SetDS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_vs1053b.o(i.vs1053_SetDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vs1053_SetDS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vs1053_WriteData
</UL>

<P><STRONG><a name="[31c]"></a>wm8978_Reset</STRONG> (Thumb, 48 bytes, Stack size 120 bytes, bsp_wm8978.o(i.wm8978_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wm8978_Reset &rArr; wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_WriteReg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
</UL>

<P><STRONG><a name="[31b]"></a>wm8978_WriteReg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_wm8978.o(i.wm8978_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wm8978_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_OutMute
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetSpkVolume
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetEarVolume
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CfgAudioPath
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_SetLineGain
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_CtrlGPIO1
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8978_Reset
</UL>

<P><STRONG><a name="[140]"></a>ILI9488_SetCursor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd_ili9488.o(i.ILI9488_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9488_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_PutPixel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_GetPixel
</UL>

<P><STRONG><a name="[138]"></a>ILI9488_SetDispWin</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lcd_ili9488.o(i.ILI9488_SetDispWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ILI9488_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_FillRect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_DrawBMP
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_ClrScr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_9488
</UL>

<P><STRONG><a name="[143]"></a>Init_9488</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, lcd_ili9488.o(i.Init_9488))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = Init_9488 &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetDirection
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488_InitHard
</UL>

<P><STRONG><a name="[9b]"></a>BTE_SetTarBlock</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lcd_ra8875.o(i.BTE_SetTarBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[20b]"></a>RA8875_SetCursor</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd_ra8875.o(i.RA8875_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
</UL>

<P><STRONG><a name="[200]"></a>RA8875_SetTextCursor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd_ra8875.o(i.RA8875_SetTextCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; RA8875_WriteData &rArr; SPI_ShiftByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
</UL>

<P><STRONG><a name="[154]"></a>Init_5420_4001</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, lcd_spfd5420.o(i.Init_5420_4001))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_5420_4001 &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_InitHard
</UL>

<P><STRONG><a name="[156]"></a>Init_61509</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, lcd_spfd5420.o(i.Init_61509))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_61509 &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_WriteReg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_Delaly10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_InitHard
</UL>

<P><STRONG><a name="[157]"></a>SPFD5420_Delaly10ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_spfd5420.o(i.SPFD5420_Delaly10ms))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_61509
</UL>

<P><STRONG><a name="[25a]"></a>SPFD5420_ReadReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_spfd5420.o(i.SPFD5420_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPFD5420_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_ReadID
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_InitHard
</UL>

<P><STRONG><a name="[257]"></a>SPFD5420_SetCursor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_spfd5420.o(i.SPFD5420_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_PutPixel
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_GetPixel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_ClrScr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetDispWin
</UL>

<P><STRONG><a name="[258]"></a>SPFD5420_SetDispWin</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd_spfd5420.o(i.SPFD5420_SetDispWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPFD5420_SetDispWin &rArr; SPFD5420_SetCursor &rArr; SPFD5420_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_WriteReg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawBMP
</UL>

<P><STRONG><a name="[155]"></a>SPFD5420_WriteReg</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lcd_spfd5420.o(i.SPFD5420_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPFD5420_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_InitHard
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_DrawHLine
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetDispWin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPFD5420_SetCursor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_61509
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_5420_4001
</UL>

<P><STRONG><a name="[96]"></a>BMP180_Read2Bytes</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_bmp180.o(i.BMP180_Read2Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMP180_Read2Bytes &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBMP180
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
</UL>

<P><STRONG><a name="[99]"></a>BMP180_WaitConvert</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_bmp180.o(i.BMP180_WaitConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = BMP180_WaitConvert &rArr; bsp_DelayMS &rArr; bsp_Idle &rArr; SaveScreenToBmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
</UL>

<P><STRONG><a name="[98]"></a>BMP180_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_bmp180.o(i.BMP180_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMP180_WriteReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_ReadTempPress
</UL>

<P><STRONG><a name="[214]"></a>Is_Leap_Year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_cpu_rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadClock
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteClock
</UL>

<P><STRONG><a name="[11b]"></a>FT5X06_ReadReg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_ts_ft5x06.o(i.FT5X06_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT5X06_ReadReg &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_ReadID
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5X06_Scan
</UL>

<P><STRONG><a name="[268]"></a>TI1_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[26a]"></a>TI2_Config</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[264]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[da]"></a>DM9K_CtrlLinesConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dm9k_uip.o(i.DM9K_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DM9K_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
</UL>

<P><STRONG><a name="[dc]"></a>DM9K_FSMCConfig</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, dm9k_uip.o(i.DM9K_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
</UL>

<P><STRONG><a name="[12e]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usb_hw.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[2e8]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2f2]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[30b]"></a>chk_lock</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[308]"></a>clear_lock</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2ed]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2f0]"></a>create_name</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[306]"></a>dec_lock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ff.o(i.dec_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[2f5]"></a>dir_find</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2f8]"></a>dir_next</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2fb]"></a>dir_read</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[2fc]"></a>dir_register</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2f6]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[309]"></a>find_volume</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[30a]"></a>follow_path</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[2fe]"></a>gen_numname</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[311]"></a>get_fileinfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[307]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[310]"></a>inc_lock</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[30d]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2fd]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2f3]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2e9]"></a>move_window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[30f]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[30e]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2f7]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[312]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2f9]"></a>sync_window</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sync_window &rArr; disk_write &rArr; NAND_WriteMultiSectors &rArr; NAND_WriteToNewBlock &rArr; NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[305]"></a>validate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[e0]"></a>DataStageIn</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[e4]"></a>DataStageOut</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[e7]"></a>Data_Setup0</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[1d9]"></a>NoData_Setup0</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2e7]"></a>ch376_SetCS</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_sw.o(i.ch376_SetCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch376_SetCS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusExit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiBusEnter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEndCH376Cmd
</UL>

<P><STRONG><a name="[2a5]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a3]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[2a8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
