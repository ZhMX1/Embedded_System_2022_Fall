; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_step_moto.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_step_moto.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_step_moto.crf ..\..\User\bsp\src\bsp_step_moto.c]
                          THUMB

                          AREA ||i.MOTO_ISR||, CODE, READONLY, ALIGN=2

                  MOTO_ISR PROC
;;;199    */
;;;200    void MOTO_ISR(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;201    {
;;;202    	uint8_t n;
;;;203    	
;;;204    	if (g_tMoto.Running == 0)
000004  4926              LDR      r1,|L1.160|
000006  7b08              LDRB     r0,[r1,#0xc]  ; g_tMoto
000008  2800              CMP      r0,#0                 ;201
00000a  d047              BEQ      |L1.156|
;;;205    	{
;;;206    		return;
;;;207    	}
;;;208    
;;;209    #if 1	/* A - AB - B - BC - C - CD - D - DA */
;;;210    	switch (g_tMoto.Pos)
;;;211    	{
;;;212    		case 0:			
;;;213    			MOTO_A_0();
00000c  4825              LDR      r0,|L1.164|
00000e  7b4a              LDRB     r2,[r1,#0xd]          ;210  ; g_tMoto
;;;214    			MOTO_B_1();
000010  2380              MOVS     r3,#0x80
;;;215    			MOTO_C_1();
000012  1584              ASRS     r4,r0,#22
;;;216    			MOTO_D_1();
000014  1545              ASRS     r5,r0,#21
000016  f44f5680          MOV      r6,#0x1000            ;213
00001a  2a08              CMP      r2,#8                 ;210
00001c  d21e              BCS      |L1.92|
00001e  e8dff002          TBB      [pc,r2]               ;210
000022  0407              DCB      0x04,0x07
000024  0c0f1216          DCB      0x0c,0x0f,0x12,0x16
000028  1a31              DCB      0x1a,0x31
00002a  6146              STR      r6,[r0,#0x14]         ;213
00002c  6103              STR      r3,[r0,#0x10]         ;214
;;;217    			break;
00002e  e001              B        |L1.52|
;;;218    		
;;;219    		case 1:
;;;220    			MOTO_A_0();
000030  6146              STR      r6,[r0,#0x14]
;;;221    			MOTO_B_0();
;;;222    			MOTO_C_1();
;;;223    			MOTO_D_1();	
;;;224    			break;	
000032  e003              B        |L1.60|
                  |L1.52|
000034  6104              STR      r4,[r0,#0x10]         ;215
                  |L1.54|
000036  6105              STR      r5,[r0,#0x10]         ;216
000038  e010              B        |L1.92|
;;;225    
;;;226    		case 2:
;;;227    			MOTO_A_1();
00003a  6106              STR      r6,[r0,#0x10]
                  |L1.60|
;;;228    			MOTO_B_0();
00003c  6143              STR      r3,[r0,#0x14]
00003e  e7f9              B        |L1.52|
;;;229    			MOTO_C_1();
;;;230    			MOTO_D_1();	
;;;231    			break;			
;;;232    
;;;233    		case 3:
;;;234    			MOTO_A_1();
000040  6106              STR      r6,[r0,#0x10]
;;;235    			MOTO_B_0();
000042  6143              STR      r3,[r0,#0x14]
;;;236    			MOTO_C_0();
;;;237    			MOTO_D_1();	
;;;238    			break;					
000044  e001              B        |L1.74|
;;;239    
;;;240    		case 4:
;;;241    			MOTO_A_1();
000046  6106              STR      r6,[r0,#0x10]
;;;242    			MOTO_B_1();
000048  6103              STR      r3,[r0,#0x10]
                  |L1.74|
;;;243    			MOTO_C_0();
00004a  6144              STR      r4,[r0,#0x14]
00004c  e7f3              B        |L1.54|
;;;244    			MOTO_D_1();	
;;;245    			break;		
;;;246    
;;;247    		case 5:
;;;248    			MOTO_A_1();
00004e  6106              STR      r6,[r0,#0x10]
;;;249    			MOTO_B_1();
000050  6103              STR      r3,[r0,#0x10]
;;;250    			MOTO_C_0();
000052  6144              STR      r4,[r0,#0x14]
;;;251    			MOTO_D_0();	
;;;252    			break;		
000054  e001              B        |L1.90|
;;;253    
;;;254    		case 6:
;;;255    			MOTO_A_1();
000056  6106              STR      r6,[r0,#0x10]
;;;256    			MOTO_B_1();
;;;257    			MOTO_C_1();
;;;258    			MOTO_D_0();	
;;;259    			break;									
000058  e015              B        |L1.134|
                  |L1.90|
00005a  6145              STR      r5,[r0,#0x14]         ;251
                  |L1.92|
;;;260    			
;;;261    		case 7:
;;;262    			MOTO_A_0();
;;;263    			MOTO_B_1();
;;;264    			MOTO_C_1();
;;;265    			MOTO_D_0();	
;;;266    			break;							
;;;267    	}
;;;268    	n = 7;
;;;269    #else
;;;270    	/* A -  B -  C  - D  */
;;;271    	switch (g_tMoto.Pos)
;;;272    	{
;;;273    		case 0:			
;;;274    			MOTO_A_0();
;;;275    			MOTO_B_1();
;;;276    			MOTO_C_1();
;;;277    			MOTO_D_1();
;;;278    			break;
;;;279    		
;;;280    		case 1:
;;;281    			MOTO_A_1();
;;;282    			MOTO_B_0();
;;;283    			MOTO_C_1();
;;;284    			MOTO_D_1();	
;;;285    			break;	
;;;286    
;;;287    		case 2:
;;;288    			MOTO_A_1();
;;;289    			MOTO_B_1();
;;;290    			MOTO_C_0();
;;;291    			MOTO_D_1();	
;;;292    			break;			
;;;293    
;;;294    		case 3:
;;;295    			MOTO_A_1();
;;;296    			MOTO_B_1();
;;;297    			MOTO_C_1();
;;;298    			MOTO_D_0();	
;;;299    			break;											
;;;300    	}	
;;;301    	n = 3;
;;;302    #endif	
;;;303    	if (g_tMoto.Dir == 0)	/* 正转 */
00005c  780b              LDRB     r3,[r1,#0]  ; g_tMoto
00005e  2007              MOVS     r0,#7                 ;268
000060  b1a3              CBZ      r3,|L1.140|
;;;304    	{
;;;305    		if (++g_tMoto.Pos > n)
;;;306    		{
;;;307    			g_tMoto.Pos = 0;
;;;308    		}
;;;309    	}
;;;310    	else	/* 反转 */
;;;311    	{
;;;312    		if (g_tMoto.Pos == 0)
000062  b1ca              CBZ      r2,|L1.152|
000064  1e52              SUBS     r2,r2,#1
;;;313    		{
;;;314    			g_tMoto.Pos = n;
;;;315    		}
;;;316    		else
;;;317    		{
;;;318    			g_tMoto.Pos--;
000066  734a              STRB     r2,[r1,#0xd]
                  |L1.104|
;;;319    		}
;;;320    	}
;;;321    	
;;;322    	if (g_tMoto.StepCount > 0)
000068  6888              LDR      r0,[r1,#8]  ; g_tMoto
00006a  2800              CMP      r0,#0
00006c  d016              BEQ      |L1.156|
00006e  1e40              SUBS     r0,r0,#1
;;;323    	{		
;;;324    		g_tMoto.StepCount--;
;;;325    		
;;;326    		if (g_tMoto.StepCount == 0)
000070  6088              STR      r0,[r1,#8]  ; g_tMoto
000072  d113              BNE      |L1.156|
;;;327    		{		
;;;328    			TIM_ClearITPendingBit(TIM6, TIM_IT_Update);		/* 清除中断标志位 */
000074  2101              MOVS     r1,#1
000076  480c              LDR      r0,|L1.168|
000078  f7fffffe          BL       TIM_ClearITPendingBit
;;;329    			
;;;330    			MOTO_Pause();	/* 暂停 */
00007c  e8bd41f0          POP      {r4-r8,lr}
000080  f7ffbffe          B.W      MOTO_Pause
000084  6146              STR      r6,[r0,#0x14]         ;262
                  |L1.134|
000086  6103              STR      r3,[r0,#0x10]         ;263
000088  6104              STR      r4,[r0,#0x10]         ;264
00008a  e7e6              B        |L1.90|
                  |L1.140|
00008c  1c52              ADDS     r2,r2,#1              ;264
00008e  b2d0              UXTB     r0,r2                 ;305
000090  7348              STRB     r0,[r1,#0xd]          ;305
000092  2807              CMP      r0,#7                 ;305
000094  d9e8              BLS      |L1.104|
000096  2000              MOVS     r0,#0                 ;307
                  |L1.152|
000098  7348              STRB     r0,[r1,#0xd]          ;314
00009a  e7e5              B        |L1.104|
                  |L1.156|
;;;331    		}
;;;332    	}	
;;;333    }
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;334    
                          ENDP

                  |L1.160|
                          DCD      ||.bss||
                  |L1.164|
                          DCD      0x40011000
                  |L1.168|
                          DCD      0x40001000

                          AREA ||i.MOTO_Pause||, CODE, READONLY, ALIGN=2

                  MOTO_Pause PROC
;;;162    */
;;;163    void MOTO_Pause(void)
000000  2300              MOVS     r3,#0
;;;164    {
000002  b510              PUSH     {r4,lr}
;;;165    	//void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
;;;166    	bsp_SetTIMforInt(TIM6, 0, 0, 0);
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  4803              LDR      r0,|L2.24|
00000a  f7fffffe          BL       bsp_SetTIMforInt
;;;167    	g_tMoto.Running = 0;
00000e  4903              LDR      r1,|L2.28|
000010  2000              MOVS     r0,#0
000012  7308              STRB     r0,[r1,#0xc]
;;;168    }
000014  bd10              POP      {r4,pc}
;;;169    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40001000
                  |L2.28|
                          DCD      ||.bss||

                          AREA ||i.MOTO_RoudToStep||, CODE, READONLY, ALIGN=1

                  MOTO_RoudToStep PROC
;;;177    */
;;;178    uint32_t MOTO_RoudToStep(void)
000000  f44f6080          MOV      r0,#0x400
;;;179    {
;;;180    	uint32_t steps;
;;;181    	
;;;182    	/* 28BYJ48 电机步距角度 = 5.625/64度. 
;;;183    		一圈 360度；
;;;184    		step = 360 / (5.625 / 64)
;;;185    	*/	
;;;186    	steps = (360 * 64 * 1000 / 4) / 5625;		// 4096步
;;;187    	
;;;188    	return steps;
;;;189    }
000004  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.MOTO_ShangeSpeed||, CODE, READONLY, ALIGN=2

                  MOTO_ShangeSpeed PROC
;;;121    */
;;;122    void MOTO_ShangeSpeed(uint32_t _speed)
000000  4905              LDR      r1,|L4.24|
;;;123    {
;;;124    	g_tMoto.StepFreq = _speed;
;;;125    	
;;;126    	if (g_tMoto.Running == 1)
000002  6048              STR      r0,[r1,#4]  ; g_tMoto
000004  7b09              LDRB     r1,[r1,#0xc]  ; g_tMoto
000006  2901              CMP      r1,#1
000008  d105              BNE      |L4.22|
;;;127    	{
;;;128    		//void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
;;;129    		bsp_SetTIMforInt(TIM6, _speed, 2, 2);
00000a  2302              MOVS     r3,#2
00000c  4601              MOV      r1,r0
00000e  461a              MOV      r2,r3
000010  4802              LDR      r0,|L4.28|
000012  f7ffbffe          B.W      bsp_SetTIMforInt
                  |L4.22|
;;;130    	}
;;;131    }
000016  4770              BX       lr
;;;132    
                          ENDP

                  |L4.24|
                          DCD      ||.bss||
                  |L4.28|
                          DCD      0x40001000

                          AREA ||i.MOTO_Start||, CODE, READONLY, ALIGN=2

                  MOTO_Start PROC
;;;100    */
;;;101    void MOTO_Start(uint32_t _speed, uint8_t _dir, uint32_t _stpes)
000000  4b05              LDR      r3,|L5.24|
;;;102    {
;;;103    	g_tMoto.Dir = _dir;
000002  7019              STRB     r1,[r3,#0]
;;;104    	g_tMoto.StepFreq = _speed;
;;;105    	g_tMoto.StepCount = _stpes;
;;;106    	g_tMoto.Running = 1;
000004  e9c30201          STRD     r0,r2,[r3,#4]
000008  2101              MOVS     r1,#1
00000a  7319              STRB     r1,[r3,#0xc]
;;;107    	
;;;108    	//void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
;;;109    	bsp_SetTIMforInt(TIM6, _speed, 2, 2);
00000c  2302              MOVS     r3,#2
00000e  4601              MOV      r1,r0
000010  461a              MOV      r2,r3
000012  4802              LDR      r0,|L5.28|
000014  f7ffbffe          B.W      bsp_SetTIMforInt
;;;110    }
;;;111    
                          ENDP

                  |L5.24|
                          DCD      ||.bss||
                  |L5.28|
                          DCD      0x40001000

                          AREA ||i.MOTO_Stop||, CODE, READONLY, ALIGN=2

                  MOTO_Stop PROC
;;;140    */
;;;141    void MOTO_Stop(void)
000000  2300              MOVS     r3,#0
;;;142    {
000002  b510              PUSH     {r4,lr}
;;;143    	//void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
;;;144    	bsp_SetTIMforInt(TIM6, 0, 0, 0);
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  4808              LDR      r0,|L6.44|
00000a  f7fffffe          BL       bsp_SetTIMforInt
;;;145    	g_tMoto.Running = 0;
00000e  4908              LDR      r1,|L6.48|
000010  2000              MOVS     r0,#0
000012  7308              STRB     r0,[r1,#0xc]
;;;146    	
;;;147    	/* 所有线圈停电 */
;;;148    	MOTO_A_1();
000014  4807              LDR      r0,|L6.52|
000016  f44f5180          MOV      r1,#0x1000
00001a  6101              STR      r1,[r0,#0x10]
;;;149    	MOTO_B_1();
00001c  2180              MOVS     r1,#0x80
00001e  6101              STR      r1,[r0,#0x10]
;;;150    	MOTO_C_1();
000020  1581              ASRS     r1,r0,#22
000022  6101              STR      r1,[r0,#0x10]
;;;151    	MOTO_D_1();		
000024  1541              ASRS     r1,r0,#21
000026  6101              STR      r1,[r0,#0x10]
;;;152    }
000028  bd10              POP      {r4,pc}
;;;153    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x40001000
                  |L6.48|
                          DCD      ||.bss||
                  |L6.52|
                          DCD      0x40011000

                          AREA ||i.TIM6_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_IRQHandler PROC
;;;343    #ifndef TIM6_ISR_MOVE_OUT		/* bsp.h 中定义此行，表示本函数移到 stam32fxxx_it.c。 避免重复定义 */
;;;344    void TIM6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;345    {
;;;346    	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
000002  4c08              LDR      r4,|L7.36|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d007              BEQ      |L7.32|
;;;347    	{
;;;348    		MOTO_ISR();	/* 中断服务程序 */
000010  f7fffffe          BL       MOTO_ISR
;;;349    
;;;350    		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);		/* 清除中断标志位 */
000014  4620              MOV      r0,r4
000016  e8bd4010          POP      {r4,lr}
00001a  2101              MOVS     r1,#1
00001c  f7ffbffe          B.W      TIM_ClearITPendingBit
                  |L7.32|
;;;351    	}
;;;352    }
000020  bd10              POP      {r4,pc}
;;;353    #endif
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40001000

                          AREA ||i.bsp_InitStepMoto||, CODE, READONLY, ALIGN=2

                  bsp_InitStepMoto PROC
;;;61     */
;;;62     void bsp_InitStepMoto(void)
000000  b538              PUSH     {r3-r5,lr}
;;;63     {
;;;64     	GPIO_InitTypeDef GPIO_InitStructure;
;;;65     
;;;66     	/* 打开GPIO时钟 */
;;;67     	RCC_APB2PeriphClockCmd(RCC_MOTO_A | RCC_MOTO_B | RCC_MOTO_C | RCC_MOTO_D, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;68     
;;;69     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;70     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;71     	
;;;72     	GPIO_InitStructure.GPIO_Pin = PIN_MOTO_A;
000016  0200              LSLS     r0,r0,#8
;;;73     	GPIO_Init(PORT_MOTO_A, &GPIO_InitStructure);
000018  4c11              LDR      r4,|L8.96|
00001a  f8ad0000          STRH     r0,[sp,#0]            ;72
00001e  4669              MOV      r1,sp
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GPIO_Init
;;;74     	
;;;75     	GPIO_InitStructure.GPIO_Pin = PIN_MOTO_B;
000026  2080              MOVS     r0,#0x80
000028  f8ad0000          STRH     r0,[sp,#0]
;;;76     	GPIO_Init(PORT_MOTO_B, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GPIO_Init
;;;77     	
;;;78     	GPIO_InitStructure.GPIO_Pin = PIN_MOTO_C;
000034  15a0              ASRS     r0,r4,#22
000036  f8ad0000          STRH     r0,[sp,#0]
;;;79     	GPIO_Init(PORT_MOTO_C, &GPIO_InitStructure);
00003a  4669              MOV      r1,sp
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       GPIO_Init
;;;80     
;;;81     	GPIO_InitStructure.GPIO_Pin = PIN_MOTO_D;
000042  1560              ASRS     r0,r4,#21
000044  f8ad0000          STRH     r0,[sp,#0]
;;;82     	GPIO_Init(PORT_MOTO_D, &GPIO_InitStructure);	
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_Init
;;;83     	
;;;84     	g_tMoto.Dir = 0;
000050  4904              LDR      r1,|L8.100|
000052  2000              MOVS     r0,#0
000054  7008              STRB     r0,[r1,#0]
;;;85     	g_tMoto.StepFreq = 0;
;;;86     	g_tMoto.StepCount = 0;
000056  6048              STR      r0,[r1,#4]  ; g_tMoto
;;;87     	g_tMoto.Running = 0;
000058  6088              STR      r0,[r1,#8]  ; g_tMoto
00005a  7308              STRB     r0,[r1,#0xc]
;;;88     	g_tMoto.Pos = 0;
00005c  7348              STRB     r0,[r1,#0xd]
;;;89     }
00005e  bd38              POP      {r3-r5,pc}
;;;90     
                          ENDP

                  |L8.96|
                          DCD      0x40011000
                  |L8.100|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tMoto
                          %        16

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_step_moto.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_step_moto_c_70f53da4____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_step_moto_c_70f53da4____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_step_moto_c_70f53da4____REVSH|
#line 128
|__asm___15_bsp_step_moto_c_70f53da4____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
