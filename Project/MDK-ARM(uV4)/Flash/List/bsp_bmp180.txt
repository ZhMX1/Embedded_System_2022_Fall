; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_bmp180.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_bmp180.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_bmp180.crf ..\..\User\bsp\src\bsp_bmp180.c]
                          THUMB

                          AREA ||i.BMP180_Read2Bytes||, CODE, READONLY, ALIGN=1

                  BMP180_Read2Bytes PROC
;;;172    */
;;;173    static uint16_t BMP180_Read2Bytes(uint8_t _ucRegAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4604              MOV      r4,r0
;;;175    	uint8_t ucData1;
;;;176    	uint8_t ucData2;
;;;177    	uint16_t usRegValue;
;;;178    
;;;179    	i2c_Start();                  			/* 总线开始信号 */
000004  f7fffffe          BL       i2c_Start
;;;180    	i2c_SendByte(BMP180_SLAVE_ADDRESS);		/* 发送设备地址+写信号 */
000008  20ee              MOVS     r0,#0xee
00000a  f7fffffe          BL       i2c_SendByte
;;;181    	i2c_WaitAck();
00000e  f7fffffe          BL       i2c_WaitAck
;;;182    	i2c_SendByte(_ucRegAddr);				/* 发送地址 */
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       i2c_SendByte
;;;183    	i2c_WaitAck();
000018  f7fffffe          BL       i2c_WaitAck
;;;184    
;;;185    	i2c_Start();                  			/* 总线开始信号 */
00001c  f7fffffe          BL       i2c_Start
;;;186    	i2c_SendByte(BMP180_SLAVE_ADDRESS + 1);/* 发送设备地址+读信号 */
000020  20ef              MOVS     r0,#0xef
000022  f7fffffe          BL       i2c_SendByte
;;;187    	i2c_WaitAck();
000026  f7fffffe          BL       i2c_WaitAck
;;;188    
;;;189    	ucData1 = i2c_ReadByte();       		/* 读出高字节数据 */
00002a  f7fffffe          BL       i2c_ReadByte
00002e  4604              MOV      r4,r0
;;;190    	i2c_Ack();
000030  f7fffffe          BL       i2c_Ack
;;;191    
;;;192    	ucData2 = i2c_ReadByte();       		/* 读出低字节数据 */
000034  f7fffffe          BL       i2c_ReadByte
000038  4605              MOV      r5,r0
;;;193    	i2c_NAck();
00003a  f7fffffe          BL       i2c_NAck
;;;194    	i2c_Stop();                  			/* 总线停止信号 */
00003e  f7fffffe          BL       i2c_Stop
;;;195    
;;;196    	usRegValue = (ucData1 << 8) + ucData2;
000042  eb052004          ADD      r0,r5,r4,LSL #8
000046  b280              UXTH     r0,r0
;;;197    
;;;198    	return usRegValue;
;;;199    }
000048  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP


                          AREA ||i.BMP180_ReadTempPress||, CODE, READONLY, ALIGN=2

                  BMP180_ReadTempPress PROC
;;;276    */
;;;277    void BMP180_ReadTempPress(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;278    {
;;;279    	long UT, X1, X2, B5, T;
;;;280    	long UP, X3, B3, B6, B7, p;
;;;281    	unsigned long B4;
;;;282    
;;;283    	/* 流程见 pdf page 12 */
;;;284    
;;;285    	/* 读温度原始值 */
;;;286    	BMP180_WriteReg(0xF4, 0x2E);
000004  212e              MOVS     r1,#0x2e
000006  20f4              MOVS     r0,#0xf4
000008  f7fffffe          BL       BMP180_WriteReg
;;;287    	BMP180_WaitConvert();	/* 等待转换结束 */
00000c  f7fffffe          BL       BMP180_WaitConvert
;;;288    	UT = BMP180_Read2Bytes(0xF6);
000010  20f6              MOVS     r0,#0xf6
000012  f7fffffe          BL       BMP180_Read2Bytes
;;;289    
;;;290    	/* 读压力原始值 */
;;;291    	BMP180_WriteReg(0xF4, 0x34 + (g_tBMP180.OSS << 6));
000016  4c48              LDR      r4,|L2.312|
000018  4680              MOV      r8,r0                 ;288
00001a  2034              MOVS     r0,#0x34
00001c  7da1              LDRB     r1,[r4,#0x16]  ; g_tBMP180
00001e  eb001081          ADD      r0,r0,r1,LSL #6
000022  b2c1              UXTB     r1,r0
000024  20f4              MOVS     r0,#0xf4
000026  f7fffffe          BL       BMP180_WriteReg
;;;292    	BMP180_WaitConvert();	/* 等待转换结束 */
00002a  f7fffffe          BL       BMP180_WaitConvert
;;;293    	UP = BMP180_Read3Bytes(0xF6) >> (8 - g_tBMP180.OSS);
00002e  25f6              MOVS     r5,#0xf6
000030  f7fffffe          BL       i2c_Start
000034  20ee              MOVS     r0,#0xee
000036  f7fffffe          BL       i2c_SendByte
00003a  f7fffffe          BL       i2c_WaitAck
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       i2c_SendByte
000044  f7fffffe          BL       i2c_WaitAck
000048  f7fffffe          BL       i2c_Start
00004c  20ef              MOVS     r0,#0xef
00004e  f7fffffe          BL       i2c_SendByte
000052  f7fffffe          BL       i2c_WaitAck
000056  f7fffffe          BL       i2c_ReadByte
00005a  4607              MOV      r7,r0
00005c  f7fffffe          BL       i2c_Ack
000060  f7fffffe          BL       i2c_ReadByte
000064  4606              MOV      r6,r0
000066  f7fffffe          BL       i2c_Ack
00006a  f7fffffe          BL       i2c_ReadByte
00006e  4605              MOV      r5,r0
000070  f7fffffe          BL       i2c_NAck
000074  f7fffffe          BL       i2c_Stop
000078  0438              LSLS     r0,r7,#16
00007a  eb002006          ADD      r0,r0,r6,LSL #8
00007e  7da1              LDRB     r1,[r4,#0x16]  ; g_tBMP180
000080  1943              ADDS     r3,r0,r5
000082  f1c10008          RSB      r0,r1,#8
;;;294    
;;;295    	/* 计算真实温度（单位 0.1摄氏度） */
;;;296    	X1 = ((long)(UT - g_tBMP180.AC6) * g_tBMP180.AC5) >> 15;
000086  8962              LDRH     r2,[r4,#0xa]  ; g_tBMP180
000088  40c3              LSRS     r3,r3,r0              ;293
00008a  eba80002          SUB      r0,r8,r2
00008e  8922              LDRH     r2,[r4,#8]  ; g_tBMP180
;;;297    	X2 = ((long)g_tBMP180.MC << 11) / (X1 + g_tBMP180.MD);
000090  f9b45014          LDRSH    r5,[r4,#0x14]  ; g_tBMP180
000094  4350              MULS     r0,r2,r0              ;296
000096  f9b42012          LDRSH    r2,[r4,#0x12]  ; g_tBMP180
00009a  13c0              ASRS     r0,r0,#15             ;296
00009c  02d2              LSLS     r2,r2,#11
00009e  4405              ADD      r5,r5,r0
0000a0  fb92f2f5          SDIV     r2,r2,r5
;;;298    	B5 = X1 + X2;	/* 该系数将用于压力的温度补偿计算 */
0000a4  4410              ADD      r0,r0,r2
;;;299    	T = (B5 + 8) >> 4;
0000a6  f1000208          ADD      r2,r0,#8
0000aa  1112              ASRS     r2,r2,#4
;;;300    	g_tBMP180.Temp = T;		/* 将计算结果保存在全局变量 */
;;;301    
;;;302    	/* 计算真实压力值（单位 Pa） */
;;;303    	B6 = B5 - 4000;
;;;304    	X1 = (g_tBMP180.B2 * (B6 * B6) >> 12) >> 11;
0000ac  61a2              STR      r2,[r4,#0x18]  ; g_tBMP180
0000ae  f9b4500e          LDRSH    r5,[r4,#0xe]  ; g_tBMP180
0000b2  f5a0607a          SUB      r0,r0,#0xfa0
0000b6  fb00f200          MUL      r2,r0,r0
0000ba  4355              MULS     r5,r2,r5
;;;305    	X2 = (g_tBMP180.AC2 * B6) >> 11;
0000bc  f9b46002          LDRSH    r6,[r4,#2]  ; g_tBMP180
0000c0  15ed              ASRS     r5,r5,#23             ;304
0000c2  4346              MULS     r6,r0,r6
;;;306    	X3 = X1 + X2;
0000c4  eb0525e6          ADD      r5,r5,r6,ASR #11
;;;307    	B3 = (((((long)g_tBMP180.AC1) * 4 + X3) << g_tBMP180.OSS) + 2) >> 2;
0000c8  f9b46000          LDRSH    r6,[r4,#0]  ; g_tBMP180
0000cc  eb050586          ADD      r5,r5,r6,LSL #2
0000d0  408d              LSLS     r5,r5,r1
;;;308    
;;;309    	X1 = (g_tBMP180.AC3 * B6) >> 13;
0000d2  f9b46004          LDRSH    r6,[r4,#4]  ; g_tBMP180
;;;310    	X2 = (g_tBMP180.B1 * ((B6 * B6) >> 12)) >> 16;
0000d6  1312              ASRS     r2,r2,#12
0000d8  4346              MULS     r6,r0,r6              ;309
0000da  1370              ASRS     r0,r6,#13             ;309
0000dc  f9b4600c          LDRSH    r6,[r4,#0xc]  ; g_tBMP180
0000e0  1cad              ADDS     r5,r5,#2              ;307
0000e2  4356              MULS     r6,r2,r6
;;;311    	X3 = ((X1 + X2) + 2) >> 2;
0000e4  eb004026          ADD      r0,r0,r6,ASR #16
0000e8  1c80              ADDS     r0,r0,#2
0000ea  1080              ASRS     r0,r0,#2
;;;312    	B4 = (g_tBMP180.AC4 * (unsigned long)(X3 + 32768)) >> 15;
0000ec  88e2              LDRH     r2,[r4,#6]  ; g_tBMP180
0000ee  f5004000          ADD      r0,r0,#0x8000
0000f2  4342              MULS     r2,r0,r2
;;;313    
;;;314    	B7 = ((unsigned long)(UP - B3) * (50000 >> g_tBMP180.OSS));
0000f4  eba300a5          SUB      r0,r3,r5,ASR #2
0000f8  0bd2              LSRS     r2,r2,#15             ;312
0000fa  f24c3350          MOV      r3,#0xc350
0000fe  40cb              LSRS     r3,r3,r1
000100  4358              MULS     r0,r3,r0
;;;315    	if (B7 < 0x80000000)
000102  f1b04f00          CMP      r0,#0x80000000
000106  d203              BCS      |L2.272|
;;;316    	{
;;;317    		p = (B7 << 1) / B4;
000108  0040              LSLS     r0,r0,#1
00010a  fbb0f0f2          UDIV     r0,r0,r2
00010e  e002              B        |L2.278|
                  |L2.272|
;;;318    	}
;;;319    	else
;;;320    	{
;;;321    		p = (B7 / B4) << 1;
000110  fbb0f0f2          UDIV     r0,r0,r2
000114  0040              LSLS     r0,r0,#1
                  |L2.278|
;;;322    	}
;;;323    
;;;324    	X1 = (p >> 8) * (p >> 8);
000116  1201              ASRS     r1,r0,#8
000118  4349              MULS     r1,r1,r1
;;;325    	X1 = (X1 * 3038) >> 16;
00011a  f64032de          MOV      r2,#0xbde
00011e  4351              MULS     r1,r2,r1
000120  140a              ASRS     r2,r1,#16
;;;326    	X2 = (-7357 * p) >> 16;
000122  4906              LDR      r1,|L2.316|
000124  4341              MULS     r1,r0,r1
;;;327     	p =  p + ((X1 + X2 + 3791) >> 4);
000126  eb024121          ADD      r1,r2,r1,ASR #16
00012a  f60161cf          ADD      r1,r1,#0xecf
00012e  eb001021          ADD      r0,r0,r1,ASR #4
;;;328    
;;;329    	g_tBMP180.Press = p;		/* 将计算结果保存在全局变量 */
000132  61e0              STR      r0,[r4,#0x1c]  ; g_tBMP180
;;;330    }
000134  e8bd81f0          POP      {r4-r8,pc}
;;;331    
                          ENDP

                  |L2.312|
                          DCD      ||.bss||
                  |L2.316|
                          DCD      0xffffe343

                          AREA ||i.BMP180_WaitConvert||, CODE, READONLY, ALIGN=2

                  BMP180_WaitConvert PROC
;;;248    */
;;;249    static void BMP180_WaitConvert(void)
000000  4809              LDR      r0,|L3.40|
;;;250    {
;;;251    	if (g_tBMP180.OSS == 0)
000002  7d80              LDRB     r0,[r0,#0x16]  ; g_tBMP180
000004  b140              CBZ      r0,|L3.24|
;;;252    	{
;;;253    		bsp_DelayMS(6);		/* 4.5ms  7.5ms  13.5ms   25.5ms */
;;;254    	}
;;;255    	else if (g_tBMP180.OSS == 1)
000006  2801              CMP      r0,#1
000008  d008              BEQ      |L3.28|
;;;256    	{
;;;257    		bsp_DelayMS(9);		/* 4.5ms  7.5ms  13.5ms   25.5ms */
;;;258    	}
;;;259    	else if (g_tBMP180.OSS == 2)
00000a  2802              CMP      r0,#2
00000c  d008              BEQ      |L3.32|
;;;260    	{
;;;261    		bsp_DelayMS(15);	/* 4.5ms  7.5ms  13.5ms   25.5ms */
;;;262    	}
;;;263    	else if (g_tBMP180.OSS == 3)
00000e  2803              CMP      r0,#3
000010  d108              BNE      |L3.36|
;;;264    	{
;;;265    		bsp_DelayMS(27);	/* 4.5ms  7.5ms  13.5ms   25.5ms */
000012  201b              MOVS     r0,#0x1b
                  |L3.20|
000014  f7ffbffe          B.W      bsp_DelayMS
                  |L3.24|
000018  2006              MOVS     r0,#6                 ;253
00001a  e7fb              B        |L3.20|
                  |L3.28|
00001c  2009              MOVS     r0,#9                 ;257
00001e  e7f9              B        |L3.20|
                  |L3.32|
000020  200f              MOVS     r0,#0xf               ;261
000022  e7f7              B        |L3.20|
                  |L3.36|
;;;266    	}
;;;267    }
000024  4770              BX       lr
;;;268    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      ||.bss||

                          AREA ||i.BMP180_WriteReg||, CODE, READONLY, ALIGN=1

                  BMP180_WriteReg PROC
;;;148    */
;;;149    static void BMP180_WriteReg(uint8_t _ucRegAddr, uint8_t _ucRegValue)
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;151        i2c_Start();							/* 总线开始信号 */
000006  f7fffffe          BL       i2c_Start
;;;152    
;;;153        i2c_SendByte(BMP180_SLAVE_ADDRESS);		/* 发送设备地址+写信号 */
00000a  20ee              MOVS     r0,#0xee
00000c  f7fffffe          BL       i2c_SendByte
;;;154    	i2c_WaitAck();
000010  f7fffffe          BL       i2c_WaitAck
;;;155    
;;;156        i2c_SendByte(_ucRegAddr);				/* 发送寄存器地址 */
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       i2c_SendByte
;;;157    	i2c_WaitAck();
00001a  f7fffffe          BL       i2c_WaitAck
;;;158    
;;;159        i2c_SendByte(_ucRegValue);				/* 发送寄存器数值 */
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       i2c_SendByte
;;;160    	i2c_WaitAck();
000024  f7fffffe          BL       i2c_WaitAck
;;;161    
;;;162        i2c_Stop();                   			/* 总线停止信号 */
000028  e8bd4070          POP      {r4-r6,lr}
00002c  f7ffbffe          B.W      i2c_Stop
;;;163    }
;;;164    
                          ENDP


                          AREA ||i.bsp_InitBMP180||, CODE, READONLY, ALIGN=2

                  bsp_InitBMP180 PROC
;;;121    */
;;;122    void bsp_InitBMP180(void)
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124    	/* 读出芯片内部的校准参数（每个芯片不同，这是BOSCH出厂前校准好的数据） */
;;;125    	g_tBMP180.AC1 = (int16_t)BMP180_Read2Bytes(0xAA);
000002  20aa              MOVS     r0,#0xaa
000004  f7fffffe          BL       BMP180_Read2Bytes
000008  4c16              LDR      r4,|L5.100|
00000a  8020              STRH     r0,[r4,#0]
;;;126    	g_tBMP180.AC2 = (int16_t)BMP180_Read2Bytes(0xAC);
00000c  20ac              MOVS     r0,#0xac
00000e  f7fffffe          BL       BMP180_Read2Bytes
000012  8060              STRH     r0,[r4,#2]
;;;127    	g_tBMP180.AC3 = (int16_t)BMP180_Read2Bytes(0xAE);
000014  20ae              MOVS     r0,#0xae
000016  f7fffffe          BL       BMP180_Read2Bytes
00001a  80a0              STRH     r0,[r4,#4]
;;;128    	g_tBMP180.AC4 = (uint16_t)BMP180_Read2Bytes(0xB0);
00001c  20b0              MOVS     r0,#0xb0
00001e  f7fffffe          BL       BMP180_Read2Bytes
000022  80e0              STRH     r0,[r4,#6]
;;;129    	g_tBMP180.AC5 = (uint16_t)BMP180_Read2Bytes(0xB2);
000024  20b2              MOVS     r0,#0xb2
000026  f7fffffe          BL       BMP180_Read2Bytes
00002a  8120              STRH     r0,[r4,#8]
;;;130    	g_tBMP180.AC6 = (uint16_t)BMP180_Read2Bytes(0xB4);
00002c  20b4              MOVS     r0,#0xb4
00002e  f7fffffe          BL       BMP180_Read2Bytes
000032  8160              STRH     r0,[r4,#0xa]
;;;131    	g_tBMP180.B1 =  (int16_t)BMP180_Read2Bytes(0xB6);
000034  20b6              MOVS     r0,#0xb6
000036  f7fffffe          BL       BMP180_Read2Bytes
00003a  81a0              STRH     r0,[r4,#0xc]
;;;132    	g_tBMP180.B2 =  (int16_t)BMP180_Read2Bytes(0xB8);
00003c  20b8              MOVS     r0,#0xb8
00003e  f7fffffe          BL       BMP180_Read2Bytes
000042  81e0              STRH     r0,[r4,#0xe]
;;;133    	g_tBMP180.MB =  (int16_t)BMP180_Read2Bytes(0xBA);
000044  20ba              MOVS     r0,#0xba
000046  f7fffffe          BL       BMP180_Read2Bytes
00004a  8220              STRH     r0,[r4,#0x10]
;;;134    	g_tBMP180.MC =  (int16_t)BMP180_Read2Bytes(0xBC);
00004c  20bc              MOVS     r0,#0xbc
00004e  f7fffffe          BL       BMP180_Read2Bytes
000052  8260              STRH     r0,[r4,#0x12]
;;;135    	g_tBMP180.MD =  (int16_t)BMP180_Read2Bytes(0xBE);
000054  20be              MOVS     r0,#0xbe
000056  f7fffffe          BL       BMP180_Read2Bytes
00005a  82a0              STRH     r0,[r4,#0x14]
;;;136    
;;;137    	g_tBMP180.OSS = 0;	/* 过采样参数，0-3 */
00005c  2000              MOVS     r0,#0
00005e  75a0              STRB     r0,[r4,#0x16]
;;;138    }
000060  bd10              POP      {r4,pc}
;;;139    
                          ENDP

000062  0000              DCW      0x0000
                  |L5.100|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tBMP180
                          %        32

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_bmp180.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_bmp180_c_68a68826____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_bsp_bmp180_c_68a68826____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_bmp180_c_68a68826____REVSH|
#line 128
|__asm___12_bsp_bmp180_c_68a68826____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
