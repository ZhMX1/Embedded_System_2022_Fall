; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_hmc5883l.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_hmc5883l.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_hmc5883l.crf ..\..\User\bsp\src\bsp_hmc5883l.c]
                          THUMB

                          AREA ||i.HMC5883L_ReadByte||, CODE, READONLY, ALIGN=1

                  HMC5883L_ReadByte PROC
;;;103    */
;;;104    uint8_t HMC5883L_ReadByte(uint8_t _ucRegAddr)
000000  b510              PUSH     {r4,lr}
;;;105    {
000002  4604              MOV      r4,r0
;;;106    	uint8_t ucData;
;;;107    
;;;108    	i2c_Start();                  			/* 总线开始信号 */
000004  f7fffffe          BL       i2c_Start
;;;109    	i2c_SendByte(HMC5883L_SLAVE_ADDRESS);	/* 发送设备地址+写信号 */
000008  203c              MOVS     r0,#0x3c
00000a  f7fffffe          BL       i2c_SendByte
;;;110    	i2c_WaitAck();
00000e  f7fffffe          BL       i2c_WaitAck
;;;111    	i2c_SendByte(_ucRegAddr);     			/* 发送存储单元地址 */
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       i2c_SendByte
;;;112    	i2c_WaitAck();
000018  f7fffffe          BL       i2c_WaitAck
;;;113    
;;;114    	i2c_Start();                  			/* 总线开始信号 */
00001c  f7fffffe          BL       i2c_Start
;;;115    
;;;116    	i2c_SendByte(HMC5883L_SLAVE_ADDRESS+1); 	/* 发送设备地址+读信号 */
000020  203d              MOVS     r0,#0x3d
000022  f7fffffe          BL       i2c_SendByte
;;;117    	i2c_WaitAck();
000026  f7fffffe          BL       i2c_WaitAck
;;;118    
;;;119    	ucData = i2c_ReadByte();       			/* 读出寄存器数据 */
00002a  f7fffffe          BL       i2c_ReadByte
00002e  4604              MOV      r4,r0
;;;120    	i2c_NAck();
000030  f7fffffe          BL       i2c_NAck
;;;121    	i2c_Stop();                  			/* 总线停止信号 */
000034  f7fffffe          BL       i2c_Stop
;;;122    	return ucData;
000038  4620              MOV      r0,r4
;;;123    }
00003a  bd10              POP      {r4,pc}
;;;124    
                          ENDP


                          AREA ||i.HMC5883L_ReadData||, CODE, READONLY, ALIGN=2

                  HMC5883L_ReadData PROC
;;;133    */
;;;134    void HMC5883L_ReadData(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;135    {
;;;136    	uint8_t ucReadBuf[7];
;;;137    	uint8_t i;
;;;138    
;;;139    #if 1 /* 连续读 */
;;;140    	i2c_Start();                  			/* 总线开始信号 */
000002  f7fffffe          BL       i2c_Start
;;;141    	i2c_SendByte(HMC5883L_SLAVE_ADDRESS);	/* 发送设备地址+写信号 */
000006  203c              MOVS     r0,#0x3c
000008  f7fffffe          BL       i2c_SendByte
;;;142    	i2c_WaitAck();
00000c  f7fffffe          BL       i2c_WaitAck
;;;143    	i2c_SendByte(DATA_OUT_X);     		/* 发送存储单元地址  */
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       i2c_SendByte
;;;144    	i2c_WaitAck();
000016  f7fffffe          BL       i2c_WaitAck
;;;145    
;;;146    	i2c_Start();                  			/* 总线开始信号 */
00001a  f7fffffe          BL       i2c_Start
;;;147    
;;;148    	i2c_SendByte(HMC5883L_SLAVE_ADDRESS + 1); /* 发送设备地址+读信号 */
00001e  203d              MOVS     r0,#0x3d
000020  f7fffffe          BL       i2c_SendByte
;;;149    	i2c_WaitAck();
000024  f7fffffe          BL       i2c_WaitAck
;;;150    
;;;151    	for (i = 0; i < 6; i++)
000028  2400              MOVS     r4,#0
00002a  466d              MOV      r5,sp                 ;136
                  |L2.44|
;;;152    	{
;;;153    		ucReadBuf[i] = i2c_ReadByte();       			/* 读出寄存器数据 */
00002c  f7fffffe          BL       i2c_ReadByte
000030  5528              STRB     r0,[r5,r4]
;;;154    		i2c_Ack();
000032  f7fffffe          BL       i2c_Ack
000036  1c64              ADDS     r4,r4,#1
000038  b2e4              UXTB     r4,r4                 ;151
00003a  2c06              CMP      r4,#6                 ;151
00003c  d3f6              BCC      |L2.44|
;;;155    	}
;;;156    
;;;157    	/* 读最后一个字节，时给 NAck */
;;;158    	ucReadBuf[6] = i2c_ReadByte();
00003e  f7fffffe          BL       i2c_ReadByte
000042  f88d0006          STRB     r0,[sp,#6]
;;;159    	i2c_NAck();
000046  f7fffffe          BL       i2c_NAck
;;;160    
;;;161    	i2c_Stop();                  			/* 总线停止信号 */
00004a  f7fffffe          BL       i2c_Stop
;;;162    
;;;163    #else	/* 单字节读 */
;;;164    	for (i = 0 ; i < 7; i++)
;;;165    	{
;;;166    		ucReadBuf[i] = HMC5883L_ReadByte(DATA_OUT_X + i);
;;;167    	}
;;;168    #endif
;;;169    
;;;170    	/* 将读出的数据保存到全局结构体变量 */
;;;171    	g_tMag.X = (int16_t)((ucReadBuf[0] << 8) + ucReadBuf[1]);
00004e  f89d0001          LDRB     r0,[sp,#1]
000052  f89d1000          LDRB     r1,[sp,#0]
000056  eb002001          ADD      r0,r0,r1,LSL #8
00005a  b201              SXTH     r1,r0
00005c  4820              LDR      r0,|L2.224|
;;;172    	g_tMag.Z = (int16_t)((ucReadBuf[2] << 8) + ucReadBuf[3]);
;;;173    	g_tMag.Y = (int16_t)((ucReadBuf[4] << 8) + ucReadBuf[5]);
;;;174    	
;;;175    	g_tMag.Status = ucReadBuf[6];
;;;176    	
;;;177    	/* 统计最大值和最小值 */
;;;178    	if ((g_tMag.X > - 2048) && (g_tMag.X < 2048))
00005e  f20175ff          ADD      r5,r1,#0x7ff
000062  8001              STRH     r1,[r0,#0]            ;171
000064  f89d2003          LDRB     r2,[sp,#3]            ;172
000068  f89d3002          LDRB     r3,[sp,#2]            ;172
00006c  eb022203          ADD      r2,r2,r3,LSL #8       ;172
000070  b212              SXTH     r2,r2                 ;172
000072  8082              STRH     r2,[r0,#4]            ;172
000074  f89d3005          LDRB     r3,[sp,#5]            ;173
000078  f89d4004          LDRB     r4,[sp,#4]            ;173
00007c  eb032304          ADD      r3,r3,r4,LSL #8       ;173
000080  b21b              SXTH     r3,r3                 ;173
000082  8043              STRH     r3,[r0,#2]            ;173
000084  f89d4006          LDRB     r4,[sp,#6]            ;175
000088  7484              STRB     r4,[r0,#0x12]         ;175
00008a  f64074ff          MOV      r4,#0xfff
00008e  42a5              CMP      r5,r4
000090  d209              BCS      |L2.166|
;;;179    	{
;;;180    		if (g_tMag.X > g_tMag.X_Max)
000092  f9b0500c          LDRSH    r5,[r0,#0xc]  ; g_tMag
000096  42a9              CMP      r1,r5
000098  dd00              BLE      |L2.156|
;;;181    		{
;;;182    			g_tMag.X_Max = g_tMag.X;
00009a  8181              STRH     r1,[r0,#0xc]
                  |L2.156|
;;;183    		}
;;;184    		if (g_tMag.X < g_tMag.X_Min)
00009c  f9b05006          LDRSH    r5,[r0,#6]  ; g_tMag
0000a0  42a9              CMP      r1,r5
0000a2  da00              BGE      |L2.166|
;;;185    		{
;;;186    			g_tMag.X_Min = g_tMag.X;
0000a4  80c1              STRH     r1,[r0,#6]
                  |L2.166|
;;;187    		}	
;;;188    	}
;;;189    
;;;190    	if ((g_tMag.Y > - 2048) && (g_tMag.Y < 2048))
0000a6  f20371ff          ADD      r1,r3,#0x7ff
0000aa  42a1              CMP      r1,r4
0000ac  d209              BCS      |L2.194|
;;;191    	{
;;;192    		if (g_tMag.Y > g_tMag.Y_Max)
0000ae  f9b0100e          LDRSH    r1,[r0,#0xe]  ; g_tMag
0000b2  428b              CMP      r3,r1
0000b4  dd00              BLE      |L2.184|
;;;193    		{
;;;194    			g_tMag.Y_Max = g_tMag.Y;
0000b6  81c3              STRH     r3,[r0,#0xe]
                  |L2.184|
;;;195    		}
;;;196    		if (g_tMag.Y < g_tMag.Y_Min)
0000b8  f9b01008          LDRSH    r1,[r0,#8]  ; g_tMag
0000bc  428b              CMP      r3,r1
0000be  da00              BGE      |L2.194|
;;;197    		{
;;;198    			g_tMag.Y_Min = g_tMag.Y;
0000c0  8103              STRH     r3,[r0,#8]
                  |L2.194|
;;;199    		}	
;;;200    	}
;;;201    	
;;;202    	if ((g_tMag.Z > - 2048) && (g_tMag.Z < 2048))
0000c2  f20271ff          ADD      r1,r2,#0x7ff
0000c6  42a1              CMP      r1,r4
0000c8  d209              BCS      |L2.222|
;;;203    	{
;;;204    		if (g_tMag.Z > g_tMag.Z_Max)
0000ca  f9b01010          LDRSH    r1,[r0,#0x10]  ; g_tMag
0000ce  428a              CMP      r2,r1
0000d0  dd00              BLE      |L2.212|
;;;205    		{
;;;206    			g_tMag.Z_Max = g_tMag.Z;
0000d2  8202              STRH     r2,[r0,#0x10]
                  |L2.212|
;;;207    		}
;;;208    		if (g_tMag.Z < g_tMag.Z_Min)
0000d4  f9b0100a          LDRSH    r1,[r0,#0xa]  ; g_tMag
0000d8  428a              CMP      r2,r1
0000da  da00              BGE      |L2.222|
;;;209    		{
;;;210    			g_tMag.Z_Min = g_tMag.Z;
0000dc  8142              STRH     r2,[r0,#0xa]
                  |L2.222|
;;;211    		}	
;;;212    	}
;;;213    }
0000de  bd7c              POP      {r2-r6,pc}
;;;214    
                          ENDP

                  |L2.224|
                          DCD      ||.bss||

                          AREA ||i.HMC5883L_WriteByte||, CODE, READONLY, ALIGN=1

                  HMC5883L_WriteByte PROC
;;;79     */
;;;80     void HMC5883L_WriteByte(uint8_t _ucRegAddr, uint8_t _ucRegData)
000000  b570              PUSH     {r4-r6,lr}
;;;81     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;82         i2c_Start();							/* 总线开始信号 */
000006  f7fffffe          BL       i2c_Start
;;;83     
;;;84         i2c_SendByte(HMC5883L_SLAVE_ADDRESS);	/* 发送设备地址+写信号 */
00000a  203c              MOVS     r0,#0x3c
00000c  f7fffffe          BL       i2c_SendByte
;;;85     	i2c_WaitAck();
000010  f7fffffe          BL       i2c_WaitAck
;;;86     
;;;87         i2c_SendByte(_ucRegAddr);				/* 内部寄存器地址 */
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       i2c_SendByte
;;;88     	i2c_WaitAck();
00001a  f7fffffe          BL       i2c_WaitAck
;;;89     
;;;90         i2c_SendByte(_ucRegData);				/* 内部寄存器数据 */
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       i2c_SendByte
;;;91     	i2c_WaitAck();
000024  f7fffffe          BL       i2c_WaitAck
;;;92     
;;;93         i2c_Stop();                   			/* 总线停止信号 */
000028  e8bd4070          POP      {r4-r6,lr}
00002c  f7ffbffe          B.W      i2c_Stop
;;;94     }
;;;95     
                          ENDP


                          AREA ||i.bsp_InitHMC5883L||, CODE, READONLY, ALIGN=2

                  bsp_InitHMC5883L PROC
;;;33     */
;;;34     void bsp_InitHMC5883L(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36     
;;;37     
;;;38     	
;;;39     	/* 设置Mode寄存器 */
;;;40     	#if 1
;;;41     		HMC5883L_WriteByte(0x00, 0x70);	
000002  2170              MOVS     r1,#0x70
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       HMC5883L_WriteByte
;;;42     		HMC5883L_WriteByte(0x01, 0x20);	
00000a  2120              MOVS     r1,#0x20
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       HMC5883L_WriteByte
;;;43     		HMC5883L_WriteByte(0x02, 0x00);	
000012  2100              MOVS     r1,#0
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       HMC5883L_WriteByte
;;;44     	#else	/* 自校准模式 */
;;;45     		HMC5883L_WriteByte(0x00, 0x70 + 2);	
;;;46     		HMC5883L_WriteByte(0x01, 0x20);	
;;;47     		HMC5883L_WriteByte(0x02, 0x00);		
;;;48     	#endif
;;;49     
;;;50     	g_tMag.CfgRegA = HMC5883L_ReadByte(0);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       HMC5883L_ReadByte
000020  4c10              LDR      r4,|L4.100|
000022  74e0              STRB     r0,[r4,#0x13]
;;;51     	g_tMag.CfgRegB = HMC5883L_ReadByte(1);
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       HMC5883L_ReadByte
00002a  7520              STRB     r0,[r4,#0x14]
;;;52     	g_tMag.ModeReg = HMC5883L_ReadByte(2);
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       HMC5883L_ReadByte
000032  75a0              STRB     r0,[r4,#0x16]
;;;53     
;;;54     	g_tMag.IDReg[0] = HMC5883L_ReadByte(10);
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       HMC5883L_ReadByte
00003a  75e0              STRB     r0,[r4,#0x17]
;;;55     	g_tMag.IDReg[1] = HMC5883L_ReadByte(11);
00003c  200b              MOVS     r0,#0xb
00003e  f7fffffe          BL       HMC5883L_ReadByte
000042  7620              STRB     r0,[r4,#0x18]
;;;56     	g_tMag.IDReg[2] = HMC5883L_ReadByte(12);
000044  200c              MOVS     r0,#0xc
000046  f7fffffe          BL       HMC5883L_ReadByte
00004a  7660              STRB     r0,[r4,#0x19]
;;;57     	g_tMag.IDReg[3] = 0;
00004c  2000              MOVS     r0,#0
00004e  76a0              STRB     r0,[r4,#0x1a]
;;;58     		
;;;59     
;;;60     	/* 设置最小最大值初值 */
;;;61     	g_tMag.X_Min = 4096;
000050  f44f5080          MOV      r0,#0x1000
000054  80e0              STRH     r0,[r4,#6]
;;;62     	g_tMag.X_Max = -4096;
000056  4241              RSBS     r1,r0,#0
000058  81a1              STRH     r1,[r4,#0xc]
;;;63     	
;;;64     	g_tMag.Y_Min = 4096;
00005a  8120              STRH     r0,[r4,#8]
;;;65     	g_tMag.Y_Max = -4096;
00005c  81e1              STRH     r1,[r4,#0xe]
;;;66     
;;;67     	g_tMag.Z_Min = 4096;
00005e  8160              STRH     r0,[r4,#0xa]
;;;68     	g_tMag.Z_Max = -4096;
000060  8221              STRH     r1,[r4,#0x10]
;;;69     }
000062  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L4.100|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_tMag
                          %        28

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_hmc5883l.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_hmc5883l_c_05740161____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_hmc5883l_c_05740161____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_hmc5883l_c_05740161____REVSH|
#line 128
|__asm___14_bsp_hmc5883l_c_05740161____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
