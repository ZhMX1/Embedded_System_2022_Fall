; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_fsmc_sram.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_fsmc_sram.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_fsmc_sram.crf ..\..\User\bsp\src\bsp_fsmc_sram.c]
                          THUMB

                          AREA ||i.bsp_InitExtSRAM||, CODE, READONLY, ALIGN=2

                  bsp_InitExtSRAM PROC
;;;27     */
;;;28     void bsp_InitExtSRAM(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;29     {
;;;30     	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;31     	FSMC_NORSRAMTimingInitTypeDef  p;
;;;32     	GPIO_InitTypeDef GPIO_InitStructure; 
;;;33     
;;;34     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  b097              SUB      sp,sp,#0x5c           ;29
000006  0208              LSLS     r0,r1,#8
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;35     		
;;;36     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOG | RCC_APB2Periph_GPIOE |
00000c  2101              MOVS     r1,#1
00000e  f44f70f0          MOV      r0,#0x1e0
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;37     	                     RCC_APB2Periph_GPIOF, ENABLE);
;;;38     	
;;;39     	/* 配置SRAM数据线 */
;;;40     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
000016  f24c7003          MOV      r0,#0xc703
00001a  f8ad0058          STRH     r0,[sp,#0x58]
;;;41     	                            GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;42     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001e  2018              MOVS     r0,#0x18
000020  f88d005b          STRB     r0,[sp,#0x5b]
;;;43     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;44     	GPIO_Init(GPIOD, &GPIO_InitStructure); 
000024  4d30              LDR      r5,|L1.232|
000026  2403              MOVS     r4,#3                 ;43
000028  f88d405a          STRB     r4,[sp,#0x5a]         ;43
00002c  a916              ADD      r1,sp,#0x58
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_Init
;;;45     	
;;;46     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
000034  f64f7080          MOV      r0,#0xff80
;;;47     	                            GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
;;;48     	                            GPIO_Pin_15;
;;;49     	GPIO_Init(GPIOE, &GPIO_InitStructure);
000038  4e2c              LDR      r6,|L1.236|
00003a  f8ad0058          STRH     r0,[sp,#0x58]         ;46
00003e  a916              ADD      r1,sp,#0x58
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       GPIO_Init
;;;50     	
;;;51     	/* 配置SRAM 地址线 */
;;;52     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
000046  f24f003f          MOV      r0,#0xf03f
00004a  f8ad0058          STRH     r0,[sp,#0x58]
;;;53     	                            GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
;;;54     	                            GPIO_Pin_14 | GPIO_Pin_15;
;;;55     	GPIO_Init(GPIOF, &GPIO_InitStructure);
00004e  a916              ADD      r1,sp,#0x58
000050  4827              LDR      r0,|L1.240|
000052  f7fffffe          BL       GPIO_Init
;;;56     	
;;;57     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
000056  203f              MOVS     r0,#0x3f
;;;58     	                            GPIO_Pin_4 | GPIO_Pin_5;
;;;59     	GPIO_Init(GPIOG, &GPIO_InitStructure);
000058  4f26              LDR      r7,|L1.244|
00005a  f8ad0058          STRH     r0,[sp,#0x58]         ;57
00005e  a916              ADD      r1,sp,#0x58
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       GPIO_Init
;;;60     	
;;;61     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
000066  f44f5060          MOV      r0,#0x3800
00006a  f8ad0058          STRH     r0,[sp,#0x58]
;;;62     	GPIO_Init(GPIOD, &GPIO_InitStructure);
00006e  a916              ADD      r1,sp,#0x58
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       GPIO_Init
;;;63     	
;;;64     	/* 配置 NOE 和 NWE */  
;;;65     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
000076  2030              MOVS     r0,#0x30
000078  f8ad0058          STRH     r0,[sp,#0x58]
;;;66     	GPIO_Init(GPIOD, &GPIO_InitStructure);
00007c  a916              ADD      r1,sp,#0x58
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       GPIO_Init
;;;67     	
;;;68     	/* 配置 NE3 */
;;;69     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
000084  1528              ASRS     r0,r5,#20
000086  f8ad0058          STRH     r0,[sp,#0x58]
;;;70     	GPIO_Init(GPIOG, &GPIO_InitStructure);
00008a  a916              ADD      r1,sp,#0x58
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       GPIO_Init
;;;71     	
;;;72     	/* 配置 NBL0, NBL1 */
;;;73     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
000092  f8ad4058          STRH     r4,[sp,#0x58]
;;;74     	GPIO_Init(GPIOE, &GPIO_InitStructure); 
000096  a916              ADD      r1,sp,#0x58
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       GPIO_Init
;;;75     	
;;;76     	/* 配置FSMC */
;;;77     	p.FSMC_AddressSetupTime = 0;
00009e  2000              MOVS     r0,#0
0000a0  e9cd0410          STRD     r0,r4,[sp,#0x40]
0000a4  900f              STR      r0,[sp,#0x3c]
;;;78     	p.FSMC_AddressHoldTime = 0;
;;;79     	p.FSMC_DataSetupTime = 3;           /* 根据SRAM的最大速度进行调整  */
;;;80     	p.FSMC_BusTurnAroundDuration = 0;
;;;81     	p.FSMC_CLKDivision = 0;
;;;82     	p.FSMC_DataLatency = 0;
;;;83     	p.FSMC_AccessMode = FSMC_AccessMode_A;
0000a6  9014              STR      r0,[sp,#0x50]
;;;84     	
;;;85     	FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
0000a8  2104              MOVS     r1,#4
0000aa  9015              STR      r0,[sp,#0x54]
0000ac  e9cd1000          STRD     r1,r0,[sp,#0]
0000b0  9012              STR      r0,[sp,#0x48]         ;81
;;;86     	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
;;;87     	FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;88     	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
0000b2  2110              MOVS     r1,#0x10
0000b4  e9cd0102          STRD     r0,r1,[sp,#8]
0000b8  9013              STR      r0,[sp,#0x4c]         ;82
;;;89     	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
;;;90     	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
0000ba  9004              STR      r0,[sp,#0x10]
;;;91     	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
0000bc  9005              STR      r0,[sp,#0x14]
;;;92     	FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
0000be  9006              STR      r0,[sp,#0x18]
;;;93     	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;94     	FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
0000c0  0209              LSLS     r1,r1,#8
0000c2  9007              STR      r0,[sp,#0x1c]
0000c4  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;95     	FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
;;;96     	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
0000c8  900a              STR      r0,[sp,#0x28]
;;;97     	FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
0000ca  900b              STR      r0,[sp,#0x2c]
;;;98     	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
0000cc  900c              STR      r0,[sp,#0x30]
0000ce  a80f              ADD      r0,sp,#0x3c
;;;99     	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
0000d0  900d              STR      r0,[sp,#0x34]
;;;100    	
;;;101    	FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
0000d2  900e              STR      r0,[sp,#0x38]
0000d4  4668              MOV      r0,sp
0000d6  f7fffffe          BL       FSMC_NORSRAMInit
;;;102    	
;;;103    	/*!< Enable FSMC Bank1_SRAM Bank */
;;;104    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);  
0000da  2101              MOVS     r1,#1
0000dc  2004              MOVS     r0,#4
0000de  f7fffffe          BL       FSMC_NORSRAMCmd
;;;105    }
0000e2  b017              ADD      sp,sp,#0x5c
0000e4  bdf0              POP      {r4-r7,pc}
;;;106    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L1.232|
                          DCD      0x40011400
                  |L1.236|
                          DCD      0x40011800
                  |L1.240|
                          DCD      0x40011c00
                  |L1.244|
                          DCD      0x40012000

                          AREA ||i.bsp_TestExtSRAM||, CODE, READONLY, ALIGN=2

                  bsp_TestExtSRAM PROC
;;;114    */
;;;115    uint8_t bsp_TestExtSRAM(void)
000000  b538              PUSH     {r3-r5,lr}
;;;116    {
;;;117    	uint32_t i;
;;;118    	uint32_t *pSRAM;
;;;119    	uint8_t *pBytes;
;;;120    	uint32_t err;
;;;121    	const uint8_t ByteBuf[4] = {0x55, 0xA5, 0x5A, 0xAA};
000002  a019              ADR      r0,|L2.104|
;;;122    
;;;123    	/* 写SRAM */
;;;124    	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
000004  f04f44d0          MOV      r4,#0x68000000
000008  6800              LDR      r0,[r0,#0]            ;121
00000a  4621              MOV      r1,r4
;;;125    	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
00000c  2200              MOVS     r2,#0
00000e  f44f2580          MOV      r5,#0x40000
000012  9000              STR      r0,[sp,#0]
                  |L2.20|
;;;126    	{
;;;127    		*pSRAM++ = i;
000014  c104              STM      r1!,{r2}
000016  1c52              ADDS     r2,r2,#1
000018  42aa              CMP      r2,r5                 ;125
00001a  d3fb              BCC      |L2.20|
;;;128    	}
;;;129    
;;;130    	/* 读SRAM */
;;;131    	err = 0;
00001c  2300              MOVS     r3,#0
;;;132    	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
00001e  4620              MOV      r0,r4
;;;133    	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
000020  461a              MOV      r2,r3
                  |L2.34|
;;;134    	{
;;;135    		if (*pSRAM++ != i)
000022  c802              LDM      r0!,{r1}
000024  4291              CMP      r1,r2
000026  d000              BEQ      |L2.42|
000028  1c5b              ADDS     r3,r3,#1
                  |L2.42|
00002a  1c52              ADDS     r2,r2,#1
00002c  42aa              CMP      r2,r5                 ;133
00002e  d3f8              BCC      |L2.34|
;;;136    		{
;;;137    			err++;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	if (err >  0)
000030  b10b              CBZ      r3,|L2.54|
000032  0098              LSLS     r0,r3,#2
;;;142    	{
;;;143    		return  (4 * err);
000034  e015              B        |L2.98|
                  |L2.54|
;;;144    	}
;;;145    
;;;146    #if 0
;;;147    	/* 对SRAM 的数据求反并写入 */
;;;148    	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
;;;149    	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
;;;150    	{
;;;151    		*pSRAM = ~*pSRAM;
;;;152    		pSRAM++;
;;;153    	}
;;;154    
;;;155    	/* 再次比较SRAM的数据 */
;;;156    	err = 0;
;;;157    	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
;;;158    	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
;;;159    	{
;;;160    		if (*pSRAM++ != (~i))
;;;161    		{
;;;162    			err++;
;;;163    		}
;;;164    	}
;;;165    
;;;166    	if (err >  0)
;;;167    	{
;;;168    		return (4 * err);
;;;169    	}
;;;170    #endif
;;;171    
;;;172    	/* 测试按字节方式访问, 目的是验证 FSMC_NBL0 、 FSMC_NBL1 口线 */
;;;173    	pBytes = (uint8_t *)EXT_SRAM_ADDR;
000036  4621              MOV      r1,r4
;;;174    	for (i = 0; i < sizeof(ByteBuf); i++)
000038  2000              MOVS     r0,#0
00003a  466a              MOV      r2,sp                 ;121
                  |L2.60|
;;;175    	{
;;;176    		*pBytes++ = ByteBuf[i];
00003c  5c13              LDRB     r3,[r2,r0]
00003e  1c40              ADDS     r0,r0,#1
000040  f8013b01          STRB     r3,[r1],#1
000044  2804              CMP      r0,#4                 ;174
000046  d3f9              BCC      |L2.60|
;;;177    	}
;;;178    
;;;179    	/* 比较SRAM的数据 */
;;;180    	err = 0;
000048  2000              MOVS     r0,#0
;;;181    	pBytes = (uint8_t *)EXT_SRAM_ADDR;
;;;182    	for (i = 0; i < sizeof(ByteBuf); i++)
00004a  4601              MOV      r1,r0
                  |L2.76|
;;;183    	{
;;;184    		if (*pBytes++ != ByteBuf[i])
00004c  f8143b01          LDRB     r3,[r4],#1
000050  5c55              LDRB     r5,[r2,r1]
000052  42ab              CMP      r3,r5
000054  d000              BEQ      |L2.88|
000056  1c40              ADDS     r0,r0,#1
                  |L2.88|
000058  1c49              ADDS     r1,r1,#1
00005a  2904              CMP      r1,#4                 ;182
00005c  d3f6              BCC      |L2.76|
;;;185    		{
;;;186    			err++;
;;;187    		}
;;;188    	}
;;;189    	if (err >  0)
00005e  2800              CMP      r0,#0
000060  d000              BEQ      |L2.100|
                  |L2.98|
;;;190    	{
;;;191    		return err;
000062  b2c0              UXTB     r0,r0
                  |L2.100|
;;;192    	}
;;;193    	return 0;
;;;194    }
000064  bd38              POP      {r3-r5,pc}
;;;195    
                          ENDP

000066  0000              DCW      0x0000
                  |L2.104|
000068  55a55aaa          DCB      "U",165,"Z",170

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_fsmc_sram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_fsmc_sram_c_4f10e948____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_fsmc_sram_c_4f10e948____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_fsmc_sram_c_4f10e948____REVSH|
#line 128
|__asm___15_bsp_fsmc_sram_c_4f10e948____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
