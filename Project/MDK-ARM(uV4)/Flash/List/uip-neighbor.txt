; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\uip-neighbor.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\uip-neighbor.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\uip-neighbor.crf ..\..\User\uIP\uip\uip-neighbor.c]
                          THUMB

                          AREA ||i.find_entry||, CODE, READONLY, ALIGN=2

                  find_entry PROC
;;;120    static struct neighbor_entry *
;;;121    find_entry(uip_ipaddr_t ipaddr)
000000  b530              PUSH     {r4,r5,lr}
;;;122    {
;;;123      int i;
;;;124    
;;;125      for(i = 0; i < ENTRIES; ++i) {
;;;126        if(uip_ipaddr_cmp(entries[i].ipaddr, ipaddr)) {
000002  8803              LDRH     r3,[r0,#0]
000004  4a0b              LDR      r2,|L1.52|
000006  2100              MOVS     r1,#0                 ;125
                  |L1.8|
000008  eb010441          ADD      r4,r1,r1,LSL #1
00000c  f8325024          LDRH     r5,[r2,r4,LSL #2]
000010  429d              CMP      r5,r3
000012  d10a              BNE      |L1.42|
000014  eb020484          ADD      r4,r2,r4,LSL #2
000018  8845              LDRH     r5,[r0,#2]
00001a  8864              LDRH     r4,[r4,#2]
00001c  42ac              CMP      r4,r5
00001e  d104              BNE      |L1.42|
;;;127          return &entries[i];
000020  eb010041          ADD      r0,r1,r1,LSL #1
000024  eb020080          ADD      r0,r2,r0,LSL #2
;;;128        }
;;;129      }
;;;130      return NULL;
;;;131    }
000028  bd30              POP      {r4,r5,pc}
                  |L1.42|
00002a  1c49              ADDS     r1,r1,#1
00002c  2908              CMP      r1,#8                 ;125
00002e  dbeb              BLT      |L1.8|
000030  2000              MOVS     r0,#0                 ;130
000032  bd30              POP      {r4,r5,pc}
;;;132    /*---------------------------------------------------------------------------*/
                          ENDP

                  |L1.52|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_add||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  uip_neighbor_add PROC
;;;85     void
;;;86     uip_neighbor_add(uip_ipaddr_t ipaddr, struct uip_neighbor_addr *addr)
000000  b5fe              PUSH     {r1-r7,lr}
;;;87     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;88       int i, oldest;
;;;89       u8_t oldest_time;
;;;90     
;;;91       printf("Adding neighbor with link address %02x:%02x:%02x:%02x:%02x:%02x\n",
000006  794a              LDRB     r2,[r1,#5]
000008  78e0              LDRB     r0,[r4,#3]
00000a  7909              LDRB     r1,[r1,#4]
00000c  e88d0007          STM      sp,{r0-r2}
000010  78a3              LDRB     r3,[r4,#2]
000012  7862              LDRB     r2,[r4,#1]
000014  7821              LDRB     r1,[r4,#0]
000016  481a              LDR      r0,|L2.128|
000018  f7fffffe          BL       __2printf
;;;92     	 addr->addr.addr[0], addr->addr.addr[1], addr->addr.addr[2], addr->addr.addr[3],
;;;93     	 addr->addr.addr[4], addr->addr.addr[5]);
;;;94     
;;;95       /* Find the first unused entry or the oldest used entry. */
;;;96       oldest_time = 0;
00001c  2600              MOVS     r6,#0
;;;97       oldest = 0;
;;;98       for(i = 0; i < ENTRIES; ++i) {
;;;99         if(entries[i].time == MAX_TIME) {
00001e  4919              LDR      r1,|L2.132|
000020  4630              MOV      r0,r6                 ;97
000022  4632              MOV      r2,r6                 ;98
                  |L2.36|
000024  eb020742          ADD      r7,r2,r2,LSL #1
000028  eb010c87          ADD      r12,r1,r7,LSL #2
00002c  f89c300a          LDRB     r3,[r12,#0xa]
000030  2b80              CMP      r3,#0x80
000032  d00b              BEQ      |L2.76|
;;;100          oldest = i;
;;;101          break;
;;;102        }
;;;103        if(uip_ipaddr_cmp(entries[i].ipaddr, addr)) {
000034  f8317027          LDRH     r7,[r1,r7,LSL #2]
000038  f8b4e000          LDRH     lr,[r4,#0]
00003c  4577              CMP      r7,lr
00003e  d107              BNE      |L2.80|
000040  f8bc7002          LDRH     r7,[r12,#2]
000044  f8b4c002          LDRH     r12,[r4,#2]
000048  4567              CMP      r7,r12
00004a  d101              BNE      |L2.80|
                  |L2.76|
00004c  4610              MOV      r0,r2                 ;100
00004e  e006              B        |L2.94|
                  |L2.80|
;;;104          oldest = i;
;;;105          break;
;;;106        }
;;;107        if(entries[i].time > oldest_time) {
000050  42b3              CMP      r3,r6
000052  d901              BLS      |L2.88|
;;;108          oldest = i;
000054  4610              MOV      r0,r2
;;;109          oldest_time = entries[i].time;
000056  461e              MOV      r6,r3
                  |L2.88|
000058  1c52              ADDS     r2,r2,#1
00005a  2a08              CMP      r2,#8                 ;98
00005c  dbe2              BLT      |L2.36|
                  |L2.94|
;;;110        }
;;;111      }
;;;112    
;;;113      /* Use the oldest or first free entry (either pointed to by the
;;;114         "oldest" variable). */
;;;115      entries[oldest].time = 0;
00005e  eb000240          ADD      r2,r0,r0,LSL #1
000062  eb010082          ADD      r0,r1,r2,LSL #2
000066  2300              MOVS     r3,#0
000068  7283              STRB     r3,[r0,#0xa]
;;;116      uip_ipaddr_copy(entries[oldest].ipaddr, ipaddr);
00006a  882b              LDRH     r3,[r5,#0]
00006c  f8213022          STRH     r3,[r1,r2,LSL #2]
000070  8869              LDRH     r1,[r5,#2]
000072  8041              STRH     r1,[r0,#2]
;;;117      memcpy(&entries[oldest].addr, addr, sizeof(struct uip_neighbor_addr));
000074  6821              LDR      r1,[r4,#0]
000076  6041              STR      r1,[r0,#4]
000078  88a1              LDRH     r1,[r4,#4]
00007a  8101              STRH     r1,[r0,#8]
;;;118    }
00007c  bdfe              POP      {r1-r7,pc}
;;;119    /*---------------------------------------------------------------------------*/
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      ||.conststring||
                  |L2.132|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_init||, CODE, READONLY, ALIGN=2

                  uip_neighbor_init PROC
;;;63     void
;;;64     uip_neighbor_init(void)
000000  2000              MOVS     r0,#0
;;;65     {
;;;66       int i;
;;;67     
;;;68       for(i = 0; i < ENTRIES; ++i) {
;;;69         entries[i].time = MAX_TIME;
000002  4906              LDR      r1,|L3.28|
000004  2280              MOVS     r2,#0x80
000006  bf00              NOP      
                  |L3.8|
000008  eb000340          ADD      r3,r0,r0,LSL #1
00000c  eb010383          ADD      r3,r1,r3,LSL #2
000010  1c40              ADDS     r0,r0,#1
000012  729a              STRB     r2,[r3,#0xa]
000014  2808              CMP      r0,#8                 ;68
000016  dbf7              BLT      |L3.8|
;;;70       }
;;;71     }
000018  4770              BX       lr
;;;72     /*---------------------------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_lookup||, CODE, READONLY, ALIGN=1

                  uip_neighbor_lookup PROC
;;;144    struct uip_neighbor_addr *
;;;145    uip_neighbor_lookup(uip_ipaddr_t ipaddr)
000000  b510              PUSH     {r4,lr}
;;;146    {
;;;147      struct neighbor_entry *e;
;;;148    
;;;149      e = find_entry(ipaddr);
000002  f7fffffe          BL       find_entry
;;;150      if(e != NULL) {
000006  2800              CMP      r0,#0
000008  d000              BEQ      |L4.12|
00000a  1d00              ADDS     r0,r0,#4
                  |L4.12|
;;;151        /*    printf("Lookup neighbor with link address %02x:%02x:%02x:%02x:%02x:%02x\n",
;;;152    	   e->addr.addr.addr[0], e->addr.addr.addr[1], e->addr.addr.addr[2], e->addr.addr.addr[3],
;;;153    	   e->addr.addr.addr[4], e->addr.addr.addr[5]);*/
;;;154    
;;;155        return &e->addr;
;;;156      }
;;;157      return NULL;
;;;158    }
00000c  bd10              POP      {r4,pc}
;;;159    /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.uip_neighbor_periodic||, CODE, READONLY, ALIGN=2

                  uip_neighbor_periodic PROC
;;;73     void
;;;74     uip_neighbor_periodic(void)
000000  4b07              LDR      r3,|L5.32|
;;;75     {
;;;76       int i;
;;;77     
;;;78       for(i = 0; i < ENTRIES; ++i) {
000002  2000              MOVS     r0,#0
                  |L5.4|
;;;79         if(entries[i].time < MAX_TIME) {
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  eb030181          ADD      r1,r3,r1,LSL #2
00000c  7a8a              LDRB     r2,[r1,#0xa]
00000e  2a80              CMP      r2,#0x80
000010  d201              BCS      |L5.22|
000012  1c52              ADDS     r2,r2,#1
;;;80           entries[i].time++;
000014  728a              STRB     r2,[r1,#0xa]
                  |L5.22|
000016  1c40              ADDS     r0,r0,#1
000018  2808              CMP      r0,#8                 ;78
00001a  dbf3              BLT      |L5.4|
;;;81         }
;;;82       }
;;;83     }
00001c  4770              BX       lr
;;;84     /*---------------------------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_update||, CODE, READONLY, ALIGN=1

                  uip_neighbor_update PROC
;;;133    void
;;;134    uip_neighbor_update(uip_ipaddr_t ipaddr)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136      struct neighbor_entry *e;
;;;137    
;;;138      e = find_entry(ipaddr);
000002  f7fffffe          BL       find_entry
;;;139      if(e != NULL) {
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L6.14|
;;;140        e->time = 0;
00000a  2100              MOVS     r1,#0
00000c  7281              STRB     r1,[r0,#0xa]
                  |L6.14|
;;;141      }
;;;142    }
00000e  bd10              POP      {r4,pc}
;;;143    /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  entries
                          %        96

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  41646469          DCB      "Adding neighbor with link address %02x:%02x:%02x:%02x:%"
000004  6e67206e
000008  65696768
00000c  626f7220
000010  77697468
000014  206c696e
000018  6b206164
00001c  64726573
000020  73202530
000024  32783a25
000028  3032783a
00002c  25303278
000030  3a253032
000034  783a25  
000037  3032783a          DCB      "02x:%02x\n",0
00003b  25303278
00003f  0a00    
