; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mass_mal.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mass_mal.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mass_mal.crf ..\..\User\usb_mass\mass_mal.c]
                          THUMB

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  MAL_GetStatus PROC
;;;201    */
;;;202    uint16_t MAL_GetStatus (uint8_t lun)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;203    {
;;;204    	SD_CardInfo mSDCardInfo;	/* 定义SD卡状态信息结构体 */
;;;205    	uint32_t DeviceSizeMul = 0, NumberOfBlocks = 0;	
;;;206    	uint32_t nand_id;			/* 保存NAND ID */
;;;207    	uint16_t status = MAL_OK;
;;;208    	
;;;209    	switch (lun)
;;;210    	{
;;;211    		case MASS_SD:
;;;212    		{				
;;;213    			if (SD_Init() == SD_OK)
;;;214    			{
;;;215    				SD_GetCardInfo(&mSDCardInfo);
;;;216    				SD_SelectDeselect((uint32_t) (mSDCardInfo.RCA << 16));
;;;217    				DeviceSizeMul = (mSDCardInfo.SD_csd.DeviceSizeMul + 2);
;;;218    			
;;;219    				if(mSDCardInfo.CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;220    				{
;;;221    					Mass_Block_Count[0] = (mSDCardInfo.SD_csd.DeviceSize + 1) * 1024;
;;;222    				}
;;;223    				else
;;;224    				{
;;;225    					NumberOfBlocks  = ((1 << (mSDCardInfo.SD_csd.RdBlockLen)) / 512);
;;;226    					Mass_Block_Count[0] = ((mSDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (NumberOfBlocks/2));
;;;227    				}
;;;228    				Mass_Block_Size[0]  = 512;
;;;229    			
;;;230    				status = SD_SelectDeselect((uint32_t) (mSDCardInfo.RCA << 16)); 
;;;231    				status = SD_EnableWideBusOperation(SDIO_BusWide_4b); 
;;;232    				if (status != SD_OK )
;;;233    				{
;;;234    					return MAL_FAIL;
;;;235    				}
;;;236    			
;;;237    				Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
000004  f8df80d8          LDR      r8,|L1.224|
000008  b096              SUB      sp,sp,#0x58           ;203
00000a  f1080510          ADD      r5,r8,#0x10           ;221
00000e  2400              MOVS     r4,#0                 ;207
000010  f44f7700          MOV      r7,#0x200             ;228
000014  f1a50608          SUB      r6,r5,#8              ;228
000018  b110              CBZ      r0,|L1.32|
00001a  2801              CMP      r0,#1                 ;209
00001c  d15c              BNE      |L1.216|
00001e  e041              B        |L1.164|
                  |L1.32|
000020  f7fffffe          BL       SD_Init
000024  b130              CBZ      r0,|L1.52|
;;;238    				
;;;239    				mass_printf_ok("MAL_GetStatus(MASS_SD) Ok. Memory Size = %uMB\r\n", Mass_Memory_Size[0]/(1024*1024));	
;;;240    				return MAL_OK;
;;;241          		}
;;;242          		else
;;;243          		{
;;;244          			mass_printf_err("SD_Init() fail (%d) : file %s on line %d\r\n", status, __FILE__, __LINE__);
000026  23f4              MOVS     r3,#0xf4
000028  a22e              ADR      r2,|L1.228|
00002a  4621              MOV      r1,r4
00002c  a035              ADR      r0,|L1.260|
00002e  f7fffffe          BL       __2printf
;;;245          			status = MAL_FAIL;
000032  e051              B        |L1.216|
                  |L1.52|
000034  4668              MOV      r0,sp                 ;215
000036  f7fffffe          BL       SD_GetCardInfo
00003a  f8bd0054          LDRH     r0,[sp,#0x54]         ;216
00003e  0400              LSLS     r0,r0,#16             ;216
000040  f7fffffe          BL       SD_SelectDeselect
000044  f89d1018          LDRB     r1,[sp,#0x18]         ;217
000048  f89d0056          LDRB     r0,[sp,#0x56]         ;219
00004c  1c89              ADDS     r1,r1,#2              ;219
00004e  2802              CMP      r0,#2                 ;219
000050  d01c              BEQ      |L1.140|
000052  f89d2008          LDRB     r2,[sp,#8]            ;225
000056  2001              MOVS     r0,#1                 ;225
000058  4090              LSLS     r0,r0,r2              ;225
00005a  17c2              ASRS     r2,r0,#31             ;225
00005c  eb0050d2          ADD      r0,r0,r2,LSR #23      ;225
000060  9a04              LDR      r2,[sp,#0x10]         ;226
000062  1240              ASRS     r0,r0,#9              ;225
000064  1c52              ADDS     r2,r2,#1              ;226
000066  408a              LSLS     r2,r2,r1              ;226
000068  0840              LSRS     r0,r0,#1              ;226
00006a  4082              LSLS     r2,r2,r0              ;226
00006c  602a              STR      r2,[r5,#0]            ;226  ; Mass_Block_Count
                  |L1.110|
00006e  6037              STR      r7,[r6,#0]            ;230  ; Mass_Block_Size
000070  f8bd0054          LDRH     r0,[sp,#0x54]         ;230
000074  0400              LSLS     r0,r0,#16             ;230
000076  f7fffffe          BL       SD_SelectDeselect
00007a  f44f6000          MOV      r0,#0x800             ;231
00007e  f7fffffe          BL       SD_EnableWideBusOperation
000082  b140              CBZ      r0,|L1.150|
000084  2001              MOVS     r0,#1                 ;234
                  |L1.134|
;;;246          		}	
;;;247    			break;
;;;248    		}
;;;249    		
;;;250    		case MASS_NAND:
;;;251    		{	
;;;252    			nand_id = NAND_ReadID();	/* 读取NAND Flash的制造商ID和器件ID */
;;;253    
;;;254    			/* 判断NAND_ID是否正确 */
;;;255    			if ((nand_id == HY27UF081G2A) || (nand_id == K9F1G08U0A) || 
;;;256    				(nand_id == K9F1G08U0B) || (nand_id == H27U1G8F2BTR))
;;;257    			{
;;;258    				/*  对于HY27UF081G2A, 1个区，每区1024块，每块64个页，每页2048字节
;;;259    					 Mass块数量 Mass_Block_Count = 1024 * 64 * 1 = 64K 个
;;;260    					 Mass块大小 Mass_Block_Size = 2048 字节
;;;261    					 整个存储器大小 Mass_Memory_Size = 64K * 2048 = 128M 字节
;;;262    				*/
;;;263    			#if 1
;;;264    				Mass_Block_Count[1] = NAND_FormatCapacity()/512;		/* 必须为可用的扇区个数，不是芯片的理论容量 */
;;;265    				Mass_Block_Size[1]  = 512;
;;;266    				Mass_Memory_Size[1] = (Mass_Block_Count[1] * Mass_Block_Size[1]);
;;;267    			#else
;;;268    				Mass_Block_Count[1] = NAND_ZONE_SIZE * NAND_BLOCK_SIZE * NAND_MAX_ZONE;
;;;269    				Mass_Block_Size[1]  = NAND_PAGE_SIZE;
;;;270    				Mass_Memory_Size[1] = (Mass_Block_Count[1] * Mass_Block_Size[1]);
;;;271    			#endif	
;;;272    				
;;;273    				mass_printf_ok("MAL_GetStatus(MASS_NAND) Ok. Memory Size = %uMB\r\n", Mass_Memory_Size[1]/(1024*1024));
;;;274    				status = MAL_OK;
;;;275    			}
;;;276    			else
;;;277    			{				
;;;278    				mass_printf_err("MAL_GetStatus(MASS_NAND) Fail\r\n");					
;;;279    				status = MAL_FAIL;
;;;280    			}			
;;;281    			break;
;;;282    		}
;;;283    			
;;;284    		default:
;;;285    			status = MAL_FAIL;
;;;286    			break;			
;;;287    	}
;;;288    	return status;
;;;289    }
000086  b016              ADD      sp,sp,#0x58
000088  e8bd81f0          POP      {r4-r8,pc}
                  |L1.140|
00008c  9804              LDR      r0,[sp,#0x10]         ;221
00008e  1c40              ADDS     r0,r0,#1              ;221
000090  0280              LSLS     r0,r0,#10             ;221
000092  6028              STR      r0,[r5,#0]            ;221  ; Mass_Block_Count
000094  e7eb              B        |L1.110|
                  |L1.150|
000096  6828              LDR      r0,[r5,#0]            ;237  ; Mass_Block_Count
000098  6831              LDR      r1,[r6,#0]            ;237  ; Mass_Block_Size
00009a  4348              MULS     r0,r1,r0              ;237
00009c  f8c80000          STR      r0,[r8,#0]            ;240  ; Mass_Memory_Size
0000a0  2000              MOVS     r0,#0                 ;240
0000a2  e7f0              B        |L1.134|
                  |L1.164|
0000a4  f7fffffe          BL       NAND_ReadID
0000a8  4921              LDR      r1,|L1.304|
0000aa  4288              CMP      r0,r1                 ;255
0000ac  d008              BEQ      |L1.192|
0000ae  4921              LDR      r1,|L1.308|
0000b0  4288              CMP      r0,r1                 ;255
0000b2  d005              BEQ      |L1.192|
0000b4  4920              LDR      r1,|L1.312|
0000b6  4288              CMP      r0,r1                 ;256
0000b8  d002              BEQ      |L1.192|
0000ba  4920              LDR      r1,|L1.316|
0000bc  4288              CMP      r0,r1                 ;256
0000be  d108              BNE      |L1.210|
                  |L1.192|
0000c0  f7fffffe          BL       NAND_FormatCapacity
0000c4  0a40              LSRS     r0,r0,#9              ;264
0000c6  6068              STR      r0,[r5,#4]            ;265  ; Mass_Block_Count
0000c8  0241              LSLS     r1,r0,#9              ;266
0000ca  6077              STR      r7,[r6,#4]            ;266  ; Mass_Block_Size
0000cc  f8c81004          STR      r1,[r8,#4]            ;274  ; Mass_Memory_Size
0000d0  e003              B        |L1.218|
                  |L1.210|
0000d2  a01b              ADR      r0,|L1.320|
0000d4  f7fffffe          BL       __2printf
                  |L1.216|
0000d8  2401              MOVS     r4,#1                 ;279
                  |L1.218|
0000da  4620              MOV      r0,r4                 ;288
0000dc  e7d3              B        |L1.134|
;;;290    
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      ||area_number.8||
                  |L1.228|
0000e4  2e2e5c2e          DCB      "..\\..\\User\\usb_mass\\mass_mal.c",0
0000e8  2e5c5573
0000ec  65725c75
0000f0  73625f6d
0000f4  6173735c
0000f8  6d617373
0000fc  5f6d616c
000100  2e6300  
000103  00                DCB      0
                  |L1.260|
000104  53445f49          DCB      "SD_Init() fail (%d) : file %s on line %d\r\n",0
000108  6e697428
00010c  29206661
000110  696c2028
000114  25642920
000118  3a206669
00011c  6c652025
000120  73206f6e
000124  206c696e
000128  65202564
00012c  0d0a00  
00012f  00                DCB      0
                  |L1.304|
                          DCD      0xadf1801d
                  |L1.308|
                          DCD      0xecf18015
                  |L1.312|
                          DCD      0xecf10095
                  |L1.316|
                          DCD      0xadf1001d
                  |L1.320|
000140  4d414c5f          DCB      "MAL_GetStatus(MASS_NAND) Fail\r\n",0
000144  47657453
000148  74617475
00014c  73284d41
000150  53535f4e
000154  414e4429
000158  20466169
00015c  6c0d0a00

                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  MAL_Init PROC
;;;46     */
;;;47     uint16_t MAL_Init(uint8_t lun)
000000  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	uint16_t status = MAL_OK;
000002  2400              MOVS     r4,#0
000004  b110              CBZ      r0,|L2.12|
;;;50     	
;;;51     	switch (lun)
000006  2801              CMP      r0,#1
000008  d114              BNE      |L2.52|
00000a  e00a              B        |L2.34|
                  |L2.12|
;;;52     	{
;;;53     		case MASS_SD:
;;;54     			status = SD_Init();
00000c  f7fffffe          BL       SD_Init
000010  0004              MOVS     r4,r0
;;;55     			if (status != SD_OK)		/* 初始化SDIO硬件设备（配置时钟、GPIO、中断并启动SD卡) */
000012  d00f              BEQ      |L2.52|
;;;56     			{
;;;57     				mass_printf_err("SD_Init() fail (%d) : file %s on line %d\r\n", status, __FILE__, __LINE__);		
000014  4601              MOV      r1,r0
000016  2339              MOVS     r3,#0x39
000018  a207              ADR      r2,|L2.56|
00001a  a00f              ADR      r0,|L2.88|
00001c  f7fffffe          BL       __2printf
;;;58     				status = MAL_FAIL;
000020  e007              B        |L2.50|
                  |L2.34|
;;;59     			}
;;;60     			else
;;;61     			{
;;;62     				mass_printf_ok("SD_Init() Ok\r\n");
;;;63     				status = MAL_OK;			
;;;64     			}
;;;65     			break;
;;;66     		
;;;67     		case MASS_NAND:
;;;68     			if (NAND_Init() != NAND_OK)	/* 初始化NAND Flash 硬件设备（配置时钟、FSMC、GPIO并使能FSMC */
000022  f7fffffe          BL       NAND_Init
000026  b128              CBZ      r0,|L2.52|
;;;69     			{
;;;70     				mass_printf_err("NAND_Init() fail : file %s on line %d\r\n", __FILE__, __LINE__);			
000028  2246              MOVS     r2,#0x46
00002a  a103              ADR      r1,|L2.56|
00002c  a015              ADR      r0,|L2.132|
00002e  f7fffffe          BL       __2printf
                  |L2.50|
;;;71     				status = MAL_FAIL;
000032  2401              MOVS     r4,#1
                  |L2.52|
;;;72     			}
;;;73     			else
;;;74     			{
;;;75     				mass_printf_ok("NAND_Init() Ok\r\n");
;;;76     				status = MAL_OK;
;;;77     			}
;;;78     			break;
;;;79     		
;;;80     		default:
;;;81     			break;
;;;82     	}
;;;83     	
;;;84     	return status;
000034  4620              MOV      r0,r4
;;;85     }
000036  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  |L2.56|
000038  2e2e5c2e          DCB      "..\\..\\User\\usb_mass\\mass_mal.c",0
00003c  2e5c5573
000040  65725c75
000044  73625f6d
000048  6173735c
00004c  6d617373
000050  5f6d616c
000054  2e6300  
000057  00                DCB      0
                  |L2.88|
000058  53445f49          DCB      "SD_Init() fail (%d) : file %s on line %d\r\n",0
00005c  6e697428
000060  29206661
000064  696c2028
000068  25642920
00006c  3a206669
000070  6c652025
000074  73206f6e
000078  206c696e
00007c  65202564
000080  0d0a00  
000083  00                DCB      0
                  |L2.132|
000084  4e414e44          DCB      "NAND_Init() fail : file %s on line %d\r\n",0
000088  5f496e69
00008c  74282920
000090  6661696c
000094  203a2066
000098  696c6520
00009c  2573206f
0000a0  6e206c69
0000a4  6e652025
0000a8  640d0a00

                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  MAL_Read PROC
;;;149    */
;;;150    uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;151    {
000004  461e              MOV      r6,r3
000006  4617              MOV      r7,r2
000008  460d              MOV      r5,r1
;;;152    	uint16_t status = MAL_OK;
00000a  2400              MOVS     r4,#0
00000c  b110              CBZ      r0,|L3.20|
;;;153    	
;;;154    	switch (lun)
00000e  2801              CMP      r0,#1
000010  d124              BNE      |L3.92|
000012  e017              B        |L3.68|
                  |L3.20|
;;;155    	{
;;;156    		case MASS_SD:
;;;157    			SD_ReadMultiBlocks((uint8_t*)Readbuff, Memory_Offset, Transfer_Length, 1);
000014  2001              MOVS     r0,#1
000016  e9cd6000          STRD     r6,r0,[sp,#0]
00001a  460a              MOV      r2,r1
00001c  2300              MOVS     r3,#0
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       SD_ReadMultiBlocks
;;;158    			status = SD_WaitReadOperation();
000024  f7fffffe          BL       SD_WaitReadOperation
000028  ea4f0400          MOV.W    r4,r0
                  |L3.44|
;;;159    			while(SD_GetStatus() != SD_TRANSFER_OK)
00002c  f7fffffe          BL       SD_GetStatus
000030  2800              CMP      r0,#0
000032  d1fb              BNE      |L3.44|
;;;160    			{
;;;161    			}
;;;162          			
;;;163    			if (status != SD_OK)
000034  b194              CBZ      r4,|L3.92|
;;;164    			{
;;;165    				mass_printf_err("SD_ReadBlock(, 0x%X, 0x%X) Fail(%d) \r\n", Memory_Offset, Transfer_Length, status);
000036  4623              MOV      r3,r4
000038  4632              MOV      r2,r6
00003a  4629              MOV      r1,r5
00003c  a009              ADR      r0,|L3.100|
00003e  f7fffffe          BL       __2printf
;;;166    				status = MAL_FAIL;
000042  e00a              B        |L3.90|
                  |L3.68|
;;;167    			}
;;;168    			else
;;;169    			{
;;;170    				mass_printf_ok("SD_ReadBlock(, 0x%X, 0x%X) Ok\r\n", Memory_Offset, Transfer_Length);			
;;;171    				status = MAL_OK;
;;;172    			}			
;;;173    			break;
;;;174    	
;;;175    		case MASS_NAND:
;;;176    			if (NAND_Read(Memory_Offset, Readbuff, Transfer_Length) != NAND_OK)
000044  461a              MOV      r2,r3
000046  4639              MOV      r1,r7
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       NAND_Read
00004e  b128              CBZ      r0,|L3.92|
;;;177    			{
;;;178    				mass_printf_err("NAND_Read(0x%X, ,0x%X) Fail\r\n", Memory_Offset, Transfer_Length);
000050  4632              MOV      r2,r6
000052  4629              MOV      r1,r5
000054  a00d              ADR      r0,|L3.140|
000056  f7fffffe          BL       __2printf
                  |L3.90|
;;;179    				status = MAL_FAIL;
00005a  2401              MOVS     r4,#1
                  |L3.92|
;;;180    			}
;;;181    			else
;;;182    			{
;;;183    				mass_printf_ok("NAND_Read(0x%X, ,0x%X) Ok\r\n", Memory_Offset, Transfer_Length);			
;;;184    				status = MAL_OK;
;;;185    			}			
;;;186    			break;
;;;187    			
;;;188    		default:
;;;189    			break;
;;;190    	}
;;;191    	return status;
00005c  4620              MOV      r0,r4
;;;192    }
00005e  e8bd81fc          POP      {r2-r8,pc}
;;;193    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
000064  53445f52          DCB      "SD_ReadBlock(, 0x%X, 0x%X) Fail(%d) \r\n",0
000068  65616442
00006c  6c6f636b
000070  282c2030
000074  7825582c
000078  20307825
00007c  58292046
000080  61696c28
000084  25642920
000088  0d0a00  
00008b  00                DCB      0
                  |L3.140|
00008c  4e414e44          DCB      "NAND_Read(0x%X, ,0x%X) Fail\r\n",0
000090  5f526561
000094  64283078
000098  25582c20
00009c  2c307825
0000a0  58292046
0000a4  61696c0d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  MAL_Write PROC
;;;97     */
;;;98     uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Length)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;99     {
000004  461e              MOV      r6,r3
000006  4617              MOV      r7,r2
000008  460d              MOV      r5,r1
;;;100    	uint16_t status = MAL_OK;
00000a  2400              MOVS     r4,#0
00000c  b110              CBZ      r0,|L4.20|
;;;101    		
;;;102    	switch (lun)
00000e  2801              CMP      r0,#1
000010  d124              BNE      |L4.92|
000012  e017              B        |L4.68|
                  |L4.20|
;;;103    	{
;;;104    		case MASS_SD:
;;;105    			status = SD_WriteMultiBlocks((uint8_t*)Writebuff, Memory_Offset, Transfer_Length, 1);
000014  2001              MOVS     r0,#1
000016  e9cd6000          STRD     r6,r0,[sp,#0]
00001a  460a              MOV      r2,r1
00001c  2300              MOVS     r3,#0
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       SD_WriteMultiBlocks
;;;106    			status = SD_WaitWriteOperation();  
000024  f7fffffe          BL       SD_WaitWriteOperation
000028  ea4f0400          MOV.W    r4,r0
                  |L4.44|
;;;107    			while(SD_GetStatus() != SD_TRANSFER_OK);
00002c  f7fffffe          BL       SD_GetStatus
000030  2800              CMP      r0,#0
000032  d1fb              BNE      |L4.44|
;;;108          			
;;;109    			if (status != SD_OK)
000034  b194              CBZ      r4,|L4.92|
;;;110    			{
;;;111    				mass_printf_err("SD_WriteBlock(, 0x%X, 0x%X) Fail(%d) \r\n", Memory_Offset, Transfer_Length, status);				
000036  4623              MOV      r3,r4
000038  4632              MOV      r2,r6
00003a  4629              MOV      r1,r5
00003c  a009              ADR      r0,|L4.100|
00003e  f7fffffe          BL       __2printf
;;;112    				status = MAL_FAIL;
000042  e00a              B        |L4.90|
                  |L4.68|
;;;113    			}
;;;114    			else
;;;115    			{
;;;116    				mass_printf_ok("SD_WriteBlock(, 0x%X, 0x%X) Ok\r\n", Memory_Offset, Transfer_Length);			
;;;117    			}
;;;118    			break;
;;;119    		
;;;120    		case MASS_NAND:
;;;121    			if (NAND_Write(Memory_Offset, Writebuff, Transfer_Length) != NAND_OK)
000044  461a              MOV      r2,r3
000046  4639              MOV      r1,r7
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       NAND_Write
00004e  b128              CBZ      r0,|L4.92|
;;;122    			{
;;;123    				mass_printf_err("NAND_Write(0x%X, ,0x%X) Fail\r\n", Memory_Offset, Transfer_Length);
000050  4632              MOV      r2,r6
000052  4629              MOV      r1,r5
000054  a00d              ADR      r0,|L4.140|
000056  f7fffffe          BL       __2printf
                  |L4.90|
;;;124    				status = MAL_FAIL;
00005a  2401              MOVS     r4,#1
                  |L4.92|
;;;125    			}
;;;126    			else
;;;127    			{
;;;128    				mass_printf_ok("NAND_Write(0x%X, ,0x%X) Ok\r\n", Memory_Offset, Transfer_Length);			
;;;129    				status = MAL_OK;
;;;130    			}
;;;131    			break;
;;;132    		
;;;133    		default:
;;;134    			break;
;;;135    	}
;;;136    	return status;
00005c  4620              MOV      r0,r4
;;;137    }
00005e  e8bd81fc          POP      {r2-r8,pc}
;;;138    
                          ENDP

000062  0000              DCW      0x0000
                  |L4.100|
000064  53445f57          DCB      "SD_WriteBlock(, 0x%X, 0x%X) Fail(%d) \r\n",0
000068  72697465
00006c  426c6f63
000070  6b282c20
000074  30782558
000078  2c203078
00007c  25582920
000080  4661696c
000084  28256429
000088  200d0a00
                  |L4.140|
00008c  4e414e44          DCB      "NAND_Write(0x%X, ,0x%X) Fail\r\n",0
000090  5f577269
000094  74652830
000098  7825582c
00009c  202c3078
0000a0  25582920
0000a4  4661696c
0000a8  0d0a00  
0000ab  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  Max_Lun
                          DCD      0x00000001

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  Mass_Memory_Size
                          %        8
                  Mass_Block_Size
                          %        8
                  Mass_Block_Count
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\usb_mass\\mass_mal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Max_Lun____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_mass_mal_c_Max_Lun____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Max_Lun____REVSH|
#line 128
|__asm___10_mass_mal_c_Max_Lun____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
