; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usb_istr.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\usb_istr.crf ..\..\User\usb_mass\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;76     *******************************************************************************/
;;;77     void USB_Istr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;78     {
;;;79     
;;;80       wIstr = _GetISTR();
000002  4d0d              LDR      r5,|L1.56|
000004  6828              LDR      r0,[r5,#0]
000006  4c0d              LDR      r4,|L1.60|
000008  8020              STRH     r0,[r4,#0]
;;;81     
;;;82     #if (IMR_MSK & ISTR_CTR)
;;;83       if (wIstr & ISTR_CTR & wInterrupt_Mask)
00000a  8820              LDRH     r0,[r4,#0]  ; wIstr
00000c  4e0c              LDR      r6,|L1.64|
00000e  8831              LDRH     r1,[r6,#0]  ; wInterrupt_Mask
000010  4008              ANDS     r0,r0,r1
000012  0400              LSLS     r0,r0,#16
000014  d501              BPL      |L1.26|
;;;84       {
;;;85         /* servicing of the endpoint correct transfer interrupt */
;;;86         /* clear of the CTR flag into the sub */
;;;87         CTR_LP();
000016  f7fffffe          BL       CTR_LP
                  |L1.26|
;;;88     #ifdef CTR_CALLBACK
;;;89         CTR_Callback();
;;;90     #endif
;;;91       }
;;;92     #endif  
;;;93       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;94     #if (IMR_MSK & ISTR_RESET)
;;;95       if (wIstr & ISTR_RESET & wInterrupt_Mask)
00001a  8820              LDRH     r0,[r4,#0]  ; wIstr
00001c  8831              LDRH     r1,[r6,#0]  ; wInterrupt_Mask
00001e  4008              ANDS     r0,r0,r1
000020  0540              LSLS     r0,r0,#21
000022  d507              BPL      |L1.52|
;;;96       {
;;;97         _SetISTR((uint16_t)CLR_RESET);
000024  f64f30ff          MOV      r0,#0xfbff
000028  6028              STR      r0,[r5,#0]
;;;98         Device_Property.Reset();
00002a  4806              LDR      r0,|L1.68|
00002c  6840              LDR      r0,[r0,#4]  ; Device_Property
00002e  e8bd4070          POP      {r4-r6,lr}
000032  4700              BX       r0
                  |L1.52|
;;;99     #ifdef RESET_CALLBACK
;;;100        RESET_Callback();
;;;101    #endif
;;;102      }
;;;103    #endif
;;;104      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;105    #if (IMR_MSK & ISTR_DOVR)
;;;106      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;107      {
;;;108        _SetISTR((uint16_t)CLR_DOVR);
;;;109    #ifdef DOVR_CALLBACK
;;;110        DOVR_Callback();
;;;111    #endif
;;;112      }
;;;113    #endif
;;;114      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;115    #if (IMR_MSK & ISTR_ERR)
;;;116      if (wIstr & ISTR_ERR & wInterrupt_Mask)
;;;117      {
;;;118        _SetISTR((uint16_t)CLR_ERR);
;;;119    #ifdef ERR_CALLBACK
;;;120        ERR_Callback();
;;;121    #endif
;;;122      }
;;;123    #endif
;;;124      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;125    #if (IMR_MSK & ISTR_WKUP)
;;;126      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
;;;127      {
;;;128        _SetISTR((uint16_t)CLR_WKUP);
;;;129        Resume(RESUME_EXTERNAL);
;;;130    #ifdef WKUP_CALLBACK
;;;131        WKUP_Callback();
;;;132    #endif
;;;133      }
;;;134    #endif
;;;135      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;136    #if (IMR_MSK & ISTR_SUSP)
;;;137      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
;;;138      {
;;;139    
;;;140        /* check if SUSPEND is possible */
;;;141        if (fSuspendEnabled)
;;;142        {
;;;143          Suspend();
;;;144        }
;;;145        else
;;;146        {
;;;147          /* if not possible then resume after xx ms */
;;;148          Resume(RESUME_LATER);
;;;149        }
;;;150        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;151        _SetISTR((uint16_t)CLR_SUSP);
;;;152    #ifdef SUSP_CALLBACK
;;;153        SUSP_Callback();
;;;154    #endif
;;;155      }
;;;156    #endif
;;;157      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;158    #if (IMR_MSK & ISTR_SOF)
;;;159      if (wIstr & ISTR_SOF & wInterrupt_Mask)
;;;160      {
;;;161        _SetISTR((uint16_t)CLR_SOF);
;;;162        bIntPackSOF++;
;;;163    
;;;164    #ifdef SOF_CALLBACK
;;;165        SOF_Callback();
;;;166    #endif
;;;167      }
;;;168    #endif
;;;169      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;170    #if (IMR_MSK & ISTR_ESOF)
;;;171      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
;;;172      {
;;;173        _SetISTR((uint16_t)CLR_ESOF);
;;;174        /* resume handling timing is made with ESOFs */
;;;175        Resume(RESUME_ESOF); /* request without change of the machine state */
;;;176    
;;;177    #ifdef ESOF_CALLBACK
;;;178        ESOF_Callback();
;;;179    #endif
;;;180      }
;;;181    #endif
;;;182    } /* USB_Istr */
000034  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      0x40005c44
                  |L1.60|
                          DCD      ||area_number.7||
                  |L1.64|
                          DCD      wInterrupt_Mask
                  |L1.68|
                          DCD      Device_Property

                          AREA ||.data||, DATA, ALIGN=0

                  bIntPackSOF
000000  00                DCB      0x00

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      EP2_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.7||, DATA, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.data||
                  wIstr
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\usb_mass\\usb_istr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_istr_c_e9471872____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REVSH|
#line 128
|__asm___10_usb_istr_c_e9471872____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
