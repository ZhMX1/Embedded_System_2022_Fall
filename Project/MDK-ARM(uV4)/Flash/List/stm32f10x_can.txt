; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f10x_can.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\stm32f10x_can.crf ..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c]
                          THUMB

                          AREA ||i.CAN_CancelTransmit||, CODE, READONLY, ALIGN=1

                  CAN_CancelTransmit PROC
;;;648      */
;;;649    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
000000  b141              CBZ      r1,|L1.20|
;;;650    {
;;;651      /* Check the parameters */
;;;652      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;653      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;654      /* abort transmission */
;;;655      switch (Mailbox)
000002  2901              CMP      r1,#1
000004  d00a              BEQ      |L1.28|
000006  2902              CMP      r1,#2
000008  d103              BNE      |L1.18|
;;;656      {
;;;657        case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
;;;658          break;
;;;659        case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
;;;660          break;
;;;661        case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
00000a  6881              LDR      r1,[r0,#8]
00000c  f4410100          ORR      r1,r1,#0x800000
                  |L1.16|
000010  6081              STR      r1,[r0,#8]
                  |L1.18|
;;;662          break;
;;;663        default:
;;;664          break;
;;;665      }
;;;666    }
000012  4770              BX       lr
                  |L1.20|
000014  6881              LDR      r1,[r0,#8]            ;657
000016  f0410180          ORR      r1,r1,#0x80           ;657
00001a  e7f9              B        |L1.16|
                  |L1.28|
00001c  6881              LDR      r1,[r0,#8]            ;659
00001e  f4414100          ORR      r1,r1,#0x8000         ;659
000022  e7f5              B        |L1.16|
;;;667    
                          ENDP


                          AREA ||i.CAN_ClearFlag||, CODE, READONLY, ALIGN=2

                  CAN_ClearFlag PROC
;;;1148     */
;;;1149   void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  4a0a              LDR      r2,|L2.44|
;;;1150   {
;;;1151     uint32_t flagtmp=0;
;;;1152     /* Check the parameters */
;;;1153     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1154     assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
;;;1155     
;;;1156     if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
000002  4291              CMP      r1,r2
000004  d102              BNE      |L2.12|
;;;1157     {
;;;1158       /* Clear the selected CAN flags */
;;;1159       CANx->ESR = (uint32_t)RESET;
000006  2100              MOVS     r1,#0
000008  6181              STR      r1,[r0,#0x18]
;;;1160     }
;;;1161     else /* MSR or TSR or RF0R or RF1R */
;;;1162     {
;;;1163       flagtmp = CAN_FLAG & 0x000FFFFF;
;;;1164   
;;;1165       if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
;;;1166       {
;;;1167         /* Receive Flags */
;;;1168         CANx->RF0R = (uint32_t)(flagtmp);
;;;1169       }
;;;1170       else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
;;;1171       {
;;;1172         /* Receive Flags */
;;;1173         CANx->RF1R = (uint32_t)(flagtmp);
;;;1174       }
;;;1175       else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
;;;1176       {
;;;1177         /* Transmit Flags */
;;;1178         CANx->TSR = (uint32_t)(flagtmp);
;;;1179       }
;;;1180       else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
;;;1181       {
;;;1182         /* Operating mode Flags */
;;;1183         CANx->MSR = (uint32_t)(flagtmp);
;;;1184       }
;;;1185     }
;;;1186   }
00000a  4770              BX       lr
                  |L2.12|
00000c  f3c10213          UBFX     r2,r1,#0,#20          ;1163
000010  018b              LSLS     r3,r1,#6              ;1165
000012  d501              BPL      |L2.24|
000014  60c2              STR      r2,[r0,#0xc]          ;1168
000016  4770              BX       lr
                  |L2.24|
000018  014b              LSLS     r3,r1,#5              ;1170
00001a  d501              BPL      |L2.32|
00001c  6102              STR      r2,[r0,#0x10]         ;1173
00001e  4770              BX       lr
                  |L2.32|
000020  0109              LSLS     r1,r1,#4              ;1175
000022  d501              BPL      |L2.40|
000024  6082              STR      r2,[r0,#8]            ;1178
000026  4770              BX       lr
                  |L2.40|
000028  6042              STR      r2,[r0,#4]            ;1183
00002a  4770              BX       lr
;;;1187   
                          ENDP

                  |L2.44|
                          DCD      0x30f00070

                          AREA ||i.CAN_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CAN_ClearITPendingBit PROC
;;;1311     */
;;;1312   void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  b530              PUSH     {r4,r5,lr}
;;;1313   {
;;;1314     /* Check the parameters */
;;;1315     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1316     assert_param(IS_CAN_CLEAR_IT(CAN_IT));
;;;1317   
;;;1318     switch (CAN_IT)
;;;1319     {
;;;1320         case CAN_IT_TME:
;;;1321                 /* Clear CAN_TSR_RQCPx (rc_w1)*/
;;;1322   	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
;;;1323   	      break;
;;;1324         case CAN_IT_FF0:
;;;1325                 /* Clear CAN_RF0R_FULL0 (rc_w1)*/
;;;1326   	      CANx->RF0R = CAN_RF0R_FULL0; 
000002  2308              MOVS     r3,#8
;;;1327   	      break;
;;;1328         case CAN_IT_FOV0:
;;;1329                 /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
;;;1330   	      CANx->RF0R = CAN_RF0R_FOVR0; 
000004  2410              MOVS     r4,#0x10
;;;1331   	      break;
;;;1332         case CAN_IT_FF1:
;;;1333                 /* Clear CAN_RF1R_FULL1 (rc_w1)*/
;;;1334   	      CANx->RF1R = CAN_RF1R_FULL1;  
;;;1335   	      break;
;;;1336         case CAN_IT_FOV1:
;;;1337                 /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
;;;1338   	      CANx->RF1R = CAN_RF1R_FOVR1; 
;;;1339   	      break;
;;;1340         case CAN_IT_WKU:
;;;1341                 /* Clear CAN_MSR_WKUI (rc_w1)*/
;;;1342   	      CANx->MSR = CAN_MSR_WKUI;  
;;;1343   	      break;
;;;1344         case CAN_IT_SLK:
;;;1345                 /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
;;;1346   	      CANx->MSR = CAN_MSR_SLAKI;   
;;;1347   	      break;
;;;1348         case CAN_IT_EWG:
;;;1349                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1350   	      CANx->MSR = CAN_MSR_ERRI;
000006  2204              MOVS     r2,#4
000008  f5b17f00          CMP      r1,#0x200             ;1318
00000c  d01d              BEQ      |L3.74|
00000e  dc10              BGT      |L3.50|
000010  2920              CMP      r1,#0x20              ;1318
000012  d029              BEQ      |L3.104|
000014  dc07              BGT      |L3.38|
000016  2901              CMP      r1,#1                 ;1318
000018  d021              BEQ      |L3.94|
00001a  2904              CMP      r1,#4                 ;1318
00001c  d022              BEQ      |L3.100|
00001e  2908              CMP      r1,#8                 ;1318
000020  d100              BNE      |L3.36|
000022  60c4              STR      r4,[r0,#0xc]          ;1330
                  |L3.36|
;;;1351                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1352                           of the CAN Bus status*/ 
;;;1353   	      break;
;;;1354         case CAN_IT_EPV:
;;;1355                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1356   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1357                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1358                           of the CAN Bus status*/
;;;1359   	      break;
;;;1360         case CAN_IT_BOF:
;;;1361                 /* Clear CAN_MSR_ERRI (rc_w1) */ 
;;;1362   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1363                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1364                           of the CAN Bus status*/
;;;1365   	      break;
;;;1366         case CAN_IT_LEC:
;;;1367                 /*  Clear LEC bits */
;;;1368   	      CANx->ESR = RESET; 
;;;1369                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1370   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1371   	      break;
;;;1372         case CAN_IT_ERR:
;;;1373                 /*Clear LEC bits */
;;;1374   	      CANx->ESR = RESET; 
;;;1375                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1376   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1377   	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
;;;1378                     of the CAN Bus status*/
;;;1379   	      break;
;;;1380         default :
;;;1381   	      break;
;;;1382      }
;;;1383   }
000024  bd30              POP      {r4,r5,pc}
                  |L3.38|
000026  2940              CMP      r1,#0x40              ;1318
000028  d020              BEQ      |L3.108|
00002a  f5b17f80          CMP      r1,#0x100             ;1318
00002e  d1f9              BNE      |L3.36|
000030  e00b              B        |L3.74|
                  |L3.50|
000032  2500              MOVS     r5,#0                 ;1318
000034  f5b14f00          CMP      r1,#0x8000            ;1318
000038  d006              BEQ      |L3.72|
00003a  dc08              BGT      |L3.78|
00003c  f5b16f80          CMP      r1,#0x400             ;1318
000040  d003              BEQ      |L3.74|
000042  f5b16f00          CMP      r1,#0x800             ;1318
000046  d1ed              BNE      |L3.36|
                  |L3.72|
000048  6185              STR      r5,[r0,#0x18]         ;1374
                  |L3.74|
00004a  6042              STR      r2,[r0,#4]            ;1362
                  |L3.76|
00004c  bd30              POP      {r4,r5,pc}
                  |L3.78|
00004e  f5b13f80          CMP      r1,#0x10000           ;1318
000052  d00d              BEQ      |L3.112|
000054  f5b13f00          CMP      r1,#0x20000           ;1318
000058  d1f8              BNE      |L3.76|
00005a  6044              STR      r4,[r0,#4]            ;1346
00005c  bd30              POP      {r4,r5,pc}
                  |L3.94|
00005e  4905              LDR      r1,|L3.116|
000060  6081              STR      r1,[r0,#8]            ;1322
000062  bd30              POP      {r4,r5,pc}
                  |L3.100|
000064  60c3              STR      r3,[r0,#0xc]          ;1326
000066  bd30              POP      {r4,r5,pc}
                  |L3.104|
000068  6103              STR      r3,[r0,#0x10]         ;1334
00006a  bd30              POP      {r4,r5,pc}
                  |L3.108|
00006c  6104              STR      r4,[r0,#0x10]         ;1338
00006e  bd30              POP      {r4,r5,pc}
                  |L3.112|
000070  6043              STR      r3,[r0,#4]            ;1342
000072  bd30              POP      {r4,r5,pc}
;;;1384   
                          ENDP

                  |L3.116|
                          DCD      0x00010101

                          AREA ||i.CAN_DBGFreeze||, CODE, READONLY, ALIGN=1

                  CAN_DBGFreeze PROC
;;;456      */
;;;457    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;458    {
;;;459      /* Check the parameters */
;;;460      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;461      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;462      
;;;463      if (NewState != DISABLE)
;;;464      {
;;;465        /* Enable Debug Freeze  */
;;;466        CANx->MCR |= MCR_DBF;
;;;467      }
;;;468      else
;;;469      {
;;;470        /* Disable Debug Freeze */
;;;471        CANx->MCR &= ~MCR_DBF;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L4.12|
000006  f4413180          ORR      r1,r1,#0x10000        ;466
00000a  e001              B        |L4.16|
                  |L4.12|
00000c  f4213180          BIC      r1,r1,#0x10000
                  |L4.16|
000010  6001              STR      r1,[r0,#0]            ;466
;;;472      }
;;;473    }
000012  4770              BX       lr
;;;474    
                          ENDP


                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;127      */
;;;128    void CAN_DeInit(CAN_TypeDef* CANx)
000000  4909              LDR      r1,|L5.40|
;;;129    {
000002  b510              PUSH     {r4,lr}
;;;130      /* Check the parameters */
;;;131      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;132     
;;;133      if (CANx == CAN1)
000004  4288              CMP      r0,r1
;;;134      {
;;;135        /* Enable CAN1 reset state */
;;;136        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
;;;137        /* Release CAN1 from reset state */
;;;138        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
;;;139      }
;;;140      else
;;;141      {  
;;;142        /* Enable CAN2 reset state */
;;;143        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
000006  f04f0101          MOV      r1,#1
00000a  d101              BNE      |L5.16|
00000c  064c              LSLS     r4,r1,#25             ;136
00000e  e001              B        |L5.20|
                  |L5.16|
000010  f04f6480          MOV      r4,#0x4000000
                  |L5.20|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;144        /* Release CAN2 from reset state */
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
00001a  4620              MOV      r0,r4
00001c  e8bd4010          POP      {r4,lr}
000020  2100              MOVS     r1,#0
000022  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;146      }
;;;147    }
;;;148    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x40006400

                          AREA ||i.CAN_FIFORelease||, CODE, READONLY, ALIGN=1

                  CAN_FIFORelease PROC
;;;725      */
;;;726    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  b121              CBZ      r1,|L6.12|
;;;727    {
;;;728      /* Check the parameters */
;;;729      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;730      assert_param(IS_CAN_FIFO(FIFONumber));
;;;731      /* Release FIFO0 */
;;;732      if (FIFONumber == CAN_FIFO0)
;;;733      {
;;;734        CANx->RF0R |= CAN_RF0R_RFOM0;
;;;735      }
;;;736      /* Release FIFO1 */
;;;737      else /* FIFONumber == CAN_FIFO1 */
;;;738      {
;;;739        CANx->RF1R |= CAN_RF1R_RFOM1;
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410120          ORR      r1,r1,#0x20
000008  6101              STR      r1,[r0,#0x10]
;;;740      }
;;;741    }
00000a  4770              BX       lr
                  |L6.12|
00000c  68c1              LDR      r1,[r0,#0xc]          ;734
00000e  f0410120          ORR      r1,r1,#0x20           ;734
000012  60c1              STR      r1,[r0,#0xc]          ;734
000014  4770              BX       lr
;;;742    
                          ENDP


                          AREA ||i.CAN_FilterInit||, CODE, READONLY, ALIGN=2

                  CAN_FilterInit PROC
;;;297      */
;;;298    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;299    {
;;;300      uint32_t filter_number_bit_pos = 0;
;;;301      /* Check the parameters */
;;;302      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;303      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;304      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;305      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;306      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;307    
;;;308      filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
000002  7a82              LDRB     r2,[r0,#0xa]
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;309    
;;;310      /* Initialisation mode for the filter */
;;;311      CAN1->FMR |= FMR_FINIT;
000008  4a2e              LDR      r2,|L7.196|
00000a  6813              LDR      r3,[r2,#0]
00000c  f0430301          ORR      r3,r3,#1
000010  6013              STR      r3,[r2,#0]
;;;312    
;;;313      /* Filter Deactivation */
;;;314      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000012  4b2c              LDR      r3,|L7.196|
000014  331c              ADDS     r3,r3,#0x1c
000016  681c              LDR      r4,[r3,#0]
000018  438c              BICS     r4,r4,r1
00001a  601c              STR      r4,[r3,#0]
;;;315    
;;;316      /* Filter Scale */
;;;317      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
;;;318      {
;;;319        /* 16-bit scale for the filter */
;;;320        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
00001c  4d29              LDR      r5,|L7.196|
00001e  7b06              LDRB     r6,[r0,#0xc]          ;317
;;;321    
;;;322        /* First 16-bit identifier and First 16-bit mask */
;;;323        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;324        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000020  4c29              LDR      r4,|L7.200|
000022  350c              ADDS     r5,r5,#0xc            ;320
000024  b9a6              CBNZ     r6,|L7.80|
000026  682e              LDR      r6,[r5,#0]            ;320
000028  438e              BICS     r6,r6,r1              ;320
00002a  602e              STR      r6,[r5,#0]            ;320
00002c  8846              LDRH     r6,[r0,#2]
00002e  88c7              LDRH     r7,[r0,#6]
000030  ea464607          ORR      r6,r6,r7,LSL #16
000034  7a87              LDRB     r7,[r0,#0xa]
000036  eb0407c7          ADD      r7,r4,r7,LSL #3
00003a  f8c76640          STR      r6,[r7,#0x640]
;;;325        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;326            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;327    
;;;328        /* Second 16-bit identifier and Second 16-bit mask */
;;;329        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;330        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
00003e  8806              LDRH     r6,[r0,#0]
000040  8887              LDRH     r7,[r0,#4]
000042  ea464607          ORR      r6,r6,r7,LSL #16
000046  7a87              LDRB     r7,[r0,#0xa]
000048  eb0407c7          ADD      r7,r4,r7,LSL #3
00004c  f8c76644          STR      r6,[r7,#0x644]
                  |L7.80|
;;;331        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;332            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;333      }
;;;334    
;;;335      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
000050  7b06              LDRB     r6,[r0,#0xc]
000052  2e01              CMP      r6,#1
000054  d112              BNE      |L7.124|
;;;336      {
;;;337        /* 32-bit scale for the filter */
;;;338        CAN1->FS1R |= filter_number_bit_pos;
000056  682e              LDR      r6,[r5,#0]
000058  430e              ORRS     r6,r6,r1
00005a  602e              STR      r6,[r5,#0]
;;;339        /* 32-bit identifier or First 32-bit identifier */
;;;340        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
00005c  7a86              LDRB     r6,[r0,#0xa]
00005e  6805              LDR      r5,[r0,#0]
000060  eb0406c6          ADD      r6,r4,r6,LSL #3
000064  ea4f4535          ROR      r5,r5,#16
000068  f8c65640          STR      r5,[r6,#0x640]
;;;341        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;342            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;343        /* 32-bit mask or Second 32-bit identifier */
;;;344        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
00006c  7a86              LDRB     r6,[r0,#0xa]
00006e  6845              LDR      r5,[r0,#4]
000070  eb0404c6          ADD      r4,r4,r6,LSL #3
000074  ea4f4535          ROR      r5,r5,#16
000078  f8c45644          STR      r5,[r4,#0x644]
                  |L7.124|
;;;345        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;346            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;347      }
;;;348    
;;;349      /* Filter Mode */
;;;350      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
;;;351      {
;;;352        /*Id/Mask mode for the filter*/
;;;353        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
00007c  4c11              LDR      r4,|L7.196|
00007e  7ac5              LDRB     r5,[r0,#0xb]          ;350
000080  1d24              ADDS     r4,r4,#4
000082  2d00              CMP      r5,#0                 ;350
;;;354      }
;;;355      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;356      {
;;;357        /*Identifier list mode for the filter*/
;;;358        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
000084  6825              LDR      r5,[r4,#0]
000086  d006              BEQ      |L7.150|
000088  430d              ORRS     r5,r5,r1
                  |L7.138|
00008a  6025              STR      r5,[r4,#0]
;;;359      }
;;;360    
;;;361      /* Filter FIFO assignment */
;;;362      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
;;;363      {
;;;364        /* FIFO 0 assignation for the filter */
;;;365        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
00008c  4c0d              LDR      r4,|L7.196|
00008e  8905              LDRH     r5,[r0,#8]            ;362
000090  3414              ADDS     r4,r4,#0x14
000092  b115              CBZ      r5,|L7.154|
000094  e004              B        |L7.160|
                  |L7.150|
000096  438d              BICS     r5,r5,r1              ;353
000098  e7f7              B        |L7.138|
                  |L7.154|
00009a  6825              LDR      r5,[r4,#0]
00009c  438d              BICS     r5,r5,r1
00009e  6025              STR      r5,[r4,#0]
                  |L7.160|
;;;366      }
;;;367    
;;;368      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
0000a0  8905              LDRH     r5,[r0,#8]
0000a2  2d01              CMP      r5,#1
0000a4  d102              BNE      |L7.172|
;;;369      {
;;;370        /* FIFO 1 assignation for the filter */
;;;371        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
0000a6  6825              LDR      r5,[r4,#0]
0000a8  430d              ORRS     r5,r5,r1
0000aa  6025              STR      r5,[r4,#0]
                  |L7.172|
;;;372      }
;;;373      
;;;374      /* Filter activation */
;;;375      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
0000ac  7b40              LDRB     r0,[r0,#0xd]
0000ae  2801              CMP      r0,#1
0000b0  d102              BNE      |L7.184|
;;;376      {
;;;377        CAN1->FA1R |= filter_number_bit_pos;
0000b2  6818              LDR      r0,[r3,#0]
0000b4  4308              ORRS     r0,r0,r1
0000b6  6018              STR      r0,[r3,#0]
                  |L7.184|
;;;378      }
;;;379    
;;;380      /* Leave the initialisation mode for the filter */
;;;381      CAN1->FMR &= ~FMR_FINIT;
0000b8  6810              LDR      r0,[r2,#0]
0000ba  f0200001          BIC      r0,r0,#1
0000be  6010              STR      r0,[r2,#0]
;;;382    }
0000c0  bdf0              POP      {r4-r7,pc}
;;;383    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L7.196|
                          DCD      0x40006600
                  |L7.200|
                          DCD      0x40006000

                          AREA ||i.CAN_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  CAN_GetFlagStatus PROC
;;;1048     */
;;;1049   FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  4602              MOV      r2,r0
;;;1050   {
;;;1051     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1052     
;;;1053     /* Check the parameters */
;;;1054     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1055     assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
;;;1056     
;;;1057   
;;;1058     if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
000004  f4110f70          TST      r1,#0xf00000
000008  d003              BEQ      |L8.18|
;;;1059     { 
;;;1060       /* Check the status of the specified CAN flag */
;;;1061       if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00000a  6992              LDR      r2,[r2,#0x18]
00000c  e004              B        |L8.24|
                  |L8.14|
;;;1062       { 
;;;1063         /* CAN_FLAG is set */
;;;1064         bitstatus = SET;
00000e  2001              MOVS     r0,#1
;;;1065       }
;;;1066       else
;;;1067       { 
;;;1068         /* CAN_FLAG is reset */
;;;1069         bitstatus = RESET;
;;;1070       }
;;;1071     }
;;;1072     else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
;;;1073     { 
;;;1074       /* Check the status of the specified CAN flag */
;;;1075       if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1076       { 
;;;1077         /* CAN_FLAG is set */
;;;1078         bitstatus = SET;
;;;1079       }
;;;1080       else
;;;1081       { 
;;;1082         /* CAN_FLAG is reset */
;;;1083         bitstatus = RESET;
;;;1084       }
;;;1085     }
;;;1086     else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
;;;1087     { 
;;;1088       /* Check the status of the specified CAN flag */
;;;1089       if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1090       { 
;;;1091         /* CAN_FLAG is set */
;;;1092         bitstatus = SET;
;;;1093       }
;;;1094       else
;;;1095       { 
;;;1096         /* CAN_FLAG is reset */
;;;1097         bitstatus = RESET;
;;;1098       }
;;;1099     }
;;;1100     else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
;;;1101     { 
;;;1102       /* Check the status of the specified CAN flag */
;;;1103       if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1104       { 
;;;1105         /* CAN_FLAG is set */
;;;1106         bitstatus = SET;
;;;1107       }
;;;1108       else
;;;1109       { 
;;;1110         /* CAN_FLAG is reset */
;;;1111         bitstatus = RESET;
;;;1112       }
;;;1113     }
;;;1114     else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
;;;1115     { 
;;;1116       /* Check the status of the specified CAN flag */
;;;1117       if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1118       { 
;;;1119         /* CAN_FLAG is set */
;;;1120         bitstatus = SET;
;;;1121       }
;;;1122       else
;;;1123       { 
;;;1124         /* CAN_FLAG is reset */
;;;1125         bitstatus = RESET;
;;;1126       }
;;;1127     }
;;;1128     /* Return the CAN_FLAG status */
;;;1129     return  bitstatus;
;;;1130   }
000010  4770              BX       lr
                  |L8.18|
000012  01cb              LSLS     r3,r1,#7              ;1072
000014  d504              BPL      |L8.32|
000016  6852              LDR      r2,[r2,#4]            ;1075
                  |L8.24|
000018  400a              ANDS     r2,r2,r1              ;1061
00001a  0311              LSLS     r1,r2,#12             ;1061
00001c  d1f7              BNE      |L8.14|
00001e  4770              BX       lr
                  |L8.32|
000020  010b              LSLS     r3,r1,#4
000022  d501              BPL      |L8.40|
000024  6892              LDR      r2,[r2,#8]            ;1089
000026  e7f7              B        |L8.24|
                  |L8.40|
000028  018b              LSLS     r3,r1,#6              ;1100
00002a  d501              BPL      |L8.48|
00002c  68d2              LDR      r2,[r2,#0xc]          ;1103
00002e  e7f3              B        |L8.24|
                  |L8.48|
000030  6912              LDR      r2,[r2,#0x10]         ;1117
000032  e7f1              B        |L8.24|
;;;1131   
                          ENDP


                          AREA ||i.CAN_GetITStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetITStatus PROC
;;;1208     */
;;;1209   ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  4602              MOV      r2,r0
;;;1210   {
;;;1211     ITStatus itstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1212     /* Check the parameters */
;;;1213     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1214     assert_param(IS_CAN_IT(CAN_IT));
;;;1215     
;;;1216     /* check the enable interrupt bit */
;;;1217    if((CANx->IER & CAN_IT) != RESET)
000004  6953              LDR      r3,[r2,#0x14]
000006  420b              TST      r3,r1
000008  d04a              BEQ      |L9.160|
;;;1218    {
;;;1219      /* in case the Interrupt is enabled, .... */
;;;1220       switch (CAN_IT)
00000a  f5b17f80          CMP      r1,#0x100
00000e  d03b              BEQ      |L9.136|
000010  dc13              BGT      |L9.58|
000012  2908              CMP      r1,#8
000014  d02e              BEQ      |L9.116|
000016  dc07              BGT      |L9.40|
000018  2901              CMP      r1,#1
00001a  d026              BEQ      |L9.106|
00001c  2902              CMP      r1,#2
00001e  d027              BEQ      |L9.112|
000020  2904              CMP      r1,#4
000022  d13d              BNE      |L9.160|
;;;1221       {
;;;1222         case CAN_IT_TME:
;;;1223                  /* Check CAN_TSR_RQCPx bits */
;;;1224   	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
;;;1225   	      break;
;;;1226         case CAN_IT_FMP0:
;;;1227                  /* Check CAN_RF0R_FMP0 bit */
;;;1228   	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
;;;1229   	      break;
;;;1230         case CAN_IT_FF0:
;;;1231                  /* Check CAN_RF0R_FULL0 bit */
;;;1232                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
000024  68d0              LDR      r0,[r2,#0xc]
;;;1233   	      break;
000026  e02b              B        |L9.128|
                  |L9.40|
000028  2910              CMP      r1,#0x10              ;1220
00002a  d025              BEQ      |L9.120|
00002c  2920              CMP      r1,#0x20              ;1220
00002e  d026              BEQ      |L9.126|
000030  2940              CMP      r1,#0x40              ;1220
000032  d135              BNE      |L9.160|
;;;1234         case CAN_IT_FOV0:
;;;1235                  /* Check CAN_RF0R_FOVR0 bit */
;;;1236                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
;;;1237   	      break;
;;;1238         case CAN_IT_FMP1:
;;;1239                  /* Check CAN_RF1R_FMP1 bit */
;;;1240                  itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
;;;1241   	      break;
;;;1242         case CAN_IT_FF1:
;;;1243                  /* Check CAN_RF1R_FULL1 bit */
;;;1244   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
;;;1245   	      break;
;;;1246         case CAN_IT_FOV1:
;;;1247                  /* Check CAN_RF1R_FOVR1 bit */
;;;1248   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
000034  6910              LDR      r0,[r2,#0x10]
                  |L9.54|
000036  2110              MOVS     r1,#0x10              ;1236
000038  e030              B        |L9.156|
                  |L9.58|
00003a  f5b14f00          CMP      r1,#0x8000            ;1220
00003e  d02b              BEQ      |L9.152|
000040  dc0b              BGT      |L9.90|
000042  f5b17f00          CMP      r1,#0x200             ;1220
000046  d022              BEQ      |L9.142|
000048  f5b16f80          CMP      r1,#0x400             ;1220
00004c  d022              BEQ      |L9.148|
00004e  f5b16f00          CMP      r1,#0x800             ;1220
000052  d125              BNE      |L9.160|
;;;1249   	      break;
;;;1250         case CAN_IT_WKU:
;;;1251                  /* Check CAN_MSR_WKUI bit */
;;;1252                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
;;;1253   	      break;
;;;1254         case CAN_IT_SLK:
;;;1255                  /* Check CAN_MSR_SLAKI bit */
;;;1256   	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
;;;1257   	      break;
;;;1258         case CAN_IT_EWG:
;;;1259                  /* Check CAN_ESR_EWGF bit */
;;;1260   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
;;;1261   	      break;
;;;1262         case CAN_IT_EPV:
;;;1263                  /* Check CAN_ESR_EPVF bit */
;;;1264   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
;;;1265   	      break;
;;;1266         case CAN_IT_BOF:
;;;1267                  /* Check CAN_ESR_BOFF bit */
;;;1268   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
;;;1269   	      break;
;;;1270         case CAN_IT_LEC:
;;;1271                  /* Check CAN_ESR_LEC bit */
;;;1272   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
000054  6990              LDR      r0,[r2,#0x18]
000056  2170              MOVS     r1,#0x70
;;;1273   	      break;
000058  e020              B        |L9.156|
                  |L9.90|
00005a  f5b13f80          CMP      r1,#0x10000           ;1220
00005e  d011              BEQ      |L9.132|
000060  f5b13f00          CMP      r1,#0x20000           ;1220
000064  d11c              BNE      |L9.160|
000066  6850              LDR      r0,[r2,#4]            ;1256
000068  e7e5              B        |L9.54|
                  |L9.106|
00006a  6890              LDR      r0,[r2,#8]            ;1224
00006c  490d              LDR      r1,|L9.164|
00006e  e015              B        |L9.156|
                  |L9.112|
000070  68d0              LDR      r0,[r2,#0xc]          ;1228
000072  e002              B        |L9.122|
                  |L9.116|
000074  68d0              LDR      r0,[r2,#0xc]          ;1236
000076  e7de              B        |L9.54|
                  |L9.120|
000078  6910              LDR      r0,[r2,#0x10]         ;1240
                  |L9.122|
00007a  2103              MOVS     r1,#3                 ;1228
00007c  e00e              B        |L9.156|
                  |L9.126|
00007e  6910              LDR      r0,[r2,#0x10]         ;1244
                  |L9.128|
000080  2108              MOVS     r1,#8                 ;1232
000082  e00b              B        |L9.156|
                  |L9.132|
000084  6850              LDR      r0,[r2,#4]            ;1252
000086  e7fb              B        |L9.128|
                  |L9.136|
000088  6990              LDR      r0,[r2,#0x18]         ;1260
00008a  2101              MOVS     r1,#1                 ;1260
00008c  e006              B        |L9.156|
                  |L9.142|
00008e  6990              LDR      r0,[r2,#0x18]         ;1264
000090  2102              MOVS     r1,#2                 ;1264
000092  e003              B        |L9.156|
                  |L9.148|
000094  6990              LDR      r0,[r2,#0x18]         ;1268
000096  e000              B        |L9.154|
                  |L9.152|
;;;1274         case CAN_IT_ERR:
;;;1275                  /* Check CAN_MSR_ERRI bit */ 
;;;1276                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
000098  6850              LDR      r0,[r2,#4]
                  |L9.154|
00009a  2104              MOVS     r1,#4                 ;1268
                  |L9.156|
00009c  f7ffbffe          B.W      CheckITStatus
                  |L9.160|
;;;1277   	      break;
;;;1278         default :
;;;1279                  /* in case of error, return RESET */
;;;1280                 itstatus = RESET;
;;;1281                 break;
;;;1282       }
;;;1283     }
;;;1284     else
;;;1285     {
;;;1286      /* in case the Interrupt is not enabled, return RESET */
;;;1287       itstatus  = RESET;
;;;1288     }
;;;1289     
;;;1290     /* Return the CAN_IT status */
;;;1291     return  itstatus;
;;;1292   }
0000a0  4770              BX       lr
;;;1293   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L9.164|
                          DCD      0x00010101

                          AREA ||i.CAN_GetLSBTransmitErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetLSBTransmitErrorCounter PROC
;;;971      */
;;;972    uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
000000  6980              LDR      r0,[r0,#0x18]
;;;973    {
;;;974      uint8_t counter=0;
;;;975      
;;;976      /* Check the parameters */
;;;977      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;978      
;;;979      /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;980      counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
000002  f3c04007          UBFX     r0,r0,#16,#8
;;;981      
;;;982      /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;983      return counter;
;;;984    }
000006  4770              BX       lr
;;;985    
                          ENDP


                          AREA ||i.CAN_GetLastErrorCode||, CODE, READONLY, ALIGN=1

                  CAN_GetLastErrorCode PROC
;;;927     
;;;928    uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
000000  6980              LDR      r0,[r0,#0x18]
;;;929    {
;;;930      uint8_t errorcode=0;
;;;931      
;;;932      /* Check the parameters */
;;;933      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;934      
;;;935      /* Get the error code*/
;;;936      errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
000002  f3c01002          UBFX     r0,r0,#4,#3
000006  0100              LSLS     r0,r0,#4
;;;937      
;;;938      /* Return the error code*/
;;;939      return errorcode;
;;;940    }
000008  4770              BX       lr
;;;941    /**
                          ENDP


                          AREA ||i.CAN_GetReceiveErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetReceiveErrorCounter PROC
;;;951      */
;;;952    uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
000000  6980              LDR      r0,[r0,#0x18]
;;;953    {
;;;954      uint8_t counter=0;
;;;955      
;;;956      /* Check the parameters */
;;;957      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;958      
;;;959      /* Get the Receive Error Counter*/
;;;960      counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
000002  0e00              LSRS     r0,r0,#24
;;;961      
;;;962      /* Return the Receive Error Counter*/
;;;963      return counter;
;;;964    }
000004  4770              BX       lr
;;;965    
                          ENDP


                          AREA ||i.CAN_ITConfig||, CODE, READONLY, ALIGN=1

                  CAN_ITConfig PROC
;;;1008     */
;;;1009   void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;1010   {
;;;1011     /* Check the parameters */
;;;1012     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1013     assert_param(IS_CAN_IT(CAN_IT));
;;;1014     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1015   
;;;1016     if (NewState != DISABLE)
;;;1017     {
;;;1018       /* Enable the selected CANx interrupt */
;;;1019       CANx->IER |= CAN_IT;
;;;1020     }
;;;1021     else
;;;1022     {
;;;1023       /* Disable the selected CANx interrupt */
;;;1024       CANx->IER &= ~CAN_IT;
000002  6942              LDR      r2,[r0,#0x14]
000004  d001              BEQ      |L13.10|
000006  430a              ORRS     r2,r2,r1              ;1019
000008  e000              B        |L13.12|
                  |L13.10|
00000a  438a              BICS     r2,r2,r1
                  |L13.12|
00000c  6142              STR      r2,[r0,#0x14]         ;1019
;;;1025     }
;;;1026   }
00000e  4770              BX       lr
;;;1027   /**
                          ENDP


                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=1

                  CAN_Init PROC
;;;159      */
;;;160    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162      uint8_t InitStatus = CAN_InitStatus_Failed;
;;;163      uint32_t wait_ack = 0x00000000;
;;;164      /* Check the parameters */
;;;165      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;166      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;167      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;168      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;169      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;170      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;171      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;172      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;173      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;174      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;175      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;176      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;177    
;;;178      /* Exit from sleep mode */
;;;179      CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
000002  6803              LDR      r3,[r0,#0]
000004  2200              MOVS     r2,#0                 ;163
000006  f0230302          BIC      r3,r3,#2
00000a  6003              STR      r3,[r0,#0]
;;;180    
;;;181      /* Request initialisation */
;;;182      CANx->MCR |= CAN_MCR_INRQ ;
00000c  6803              LDR      r3,[r0,#0]
00000e  f0430301          ORR      r3,r3,#1
000012  6003              STR      r3,[r0,#0]
;;;183    
;;;184      /* Wait the acknowledge */
;;;185      while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
000014  f64f73ff          MOV      r3,#0xffff
000018  e000              B        |L14.28|
                  |L14.26|
00001a  1c52              ADDS     r2,r2,#1              ;161
                  |L14.28|
00001c  6844              LDR      r4,[r0,#4]
00001e  07e4              LSLS     r4,r4,#31
000020  d101              BNE      |L14.38|
000022  429a              CMP      r2,r3
000024  d1f9              BNE      |L14.26|
                  |L14.38|
;;;186      {
;;;187        wait_ack++;
;;;188      }
;;;189    
;;;190      /* Check acknowledge */
;;;191      if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
000026  6842              LDR      r2,[r0,#4]
000028  07d2              LSLS     r2,r2,#31
00002a  d03e              BEQ      |L14.170|
;;;192      {
;;;193        InitStatus = CAN_InitStatus_Failed;
;;;194      }
;;;195      else 
;;;196      {
;;;197        /* Set the time triggered communication mode */
;;;198        if (CAN_InitStruct->CAN_TTCM == ENABLE)
00002c  798a              LDRB     r2,[r1,#6]
00002e  2a01              CMP      r2,#1
;;;199        {
;;;200          CANx->MCR |= CAN_MCR_TTCM;
;;;201        }
;;;202        else
;;;203        {
;;;204          CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
000030  6802              LDR      r2,[r0,#0]
000032  d03c              BEQ      |L14.174|
000034  f0220280          BIC      r2,r2,#0x80
                  |L14.56|
000038  6002              STR      r2,[r0,#0]
;;;205        }
;;;206    
;;;207        /* Set the automatic bus-off management */
;;;208        if (CAN_InitStruct->CAN_ABOM == ENABLE)
00003a  79ca              LDRB     r2,[r1,#7]
00003c  2a01              CMP      r2,#1
;;;209        {
;;;210          CANx->MCR |= CAN_MCR_ABOM;
;;;211        }
;;;212        else
;;;213        {
;;;214          CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
00003e  6802              LDR      r2,[r0,#0]
000040  d038              BEQ      |L14.180|
000042  f0220240          BIC      r2,r2,#0x40
                  |L14.70|
000046  6002              STR      r2,[r0,#0]
;;;215        }
;;;216    
;;;217        /* Set the automatic wake-up mode */
;;;218        if (CAN_InitStruct->CAN_AWUM == ENABLE)
000048  7a0a              LDRB     r2,[r1,#8]
00004a  2a01              CMP      r2,#1
;;;219        {
;;;220          CANx->MCR |= CAN_MCR_AWUM;
;;;221        }
;;;222        else
;;;223        {
;;;224          CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
00004c  6802              LDR      r2,[r0,#0]
00004e  d034              BEQ      |L14.186|
000050  f0220220          BIC      r2,r2,#0x20
                  |L14.84|
000054  6002              STR      r2,[r0,#0]
;;;225        }
;;;226    
;;;227        /* Set the no automatic retransmission */
;;;228        if (CAN_InitStruct->CAN_NART == ENABLE)
000056  7a4a              LDRB     r2,[r1,#9]
000058  2a01              CMP      r2,#1
;;;229        {
;;;230          CANx->MCR |= CAN_MCR_NART;
;;;231        }
;;;232        else
;;;233        {
;;;234          CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
00005a  6802              LDR      r2,[r0,#0]
00005c  d030              BEQ      |L14.192|
00005e  f0220210          BIC      r2,r2,#0x10
                  |L14.98|
000062  6002              STR      r2,[r0,#0]
;;;235        }
;;;236    
;;;237        /* Set the receive FIFO locked mode */
;;;238        if (CAN_InitStruct->CAN_RFLM == ENABLE)
000064  7a8a              LDRB     r2,[r1,#0xa]
000066  2a01              CMP      r2,#1
;;;239        {
;;;240          CANx->MCR |= CAN_MCR_RFLM;
;;;241        }
;;;242        else
;;;243        {
;;;244          CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
000068  6802              LDR      r2,[r0,#0]
00006a  d02c              BEQ      |L14.198|
00006c  f0220208          BIC      r2,r2,#8
                  |L14.112|
000070  6002              STR      r2,[r0,#0]
;;;245        }
;;;246    
;;;247        /* Set the transmit FIFO priority */
;;;248        if (CAN_InitStruct->CAN_TXFP == ENABLE)
000072  7aca              LDRB     r2,[r1,#0xb]
000074  2a01              CMP      r2,#1
;;;249        {
;;;250          CANx->MCR |= CAN_MCR_TXFP;
;;;251        }
;;;252        else
;;;253        {
;;;254          CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
000076  6802              LDR      r2,[r0,#0]
000078  d028              BEQ      |L14.204|
00007a  f0220204          BIC      r2,r2,#4
                  |L14.126|
00007e  6002              STR      r2,[r0,#0]
;;;255        }
;;;256    
;;;257        /* Set the bit timing register */
;;;258        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
000080  788a              LDRB     r2,[r1,#2]
000082  78cc              LDRB     r4,[r1,#3]
000084  0792              LSLS     r2,r2,#30
000086  ea426204          ORR      r2,r2,r4,LSL #24
00008a  790c              LDRB     r4,[r1,#4]
00008c  ea424204          ORR      r2,r2,r4,LSL #16
000090  794c              LDRB     r4,[r1,#5]
000092  8809              LDRH     r1,[r1,#0]
000094  ea425204          ORR      r2,r2,r4,LSL #20
000098  1e49              SUBS     r1,r1,#1
00009a  430a              ORRS     r2,r2,r1
00009c  61c2              STR      r2,[r0,#0x1c]
;;;259                    ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
;;;260                    ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
;;;261                    ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
;;;262                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;263    
;;;264        /* Request leave initialisation */
;;;265        CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
00009e  6801              LDR      r1,[r0,#0]
0000a0  f0210101          BIC      r1,r1,#1
0000a4  6001              STR      r1,[r0,#0]
;;;266    
;;;267       /* Wait the acknowledge */
;;;268       wait_ack = 0;
0000a6  2100              MOVS     r1,#0
0000a8  e014              B        |L14.212|
                  |L14.170|
0000aa  2000              MOVS     r0,#0                 ;193
;;;269    
;;;270       while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
;;;271       {
;;;272         wait_ack++;
;;;273       }
;;;274    
;;;275        /* ...and check acknowledged */
;;;276        if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
;;;277        {
;;;278          InitStatus = CAN_InitStatus_Failed;
;;;279        }
;;;280        else
;;;281        {
;;;282          InitStatus = CAN_InitStatus_Success ;
;;;283        }
;;;284      }
;;;285    
;;;286      /* At this step, return the status of initialization */
;;;287      return InitStatus;
;;;288    }
0000ac  bd10              POP      {r4,pc}
                  |L14.174|
0000ae  f0420280          ORR      r2,r2,#0x80           ;200
0000b2  e7c1              B        |L14.56|
                  |L14.180|
0000b4  f0420240          ORR      r2,r2,#0x40           ;210
0000b8  e7c5              B        |L14.70|
                  |L14.186|
0000ba  f0420220          ORR      r2,r2,#0x20           ;220
0000be  e7c9              B        |L14.84|
                  |L14.192|
0000c0  f0420210          ORR      r2,r2,#0x10           ;230
0000c4  e7cd              B        |L14.98|
                  |L14.198|
0000c6  f0420208          ORR      r2,r2,#8              ;240
0000ca  e7d1              B        |L14.112|
                  |L14.204|
0000cc  f0420204          ORR      r2,r2,#4              ;250
0000d0  e7d5              B        |L14.126|
                  |L14.210|
0000d2  1c49              ADDS     r1,r1,#1              ;250
                  |L14.212|
0000d4  6842              LDR      r2,[r0,#4]            ;270
0000d6  07d2              LSLS     r2,r2,#31             ;270
0000d8  d001              BEQ      |L14.222|
0000da  4299              CMP      r1,r3                 ;270
0000dc  d1f9              BNE      |L14.210|
                  |L14.222|
0000de  6840              LDR      r0,[r0,#4]            ;276
0000e0  07c0              LSLS     r0,r0,#31             ;276
0000e2  d1e2              BNE      |L14.170|
0000e4  2001              MOVS     r0,#1                 ;282
0000e6  bd10              POP      {r4,pc}
;;;289    
                          ENDP


                          AREA ||i.CAN_MessagePending||, CODE, READONLY, ALIGN=1

                  CAN_MessagePending PROC
;;;748      */
;;;749    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  4602              MOV      r2,r0
;;;750    {
;;;751      uint8_t message_pending=0;
000002  2000              MOVS     r0,#0
000004  b129              CBZ      r1,|L15.18|
;;;752      /* Check the parameters */
;;;753      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;754      assert_param(IS_CAN_FIFO(FIFONumber));
;;;755      if (FIFONumber == CAN_FIFO0)
;;;756      {
;;;757        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
;;;758      }
;;;759      else if (FIFONumber == CAN_FIFO1)
000006  2901              CMP      r1,#1
000008  d102              BNE      |L15.16|
;;;760      {
;;;761        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
00000a  6910              LDR      r0,[r2,#0x10]
                  |L15.12|
00000c  f0000003          AND      r0,r0,#3              ;757
                  |L15.16|
;;;762      }
;;;763      else
;;;764      {
;;;765        message_pending = 0;
;;;766      }
;;;767      return message_pending;
;;;768    }
000010  4770              BX       lr
                  |L15.18|
000012  68d0              LDR      r0,[r2,#0xc]          ;757
000014  e7fa              B        |L15.12|
;;;769    
                          ENDP


                          AREA ||i.CAN_OperatingModeRequest||, CODE, READONLY, ALIGN=1

                  CAN_OperatingModeRequest PROC
;;;779      */
;;;780    uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
000000  2300              MOVS     r3,#0
;;;781    {
;;;782      uint8_t status = CAN_ModeStatus_Failed;
;;;783      
;;;784      /* Timeout for INAK or also for SLAK bits*/
;;;785      uint32_t timeout = INAK_TIMEOUT; 
000002  f64f72ff          MOV      r2,#0xffff
000006  b121              CBZ      r1,|L16.18|
;;;786    
;;;787      /* Check the parameters */
;;;788      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;789      assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
;;;790    
;;;791      if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
;;;792      {
;;;793        /* Request initialisation */
;;;794        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
;;;795    
;;;796        /* Wait the acknowledge */
;;;797        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
;;;798        {
;;;799          timeout--;
;;;800        }
;;;801        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
;;;802        {
;;;803          status = CAN_ModeStatus_Failed;
;;;804        }
;;;805        else
;;;806        {
;;;807          status = CAN_ModeStatus_Success;
;;;808        }
;;;809      }
;;;810      else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
000008  2901              CMP      r1,#1
00000a  d017              BEQ      |L16.60|
;;;811      {
;;;812        /* Request leave initialisation and sleep mode  and enter Normal mode */
;;;813        CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
;;;814    
;;;815        /* Wait the acknowledge */
;;;816        while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
;;;817        {
;;;818          timeout--;
;;;819        }
;;;820        if ((CANx->MSR & CAN_MODE_MASK) != 0)
;;;821        {
;;;822          status = CAN_ModeStatus_Failed;
;;;823        }
;;;824        else
;;;825        {
;;;826          status = CAN_ModeStatus_Success;
;;;827        }
;;;828      }
;;;829      else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
00000c  2902              CMP      r1,#2
00000e  d024              BEQ      |L16.90|
000010  e03a              B        |L16.136|
                  |L16.18|
000012  6801              LDR      r1,[r0,#0]            ;794
000014  f0210102          BIC      r1,r1,#2              ;794
000018  f0410101          ORR      r1,r1,#1              ;794
00001c  6001              STR      r1,[r0,#0]            ;794
00001e  e000              B        |L16.34|
                  |L16.32|
000020  1e52              SUBS     r2,r2,#1              ;797
                  |L16.34|
000022  6841              LDR      r1,[r0,#4]            ;797
000024  f0010103          AND      r1,r1,#3              ;797
000028  2901              CMP      r1,#1                 ;797
00002a  d001              BEQ      |L16.48|
00002c  2a00              CMP      r2,#0                 ;797
00002e  d1f7              BNE      |L16.32|
                  |L16.48|
000030  6840              LDR      r0,[r0,#4]            ;801
000032  f0000003          AND      r0,r0,#3              ;801
000036  2801              CMP      r0,#1                 ;801
000038  d123              BNE      |L16.130|
00003a  e024              B        |L16.134|
                  |L16.60|
00003c  6801              LDR      r1,[r0,#0]            ;813
00003e  f0210103          BIC      r1,r1,#3              ;813
000042  6001              STR      r1,[r0,#0]            ;813
000044  e000              B        |L16.72|
                  |L16.70|
000046  1e52              SUBS     r2,r2,#1              ;816
                  |L16.72|
000048  6841              LDR      r1,[r0,#4]            ;816
00004a  0789              LSLS     r1,r1,#30             ;816
00004c  d001              BEQ      |L16.82|
00004e  2a00              CMP      r2,#0                 ;816
000050  d1f9              BNE      |L16.70|
                  |L16.82|
000052  6840              LDR      r0,[r0,#4]            ;820
000054  0780              LSLS     r0,r0,#30             ;820
000056  d114              BNE      |L16.130|
000058  e015              B        |L16.134|
                  |L16.90|
;;;830      {
;;;831        /* Request Sleep mode */
;;;832        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
00005a  6801              LDR      r1,[r0,#0]
00005c  f0210101          BIC      r1,r1,#1
000060  f0410102          ORR      r1,r1,#2
000064  6001              STR      r1,[r0,#0]
;;;833    
;;;834        /* Wait the acknowledge */
;;;835        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
000066  e000              B        |L16.106|
                  |L16.104|
000068  1e52              SUBS     r2,r2,#1
                  |L16.106|
00006a  6841              LDR      r1,[r0,#4]
00006c  f0010103          AND      r1,r1,#3
000070  2902              CMP      r1,#2
000072  d001              BEQ      |L16.120|
000074  2a00              CMP      r2,#0
000076  d1f7              BNE      |L16.104|
                  |L16.120|
;;;836        {
;;;837          timeout--;
;;;838        }
;;;839        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
000078  6840              LDR      r0,[r0,#4]
00007a  f0000003          AND      r0,r0,#3
00007e  2802              CMP      r0,#2
000080  d001              BEQ      |L16.134|
                  |L16.130|
;;;840        {
;;;841          status = CAN_ModeStatus_Failed;
000082  2300              MOVS     r3,#0
000084  e000              B        |L16.136|
                  |L16.134|
;;;842        }
;;;843        else
;;;844        {
;;;845          status = CAN_ModeStatus_Success;
000086  2301              MOVS     r3,#1
                  |L16.136|
;;;846        }
;;;847      }
;;;848      else
;;;849      {
;;;850        status = CAN_ModeStatus_Failed;
;;;851      }
;;;852    
;;;853      return  (uint8_t) status;
000088  4618              MOV      r0,r3
;;;854    }
00008a  4770              BX       lr
;;;855    
                          ENDP


                          AREA ||i.CAN_Receive||, CODE, READONLY, ALIGN=2

                  CAN_Receive PROC
;;;676      */
;;;677    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
000000  b510              PUSH     {r4,lr}
;;;678    {
;;;679      /* Check the parameters */
;;;680      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;681      assert_param(IS_CAN_FIFO(FIFONumber));
;;;682      /* Get the Id */
;;;683      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
000002  eb001301          ADD      r3,r0,r1,LSL #4
000006  f8d341b0          LDR      r4,[r3,#0x1b0]
00000a  f0140404          ANDS     r4,r4,#4
00000e  7214              STRB     r4,[r2,#8]
;;;684      if (RxMessage->IDE == CAN_Id_Standard)
;;;685      {
;;;686        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
;;;687      }
;;;688      else
;;;689      {
;;;690        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
000010  f8d341b0          LDR      r4,[r3,#0x1b0]
000014  d034              BEQ      |L17.128|
000016  08e4              LSRS     r4,r4,#3
000018  f8c24004          STR.W    r4,[r2,#4]
                  |L17.28|
;;;691      }
;;;692      
;;;693      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
00001c  f8d341b0          LDR      r4,[r3,#0x1b0]
000020  f0040402          AND      r4,r4,#2
000024  7254              STRB     r4,[r2,#9]
;;;694      /* Get the DLC */
;;;695      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
000026  f8d341b4          LDR      r4,[r3,#0x1b4]
00002a  f004040f          AND      r4,r4,#0xf
00002e  7294              STRB     r4,[r2,#0xa]
;;;696      /* Get the FMI */
;;;697      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
000030  f8d341b4          LDR      r4,[r3,#0x1b4]
000034  0a24              LSRS     r4,r4,#8
000036  74d4              STRB     r4,[r2,#0x13]
;;;698      /* Get the data field */
;;;699      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
000038  f8d341b8          LDR      r4,[r3,#0x1b8]
00003c  72d4              STRB     r4,[r2,#0xb]
;;;700      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
00003e  f8d341b8          LDR      r4,[r3,#0x1b8]
000042  0a24              LSRS     r4,r4,#8
000044  7314              STRB     r4,[r2,#0xc]
;;;701      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
000046  f8d341b8          LDR      r4,[r3,#0x1b8]
00004a  0c24              LSRS     r4,r4,#16
00004c  7354              STRB     r4,[r2,#0xd]
;;;702      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
00004e  f8d341b8          LDR      r4,[r3,#0x1b8]
000052  0e24              LSRS     r4,r4,#24
000054  7394              STRB     r4,[r2,#0xe]
;;;703      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
000056  f8d341bc          LDR      r4,[r3,#0x1bc]
00005a  73d4              STRB     r4,[r2,#0xf]
;;;704      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
00005c  f8d341bc          LDR      r4,[r3,#0x1bc]
000060  0a24              LSRS     r4,r4,#8
000062  7414              STRB     r4,[r2,#0x10]
;;;705      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
000064  f8d341bc          LDR      r4,[r3,#0x1bc]
000068  0c24              LSRS     r4,r4,#16
00006a  7454              STRB     r4,[r2,#0x11]
;;;706      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
00006c  f8d331bc          LDR      r3,[r3,#0x1bc]
000070  0e1b              LSRS     r3,r3,#24
000072  7493              STRB     r3,[r2,#0x12]
;;;707      /* Release the FIFO */
;;;708      /* Release FIFO0 */
;;;709      if (FIFONumber == CAN_FIFO0)
000074  b139              CBZ      r1,|L17.134|
;;;710      {
;;;711        CANx->RF0R |= CAN_RF0R_RFOM0;
;;;712      }
;;;713      /* Release FIFO1 */
;;;714      else /* FIFONumber == CAN_FIFO1 */
;;;715      {
;;;716        CANx->RF1R |= CAN_RF1R_RFOM1;
000076  6901              LDR      r1,[r0,#0x10]
000078  f0410120          ORR      r1,r1,#0x20
00007c  6101              STR      r1,[r0,#0x10]
;;;717      }
;;;718    }
00007e  bd10              POP      {r4,pc}
                  |L17.128|
000080  0d64              LSRS     r4,r4,#21             ;686
000082  6014              STR      r4,[r2,#0]            ;686
000084  e7ca              B        |L17.28|
                  |L17.134|
000086  68c1              LDR      r1,[r0,#0xc]          ;711
000088  f0410120          ORR      r1,r1,#0x20           ;711
00008c  60c1              STR      r1,[r0,#0xc]          ;711
00008e  bd10              POP      {r4,pc}
;;;719    
                          ENDP


                          AREA ||i.CAN_SlaveStartBank||, CODE, READONLY, ALIGN=2

                  CAN_SlaveStartBank PROC
;;;433      */
;;;434    void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
000000  4909              LDR      r1,|L18.40|
;;;435    {
;;;436      /* Check the parameters */
;;;437      assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
;;;438      
;;;439      /* Enter Initialisation mode for the filter */
;;;440      CAN1->FMR |= FMR_FINIT;
000002  680a              LDR      r2,[r1,#0]
000004  f0420201          ORR      r2,r2,#1
000008  600a              STR      r2,[r1,#0]
;;;441      
;;;442      /* Select the start slave bank */
;;;443      CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
00000a  680a              LDR      r2,[r1,#0]
00000c  f643730e          MOV      r3,#0x3f0e
000010  439a              BICS     r2,r2,r3
000012  600a              STR      r2,[r1,#0]
;;;444      CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
000014  680a              LDR      r2,[r1,#0]
000016  ea422000          ORR      r0,r2,r0,LSL #8
00001a  6008              STR      r0,[r1,#0]
;;;445      
;;;446      /* Leave Initialisation mode for the filter */
;;;447      CAN1->FMR &= ~FMR_FINIT;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0200001          BIC      r0,r0,#1
000022  6008              STR      r0,[r1,#0]
;;;448    }
000024  4770              BX       lr
;;;449    
                          ENDP

000026  0000              DCW      0x0000
                  |L18.40|
                          DCD      0x40006600

                          AREA ||i.CAN_Sleep||, CODE, READONLY, ALIGN=1

                  CAN_Sleep PROC
;;;861      */
;;;862    uint8_t CAN_Sleep(CAN_TypeDef* CANx)
000000  6802              LDR      r2,[r0,#0]
;;;863    {
;;;864      uint8_t sleepstatus = CAN_Sleep_Failed;
000002  2100              MOVS     r1,#0
;;;865      
;;;866      /* Check the parameters */
;;;867      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;868        
;;;869      /* Request Sleep mode */
;;;870       CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
000004  f0220201          BIC      r2,r2,#1
000008  f0420202          ORR      r2,r2,#2
00000c  6002              STR      r2,[r0,#0]
;;;871       
;;;872      /* Sleep mode status */
;;;873      if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
00000e  6840              LDR      r0,[r0,#4]
000010  f0000003          AND      r0,r0,#3
000014  2802              CMP      r0,#2
000016  d100              BNE      |L19.26|
;;;874      {
;;;875        /* Sleep mode not entered */
;;;876        sleepstatus =  CAN_Sleep_Ok;
000018  2101              MOVS     r1,#1
                  |L19.26|
;;;877      }
;;;878      /* return sleep mode status */
;;;879       return (uint8_t)sleepstatus;
00001a  4608              MOV      r0,r1
;;;880    }
00001c  4770              BX       lr
;;;881    
                          ENDP


                          AREA ||i.CAN_StructInit||, CODE, READONLY, ALIGN=1

                  CAN_StructInit PROC
;;;389      */
;;;390    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000000  2100              MOVS     r1,#0
;;;391    {
;;;392      /* Reset CAN init structure parameters values */
;;;393      
;;;394      /* Initialize the time triggered communication mode */
;;;395      CAN_InitStruct->CAN_TTCM = DISABLE;
000002  7181              STRB     r1,[r0,#6]
;;;396      
;;;397      /* Initialize the automatic bus-off management */
;;;398      CAN_InitStruct->CAN_ABOM = DISABLE;
000004  71c1              STRB     r1,[r0,#7]
;;;399      
;;;400      /* Initialize the automatic wake-up mode */
;;;401      CAN_InitStruct->CAN_AWUM = DISABLE;
000006  7201              STRB     r1,[r0,#8]
;;;402      
;;;403      /* Initialize the no automatic retransmission */
;;;404      CAN_InitStruct->CAN_NART = DISABLE;
000008  7241              STRB     r1,[r0,#9]
;;;405      
;;;406      /* Initialize the receive FIFO locked mode */
;;;407      CAN_InitStruct->CAN_RFLM = DISABLE;
00000a  7281              STRB     r1,[r0,#0xa]
;;;408      
;;;409      /* Initialize the transmit FIFO priority */
;;;410      CAN_InitStruct->CAN_TXFP = DISABLE;
00000c  72c1              STRB     r1,[r0,#0xb]
;;;411      
;;;412      /* Initialize the CAN_Mode member */
;;;413      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00000e  7081              STRB     r1,[r0,#2]
;;;414      
;;;415      /* Initialize the CAN_SJW member */
;;;416      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000010  70c1              STRB     r1,[r0,#3]
;;;417      
;;;418      /* Initialize the CAN_BS1 member */
;;;419      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000012  2103              MOVS     r1,#3
000014  7101              STRB     r1,[r0,#4]
;;;420      
;;;421      /* Initialize the CAN_BS2 member */
;;;422      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000016  2102              MOVS     r1,#2
000018  7141              STRB     r1,[r0,#5]
;;;423      
;;;424      /* Initialize the CAN_Prescaler member */
;;;425      CAN_InitStruct->CAN_Prescaler = 1;
00001a  2101              MOVS     r1,#1
00001c  8001              STRH     r1,[r0,#0]
;;;426    }
00001e  4770              BX       lr
;;;427    
                          ENDP


                          AREA ||i.CAN_TTComModeCmd||, CODE, READONLY, ALIGN=1

                  CAN_TTComModeCmd PROC
;;;486      */
;;;487    void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;488    {
;;;489      /* Check the parameters */
;;;490      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;491      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;492      if (NewState != DISABLE)
;;;493      {
;;;494        /* Enable the TTCM mode */
;;;495        CANx->MCR |= CAN_MCR_TTCM;
;;;496    
;;;497        /* Set TGT bits */
;;;498        CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
;;;499        CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
;;;500        CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
;;;501      }
;;;502      else
;;;503      {
;;;504        /* Disable the TTCM mode */
;;;505        CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
000002  6801              LDR      r1,[r0,#0]
000004  d013              BEQ      |L21.46|
000006  f0410180          ORR      r1,r1,#0x80           ;495
00000a  6001              STR      r1,[r0,#0]            ;495
00000c  f8d01184          LDR      r1,[r0,#0x184]        ;498
000010  f4417180          ORR      r1,r1,#0x100          ;498
000014  f8c01184          STR      r1,[r0,#0x184]        ;498
000018  f8d01194          LDR      r1,[r0,#0x194]        ;499
00001c  f4417180          ORR      r1,r1,#0x100          ;499
000020  f8c01194          STR      r1,[r0,#0x194]        ;499
000024  f8d011a4          LDR      r1,[r0,#0x1a4]        ;500
000028  f4417180          ORR      r1,r1,#0x100          ;500
00002c  e012              B        |L21.84|
                  |L21.46|
00002e  f0210180          BIC      r1,r1,#0x80
000032  6001              STR      r1,[r0,#0]
;;;506    
;;;507        /* Reset TGT bits */
;;;508        CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
000034  f8d01184          LDR      r1,[r0,#0x184]
000038  f4217180          BIC      r1,r1,#0x100
00003c  f8c01184          STR      r1,[r0,#0x184]
;;;509        CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
000040  f8d01194          LDR      r1,[r0,#0x194]
000044  f4217180          BIC      r1,r1,#0x100
000048  f8c01194          STR      r1,[r0,#0x194]
;;;510        CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
00004c  f8d011a4          LDR      r1,[r0,#0x1a4]
000050  f4217180          BIC      r1,r1,#0x100
                  |L21.84|
000054  f8c011a4          STR      r1,[r0,#0x1a4]        ;500
;;;511      }
;;;512    }
000058  4770              BX       lr
;;;513    /**
                          ENDP


                          AREA ||i.CAN_Transmit||, CODE, READONLY, ALIGN=1

                  CAN_Transmit PROC
;;;520      */
;;;521    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
000000  b530              PUSH     {r4,r5,lr}
;;;522    {
000002  4602              MOV      r2,r0
;;;523      uint8_t transmit_mailbox = 0;
000004  2000              MOVS     r0,#0
;;;524      /* Check the parameters */
;;;525      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;526      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;527      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;528      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;529    
;;;530      /* Select one empty transmit mailbox */
;;;531      if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000006  6893              LDR      r3,[r2,#8]
000008  015b              LSLS     r3,r3,#5
00000a  d408              BMI      |L22.30|
;;;532      {
;;;533        transmit_mailbox = 0;
;;;534      }
;;;535      else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
00000c  6890              LDR      r0,[r2,#8]
00000e  0100              LSLS     r0,r0,#4
000010  d501              BPL      |L22.22|
;;;536      {
;;;537        transmit_mailbox = 1;
000012  2001              MOVS     r0,#1
000014  e003              B        |L22.30|
                  |L22.22|
;;;538      }
;;;539      else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
000016  6890              LDR      r0,[r2,#8]
000018  00c0              LSLS     r0,r0,#3
00001a  d537              BPL      |L22.140|
;;;540      {
;;;541        transmit_mailbox = 2;
00001c  2002              MOVS     r0,#2
                  |L22.30|
;;;542      }
;;;543      else
;;;544      {
;;;545        transmit_mailbox = CAN_TxStatus_NoMailBox;
;;;546      }
;;;547    
;;;548      if (transmit_mailbox != CAN_TxStatus_NoMailBox)
;;;549      {
;;;550        /* Set up the Id */
;;;551        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
00001e  eb021200          ADD      r2,r2,r0,LSL #4
000022  f8d23180          LDR      r3,[r2,#0x180]
000026  f0030301          AND      r3,r3,#1
00002a  f8c23180          STR      r3,[r2,#0x180]
;;;552        if (TxMessage->IDE == CAN_Id_Standard)
00002e  7a0b              LDRB     r3,[r1,#8]
000030  b373              CBZ      r3,|L22.144|
;;;553        {
;;;554          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;555          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
;;;556                                                      TxMessage->RTR);
;;;557        }
;;;558        else
;;;559        {
;;;560          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;561          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
000032  f8d24180          LDR      r4,[r2,#0x180]
000036  684d              LDR      r5,[r1,#4]
000038  431c              ORRS     r4,r4,r3
00003a  7a4b              LDRB     r3,[r1,#9]
00003c  ea4303c5          ORR      r3,r3,r5,LSL #3
000040  431c              ORRS     r4,r4,r3
000042  f8c24180          STR      r4,[r2,#0x180]
                  |L22.70|
;;;562                                                      TxMessage->IDE | \
;;;563                                                      TxMessage->RTR);
;;;564        }
;;;565        
;;;566        /* Set up the DLC */
;;;567        TxMessage->DLC &= (uint8_t)0x0000000F;
000046  7a8b              LDRB     r3,[r1,#0xa]
000048  f003030f          AND      r3,r3,#0xf
00004c  728b              STRB     r3,[r1,#0xa]
;;;568        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
00004e  f8d23184          LDR      r3,[r2,#0x184]
000052  f023030f          BIC      r3,r3,#0xf
000056  f8c23184          STR      r3,[r2,#0x184]
;;;569        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
00005a  f8d23184          LDR      r3,[r2,#0x184]
00005e  7a8c              LDRB     r4,[r1,#0xa]
000060  4323              ORRS     r3,r3,r4
000062  f8c23184          STR      r3,[r2,#0x184]
;;;570    
;;;571        /* Set up the data field */
;;;572        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
000066  7acb              LDRB     r3,[r1,#0xb]
000068  68cc              LDR      r4,[r1,#0xc]
00006a  ea432304          ORR      r3,r3,r4,LSL #8
00006e  f8c23188          STR      r3,[r2,#0x188]
;;;573                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;574                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;575                                                 ((uint32_t)TxMessage->Data[0]));
;;;576        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
000072  7bcb              LDRB     r3,[r1,#0xf]
000074  6909              LDR      r1,[r1,#0x10]
000076  ea432101          ORR      r1,r3,r1,LSL #8
00007a  f8c2118c          STR      r1,[r2,#0x18c]
;;;577                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;578                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;579                                                 ((uint32_t)TxMessage->Data[4]));
;;;580        /* Request transmission */
;;;581        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
00007e  f8d21180          LDR      r1,[r2,#0x180]
000082  f0410101          ORR      r1,r1,#1
000086  f8c21180          STR      r1,[r2,#0x180]
;;;582      }
;;;583      return transmit_mailbox;
;;;584    }
00008a  bd30              POP      {r4,r5,pc}
                  |L22.140|
00008c  2004              MOVS     r0,#4                 ;545
00008e  bd30              POP      {r4,r5,pc}
                  |L22.144|
000090  f8d23180          LDR      r3,[r2,#0x180]        ;555
000094  7a4c              LDRB     r4,[r1,#9]            ;555
000096  4323              ORRS     r3,r3,r4              ;555
000098  880c              LDRH     r4,[r1,#0]            ;555
00009a  ea435344          ORR      r3,r3,r4,LSL #21      ;555
00009e  f8c23180          STR      r3,[r2,#0x180]        ;555
0000a2  e7d0              B        |L22.70|
;;;585    
                          ENDP


                          AREA ||i.CAN_TransmitStatus||, CODE, READONLY, ALIGN=2

                  CAN_TransmitStatus PROC
;;;594      */
;;;595    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
000000  2200              MOVS     r2,#0
;;;596    {
000002  b121              CBZ      r1,|L23.14|
;;;597      uint32_t state = 0;
;;;598    
;;;599      /* Check the parameters */
;;;600      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;601      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;602     
;;;603      switch (TransmitMailbox)
000004  2901              CMP      r1,#1
000006  d005              BEQ      |L23.20|
000008  2902              CMP      r1,#2
00000a  d106              BNE      |L23.26|
00000c  e012              B        |L23.52|
                  |L23.14|
;;;604      {
;;;605        case (CAN_TXMAILBOX_0): 
;;;606          state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
00000e  6882              LDR      r2,[r0,#8]
000010  4811              LDR      r0,|L23.88|
;;;607          break;
000012  e001              B        |L23.24|
                  |L23.20|
;;;608        case (CAN_TXMAILBOX_1): 
;;;609          state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
000014  6882              LDR      r2,[r0,#8]
000016  4811              LDR      r0,|L23.92|
                  |L23.24|
000018  4002              ANDS     r2,r2,r0              ;606
                  |L23.26|
;;;610          break;
;;;611        case (CAN_TXMAILBOX_2): 
;;;612          state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
;;;613          break;
;;;614        default:
;;;615          state = CAN_TxStatus_Failed;
;;;616          break;
;;;617      }
;;;618      switch (state)
00001a  4911              LDR      r1,|L23.96|
00001c  1a50              SUBS     r0,r2,r1
00001e  428a              CMP      r2,r1
000020  d014              BEQ      |L23.76|
000022  dc0a              BGT      |L23.58|
000024  b1a2              CBZ      r2,|L23.80|
000026  f06f6080          MVN      r0,#0x4000000
00002a  1810              ADDS     r0,r2,r0
00002c  d00f              BEQ      |L23.78|
00002e  2802              CMP      r0,#2
000030  d10c              BNE      |L23.76|
000032  e00f              B        |L23.84|
                  |L23.52|
000034  6882              LDR      r2,[r0,#8]            ;612
000036  480b              LDR      r0,|L23.100|
000038  e7ee              B        |L23.24|
                  |L23.58|
00003a  f5b07f00          CMP      r0,#0x200
00003e  d009              BEQ      |L23.84|
000040  4909              LDR      r1,|L23.104|
000042  1840              ADDS     r0,r0,r1
000044  d003              BEQ      |L23.78|
000046  f5b03f00          CMP      r0,#0x20000
00004a  d003              BEQ      |L23.84|
                  |L23.76|
;;;619      {
;;;620          /* transmit pending  */
;;;621        case (0x0): state = CAN_TxStatus_Pending;
;;;622          break;
;;;623          /* transmit failed  */
;;;624         case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
;;;625          break;
;;;626         case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
;;;627          break;
;;;628         case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
;;;629          break;
;;;630          /* transmit succeeded  */
;;;631        case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
;;;632          break;
;;;633        case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
;;;634          break;
;;;635        case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
;;;636          break;
;;;637        default: state = CAN_TxStatus_Failed;
00004c  2000              MOVS     r0,#0
                  |L23.78|
;;;638          break;
;;;639      }
;;;640      return (uint8_t) state;
;;;641    }
00004e  4770              BX       lr
                  |L23.80|
000050  2002              MOVS     r0,#2                 ;621
000052  4770              BX       lr
                  |L23.84|
000054  2001              MOVS     r0,#1                 ;635
000056  4770              BX       lr
;;;642    
                          ENDP

                  |L23.88|
                          DCD      0x04000003
                  |L23.92|
                          DCD      0x08000300
                  |L23.96|
                          DCD      0x08000100
                  |L23.100|
                          DCD      0x10030000
                  |L23.104|
                          DCD      0xf7ff0100

                          AREA ||i.CAN_WakeUp||, CODE, READONLY, ALIGN=1

                  CAN_WakeUp PROC
;;;887      */
;;;888    uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
000000  6803              LDR      r3,[r0,#0]
;;;889    {
;;;890      uint32_t wait_slak = SLAK_TIMEOUT;
000002  f64f71ff          MOV      r1,#0xffff
;;;891      uint8_t wakeupstatus = CAN_WakeUp_Failed;
000006  2200              MOVS     r2,#0
;;;892      
;;;893      /* Check the parameters */
;;;894      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;895        
;;;896      /* Wake up request */
;;;897      CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
000008  f0230302          BIC      r3,r3,#2
00000c  6003              STR      r3,[r0,#0]
00000e  e000              B        |L24.18|
                  |L24.16|
000010  1e49              SUBS     r1,r1,#1              ;889
                  |L24.18|
;;;898        
;;;899      /* Sleep mode status */
;;;900      while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
000012  6843              LDR      r3,[r0,#4]
000014  079b              LSLS     r3,r3,#30
000016  d501              BPL      |L24.28|
000018  2900              CMP      r1,#0
00001a  d1f9              BNE      |L24.16|
                  |L24.28|
;;;901      {
;;;902       wait_slak--;
;;;903      }
;;;904      if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
00001c  6840              LDR      r0,[r0,#4]
00001e  0780              LSLS     r0,r0,#30
000020  d400              BMI      |L24.36|
;;;905      {
;;;906       /* wake up done : Sleep mode exited */
;;;907        wakeupstatus = CAN_WakeUp_Ok;
000022  2201              MOVS     r2,#1
                  |L24.36|
;;;908      }
;;;909      /* return wakeup status */
;;;910      return (uint8_t)wakeupstatus;
000024  4610              MOV      r0,r2
;;;911    }
000026  4770              BX       lr
;;;912    
                          ENDP


                          AREA ||i.CheckITStatus||, CODE, READONLY, ALIGN=1

                  CheckITStatus PROC
;;;1390     */
;;;1391   static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
000000  4602              MOV      r2,r0
;;;1392   {
;;;1393     ITStatus pendingbitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1394     
;;;1395     if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
000004  420a              TST      r2,r1
000006  d000              BEQ      |L25.10|
;;;1396     {
;;;1397       /* CAN_IT is set */
;;;1398       pendingbitstatus = SET;
000008  2001              MOVS     r0,#1
                  |L25.10|
;;;1399     }
;;;1400     else
;;;1401     {
;;;1402       /* CAN_IT is reset */
;;;1403       pendingbitstatus = RESET;
;;;1404     }
;;;1405     return pendingbitstatus;
;;;1406   }
00000a  4770              BX       lr
;;;1407   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f10x_can_c_347dae01____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_can_c_347dae01____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f10x_can_c_347dae01____REVSH|
#line 128
|__asm___15_stm32f10x_can_c_347dae01____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
