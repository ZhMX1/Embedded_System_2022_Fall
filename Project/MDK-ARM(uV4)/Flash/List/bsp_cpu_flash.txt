; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_cpu_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_cpu_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_cpu_flash.crf ..\..\User\bsp\src\bsp_cpu_flash.c]
                          THUMB

                          AREA ||i.bsp_CmpCpuFlash||, CODE, READONLY, ALIGN=1

                  bsp_CmpCpuFlash PROC
;;;85     */
;;;86     uint8_t bsp_CmpCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpBuf, uint32_t _ulSize)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
;;;88     	uint32_t i;
;;;89     	uint8_t ucIsEqu;	/* 相等标志 */
;;;90     	uint8_t ucByte;
;;;91     
;;;92     	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;93     	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
000002  1883              ADDS     r3,r0,r2
000004  f1b36f01          CMP      r3,#0x8100000
000008  d901              BLS      |L1.14|
;;;94     	{
;;;95     		return FLASH_PARAM_ERR;		/*　函数参数错误　*/
00000a  2003              MOVS     r0,#3
;;;96     	}
;;;97     
;;;98     	/* 长度为0时返回正确 */
;;;99     	if (_ulSize == 0)
;;;100    	{
;;;101    		return FLASH_IS_EQU;		/* Flash内容和待写入的数据相等 */
;;;102    	}
;;;103    
;;;104    	ucIsEqu = 1;			/* 先假设所有字节和待写入的数据相等，如果遇到任何一个不相等，则设置为 0 */
;;;105    	for (i = 0; i < _ulSize; i++)
;;;106    	{
;;;107    		ucByte = *(uint8_t *)_ulFlashAddr;
;;;108    
;;;109    		if (ucByte != *_ucpBuf)
;;;110    		{
;;;111    			if (ucByte != 0xFF)
;;;112    			{
;;;113    				return FLASH_REQ_ERASE;		/* 需要擦除后再写 */
;;;114    			}
;;;115    			else
;;;116    			{
;;;117    				ucIsEqu = 0;	/* 不相等，需要写 */
;;;118    			}
;;;119    		}
;;;120    
;;;121    		_ulFlashAddr++;
;;;122    		_ucpBuf++;
;;;123    	}
;;;124    
;;;125    	if (ucIsEqu == 1)
;;;126    	{
;;;127    		return FLASH_IS_EQU;	/* Flash内容和待写入的数据相等，不需要擦除和写操作 */
;;;128    	}
;;;129    	else
;;;130    	{
;;;131    		return FLASH_REQ_WRITE;	/* Flash不需要擦除，直接写 */
;;;132    	}
;;;133    }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  b1a2              CBZ      r2,|L1.58|
000010  2401              MOVS     r4,#1                 ;104
000012  2300              MOVS     r3,#0                 ;105
000014  e00b              B        |L1.46|
                  |L1.22|
000016  7805              LDRB     r5,[r0,#0]            ;107
000018  780e              LDRB     r6,[r1,#0]            ;109
00001a  42ae              CMP      r6,r5                 ;109
00001c  d004              BEQ      |L1.40|
00001e  2dff              CMP      r5,#0xff              ;111
000020  d001              BEQ      |L1.38|
000022  2002              MOVS     r0,#2                 ;113
000024  bd70              POP      {r4-r6,pc}
                  |L1.38|
000026  2400              MOVS     r4,#0                 ;117
                  |L1.40|
000028  1c40              ADDS     r0,r0,#1              ;117
00002a  1c49              ADDS     r1,r1,#1              ;117
00002c  1c5b              ADDS     r3,r3,#1              ;117
                  |L1.46|
00002e  4293              CMP      r3,r2                 ;105
000030  d3f1              BCC      |L1.22|
000032  2c01              CMP      r4,#1                 ;125
000034  d001              BEQ      |L1.58|
000036  2001              MOVS     r0,#1                 ;131
000038  bd70              POP      {r4-r6,pc}
                  |L1.58|
00003a  2000              MOVS     r0,#0                 ;127
00003c  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.bsp_GetSector||, CODE, READONLY, ALIGN=1

                  bsp_GetSector PROC
;;;28     */
;;;29     uint32_t bsp_GetSector(uint32_t _ulWrAddr)
000000  f36f000a          BFC      r0,#0,#11
;;;30     {
;;;31     	uint32_t sector = 0;
;;;32     
;;;33     	sector = _ulWrAddr & SECTOR_MASK;
;;;34     
;;;35     	return sector;
;;;36     }
000004  4770              BX       lr
;;;37     
                          ENDP


                          AREA ||i.bsp_ReadCpuFlash||, CODE, READONLY, ALIGN=1

                  bsp_ReadCpuFlash PROC
;;;47     */
;;;48     uint8_t bsp_ReadCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpDst, uint32_t _ulSize)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50     	uint32_t i;
;;;51     
;;;52     	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;53     	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
000002  1883              ADDS     r3,r0,r2
000004  f1b36f01          CMP      r3,#0x8100000
000008  d802              BHI      |L3.16|
;;;54     	{
;;;55     		return 1;
;;;56     	}
;;;57     
;;;58     	/* 长度为0时不继续操作,否则起始地址为奇地址会出错 */
;;;59     	if (_ulSize == 0)
00000a  b10a              CBZ      r2,|L3.16|
;;;60     	{
;;;61     		return 1;
;;;62     	}
;;;63     
;;;64     	for (i = 0; i < _ulSize; i++)
00000c  2300              MOVS     r3,#0
00000e  e006              B        |L3.30|
                  |L3.16|
000010  2001              MOVS     r0,#1                 ;61
;;;65     	{
;;;66     		*_ucpDst++ = *(uint8_t *)_ulFlashAddr++;
;;;67     	}
;;;68     
;;;69     	return 0;
;;;70     }
000012  bd10              POP      {r4,pc}
                  |L3.20|
000014  f8104b01          LDRB     r4,[r0],#1            ;66
000018  f8014b01          STRB     r4,[r1],#1            ;66
00001c  1c5b              ADDS     r3,r3,#1              ;66
                  |L3.30|
00001e  4293              CMP      r3,r2                 ;64
000020  d3f8              BCC      |L3.20|
000022  2000              MOVS     r0,#0                 ;69
000024  bd10              POP      {r4,pc}
;;;71     
                          ENDP


                          AREA ||i.bsp_WriteCpuFlash||, CODE, READONLY, ALIGN=1

                  bsp_WriteCpuFlash PROC
;;;144    */
;;;145    uint8_t bsp_WriteCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpSrc, uint32_t _ulSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;146    {
000004  4605              MOV      r5,r0
000006  4617              MOV      r7,r2
;;;147    	uint32_t i;
;;;148    	uint8_t ucRet;
;;;149    	uint16_t usTemp;
;;;150    	FLASH_Status status = FLASH_COMPLETE;
000008  2404              MOVS     r4,#4
;;;151    
;;;152    	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;153    	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
00000a  4438              ADD      r0,r0,r7
00000c  4688              MOV      r8,r1                 ;146
00000e  f1b06f01          CMP      r0,#0x8100000
000012  d802              BHI      |L4.26|
;;;154    	{
;;;155    		return 1;
;;;156    	}
;;;157    
;;;158    	/* 长度为0 时不继续操作  */
;;;159    	if (_ulSize == 0)
000014  b3bf              CBZ      r7,|L4.134|
;;;160    	{
;;;161    		return 0;
;;;162    	}
;;;163    
;;;164    	/* 长度为奇数时不继续操作  */
;;;165    	if ((_ulSize % 2) != 0)
000016  07f8              LSLS     r0,r7,#31
000018  d002              BEQ      |L4.32|
                  |L4.26|
;;;166    	{
;;;167    		return 1;
00001a  2001              MOVS     r0,#1
                  |L4.28|
;;;168    	}	
;;;169    
;;;170    	ucRet = bsp_CmpCpuFlash(_ulFlashAddr, _ucpSrc, _ulSize);
;;;171    
;;;172    	if (ucRet == FLASH_IS_EQU)
;;;173    	{
;;;174    		return 0;
;;;175    	}
;;;176    
;;;177    	__set_PRIMASK(1);  		/* 关中断 */
;;;178    
;;;179    	/* FLASH 解锁 */
;;;180    	FLASH_Unlock();
;;;181    
;;;182      	/* Clear pending flags (if any) */
;;;183    	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);	
;;;184    
;;;185    	/* 需要擦除 */
;;;186    	if (ucRet == FLASH_REQ_ERASE)
;;;187    	{
;;;188    		status = FLASH_ErasePage(bsp_GetSector(_ulFlashAddr));
;;;189    		if (status != FLASH_COMPLETE)
;;;190    		{
;;;191    			return 2;
;;;192    		}		
;;;193    	}
;;;194    
;;;195    	/* 按字节模式编程（为提高效率，可以按字编程，一次写入4字节） */
;;;196    	for (i = 0; i < _ulSize / 2; i++)
;;;197    	{
;;;198    		//FLASH_ProgramByte(_ulFlashAddr++, *_ucpSrc++);		
;;;199    		usTemp = _ucpSrc[2 * i];
;;;200    		usTemp |= (_ucpSrc[2 * i + 1] << 8);
;;;201    		status = FLASH_ProgramHalfWord(_ulFlashAddr, usTemp);
;;;202    		if (status != FLASH_COMPLETE)
;;;203    		{
;;;204    			break;
;;;205    		}
;;;206    		
;;;207    		_ulFlashAddr += 2;
;;;208    	}
;;;209    
;;;210      	/* Flash 加锁，禁止写Flash控制寄存器 */
;;;211      	FLASH_Lock();
;;;212    
;;;213      	__set_PRIMASK(0);  		/* 开中断 */
;;;214    
;;;215    	if (status == FLASH_COMPLETE)
;;;216    	{
;;;217    		return 0;
;;;218    	}
;;;219    	return 2;
;;;220    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.32|
000020  4628              MOV      r0,r5                 ;170
000022  f7fffffe          BL       bsp_CmpCpuFlash
000026  0006              MOVS     r6,r0                 ;170
000028  d02e              BEQ      |L4.136|
00002a  2001              MOVS     r0,#1                 ;177
00002c  f3808810          MSR      PRIMASK,r0            ;177
000030  f7fffffe          BL       FLASH_Unlock
000034  2035              MOVS     r0,#0x35              ;183
000036  f7fffffe          BL       FLASH_ClearFlag
00003a  2e02              CMP      r6,#2                 ;186
00003c  d106              BNE      |L4.76|
00003e  0ae8              LSRS     r0,r5,#11             ;186
000040  02c0              LSLS     r0,r0,#11             ;186
000042  f7fffffe          BL       FLASH_ErasePage
000046  4604              MOV      r4,r0                 ;188
000048  2804              CMP      r0,#4                 ;189
00004a  d11a              BNE      |L4.130|
                  |L4.76|
00004c  2600              MOVS     r6,#0                 ;196
00004e  e00e              B        |L4.110|
                  |L4.80|
000050  eb080146          ADD      r1,r8,r6,LSL #1       ;200
000054  f8180016          LDRB     r0,[r8,r6,LSL #1]     ;199
000058  7849              LDRB     r1,[r1,#1]            ;200
00005a  ea402101          ORR      r1,r0,r1,LSL #8       ;200
00005e  4628              MOV      r0,r5                 ;201
000060  f7fffffe          BL       FLASH_ProgramHalfWord
000064  4604              MOV      r4,r0                 ;201
000066  2804              CMP      r0,#4                 ;202
000068  d104              BNE      |L4.116|
00006a  1cad              ADDS     r5,r5,#2              ;202
00006c  1c76              ADDS     r6,r6,#1              ;202
                  |L4.110|
00006e  ebb60f57          CMP      r6,r7,LSR #1          ;196
000072  d3ed              BCC      |L4.80|
                  |L4.116|
000074  f7fffffe          BL       FLASH_Lock
000078  2000              MOVS     r0,#0                 ;213
00007a  f3808810          MSR      PRIMASK,r0            ;213
00007e  2c04              CMP      r4,#4                 ;215
000080  d002              BEQ      |L4.136|
                  |L4.130|
000082  2002              MOVS     r0,#2                 ;219
000084  e7ca              B        |L4.28|
                  |L4.134|
000086  e7ff              B        |L4.136|
                  |L4.136|
000088  2000              MOVS     r0,#0                 ;217
00008a  e7c7              B        |L4.28|
;;;221    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_cpu_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_cpu_flash_c_4320bcf1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_cpu_flash_c_4320bcf1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_cpu_flash_c_4320bcf1____REVSH|
#line 128
|__asm___15_bsp_cpu_flash_c_4320bcf1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
