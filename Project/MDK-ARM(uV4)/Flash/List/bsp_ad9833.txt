; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_ad9833.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_ad9833.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_ad9833.crf ..\..\User\bsp\src\bsp_ad9833.c]
                          THUMB

                          AREA ||i.AD9833_SelectWave||, CODE, READONLY, ALIGN=2

                  AD9833_SelectWave PROC
;;;175    */
;;;176    void AD9833_SelectWave(AD9833_WAVE_E _type) 
000000  b150              CBZ      r0,|L1.24|
;;;177    {	
;;;178    	/* D5  D1 
;;;179    		0   0  -- 正弦
;;;180    	    0   1  -- 三角
;;;181    	    1   0  -- 方波
;;;182    	*/	
;;;183    	if (_type == NONE_WAVE)
;;;184    	{
;;;185    		AD9833_Write16Bits(0x20C0); /* 无输出 */
;;;186    	}
;;;187    	else if (_type == TRI_WAVE)
000002  2801              CMP      r0,#1
000004  d00b              BEQ      |L1.30|
;;;188    	{
;;;189    		AD9833_Write16Bits(0x2002); /* 频率寄存器输出三角波 */				
;;;190    	}
;;;191    	else if (_type == SINE_WAVE)
000006  2802              CMP      r0,#2
000008  d00c              BEQ      |L1.36|
;;;192    	{
;;;193    		AD9833_Write16Bits(0x2000); /* 频率寄存器输出正弦波 */					
;;;194    	}
;;;195    	else if (_type == SQU_WAVE)
00000a  2803              CMP      r0,#3
00000c  d10d              BNE      |L1.42|
;;;196    	{
;;;197    		AD9833_Write16Bits(0x2028); /* 频率寄存器输出方波 */	
00000e  f2420028          MOV      r0,#0x2028
000012  bf00              NOP      
                  |L1.20|
000014  f7ffbffe          B.W      AD9833_Write16Bits
                  |L1.24|
000018  f44f5003          MOV      r0,#0x20c0            ;185
00001c  e7fa              B        |L1.20|
                  |L1.30|
00001e  f2420002          MOV      r0,#0x2002            ;189
000022  e7f7              B        |L1.20|
                  |L1.36|
000024  f44f5000          MOV      r0,#0x2000            ;193
000028  e7f4              B        |L1.20|
                  |L1.42|
;;;198    	}
;;;199    }
00002a  4770              BX       lr
;;;200    
                          ENDP


                          AREA ||i.AD9833_SetCS||, CODE, READONLY, ALIGN=2

                  AD9833_SetCS PROC
;;;119    */
;;;120    void AD9833_SetCS(uint8_t _level)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
;;;122    	if (_level == 0)
;;;123    	{
;;;124    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
;;;125    
;;;126    		#ifdef SOFT_SPI		/* 软件SPI */
;;;127    			bsp_SetSpiSck(1);
;;;128    			AD9833_CS_0();	/* 片选 = 0 */
;;;129    		#endif
;;;130    
;;;131    		#ifdef HARD_SPI		/* 硬件SPI  -- AD9833 支持最快40MHz 的SCK速率 */
;;;132    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;133    				| SPI_CPOL_High | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;134    
;;;135    			AD9833_CS_0();	/* 片选 = 1 */
000002  4d08              LDR      r5,|L2.36|
000004  2408              MOVS     r4,#8
000006  b120              CBZ      r0,|L2.18|
;;;136    		#endif
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		AD9833_CS_1();	/* 片选 = 1 */
000008  612c              STR      r4,[r5,#0x10]
;;;141    
;;;142    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
00000a  e8bd4070          POP      {r4-r6,lr}
00000e  f7ffbffe          B.W      bsp_SpiBusExit
                  |L2.18|
000012  f7fffffe          BL       bsp_SpiBusEnter
000016  f2403016          MOV      r0,#0x316             ;132
00001a  f7fffffe          BL       bsp_SPI_Init
00001e  616c              STR      r4,[r5,#0x14]         ;135
;;;143    	}
;;;144    }
000020  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0x40011000

                          AREA ||i.AD9833_SetWaveFreq||, CODE, READONLY, ALIGN=2

                  AD9833_SetWaveFreq PROC
;;;258    */
;;;259    void AD9833_SetWaveFreq(uint32_t _WaveFreq)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261    	uint32_t freq_reg;
;;;262    
;;;263    	/*
;;;264    		输出频率 _WaveFreq = (25000000 / 2^28) * freq_reg
;;;265    		寄存器值 freq_reg =  268435456 / 25000000	* _WaveFreq
;;;266    	
;;;267    		268435456 / 25000000 = 10.73741824
;;;268    	*/	
;;;269    	//freq = 268435456.0 / AD9833_SYSTEM_CLOCK * _freq;
;;;270    	freq_reg = ((int64_t)_WaveFreq * 268435456) / (10 * AD9833_SYSTEM_CLOCK);	
000002  0901              LSRS     r1,r0,#4
000004  0700              LSLS     r0,r0,#28
000006  4a05              LDR      r2,|L3.28|
000008  2300              MOVS     r3,#0
00000a  f7fffffe          BL       __aeabi_ldivmod
00000e  4601              MOV      r1,r0
;;;271    	
;;;272    	AD9833_WriteFreqReg(0, freq_reg);	/* 写频率寄存器 */
000010  e8bd4010          POP      {r4,lr}
000014  2000              MOVS     r0,#0
000016  f7ffbffe          B.W      AD9833_WriteFreqReg
;;;273    }
;;;274    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x0ee6b280

                          AREA ||i.AD9833_Write16Bits||, CODE, READONLY, ALIGN=1

                  AD9833_Write16Bits PROC
;;;153    */
;;;154    static void AD9833_Write16Bits(uint16_t _cmd)
000000  b510              PUSH     {r4,lr}
;;;155    {	
000002  4604              MOV      r4,r0
;;;156    	AD9833_SetCS(0);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       AD9833_SetCS
;;;157    
;;;158    	bsp_spiWrite1(_cmd >> 8);
00000a  0a20              LSRS     r0,r4,#8
00000c  f7fffffe          BL       bsp_spiWrite1
;;;159    	bsp_spiWrite1(_cmd);
000010  b2e0              UXTB     r0,r4
000012  f7fffffe          BL       bsp_spiWrite1
;;;160    
;;;161    	AD9833_SetCS(1);
000016  e8bd4010          POP      {r4,lr}
00001a  2001              MOVS     r0,#1
00001c  f7ffbffe          B.W      AD9833_SetCS
;;;162    }
;;;163    
                          ENDP


                          AREA ||i.AD9833_WriteFreqReg||, CODE, READONLY, ALIGN=1

                  AD9833_WriteFreqReg PROC
;;;209    */
;;;210    void AD9833_WriteFreqReg(uint8_t _mode, uint32_t _freq_reg)
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	uint16_t lsb_14bit;
;;;213    	uint16_t msb_14bit;
;;;214    	
;;;215    	lsb_14bit = _freq_reg & 0x3FFF;
000002  f3c1020d          UBFX     r2,r1,#0,#14
;;;216    	msb_14bit = (_freq_reg >> 14) & 0x3FFF;
000006  f3c1348d          UBFX     r4,r1,#14,#14
00000a  b158              CBZ      r0,|L5.36|
00000c  f5024200          ADD      r2,r2,#0x8000         ;211
;;;217    	if (_mode == 0)	/* 写频率寄存器0 */
;;;218    	{
;;;219    		AD9833_Write16Bits(0x4000 + lsb_14bit);	/* 写2次，第1次是低14位 */		
;;;220    		AD9833_Write16Bits(0x4000 + msb_14bit);	/* 写2次，第2次是高14位 */	
;;;221    	}
;;;222    	else	/* 写频率寄存器1 */
;;;223    	{	
;;;224    		AD9833_Write16Bits(0x8000 + lsb_14bit);	/* 写2次，第1次是低14位 */		
000010  b290              UXTH     r0,r2
000012  f7fffffe          BL       AD9833_Write16Bits
000016  f5044400          ADD      r4,r4,#0x8000
;;;225    		AD9833_Write16Bits(0x8000 + msb_14bit);	/* 写2次，第2次是高14位 */	
00001a  b2a0              UXTH     r0,r4
                  |L5.28|
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      AD9833_Write16Bits
                  |L5.36|
000024  f5024080          ADD      r0,r2,#0x4000         ;219
000028  f7fffffe          BL       AD9833_Write16Bits
00002c  f5044080          ADD      r0,r4,#0x4000         ;220
000030  e7f4              B        |L5.28|
;;;226    	}
;;;227    }
;;;228    
                          ENDP


                          AREA ||i.AD9833_WritePhaseReg||, CODE, READONLY, ALIGN=1

                  AD9833_WritePhaseReg PROC
;;;237    */
;;;238    void AD9833_WritePhaseReg(uint8_t _mode, uint32_t _phase_reg)
000000  f3c1010b          UBFX     r1,r1,#0,#12
;;;239    {
000004  b120              CBZ      r0,|L6.16|
000006  f5014160          ADD      r1,r1,#0xe000
                  |L6.10|
;;;240    	_phase_reg &= 0xFFF;
;;;241    	if (_mode == 0)	/* 写相位寄存器0 */
;;;242    	{
;;;243    		AD9833_Write16Bits(0xC000 + _phase_reg);
;;;244    	}
;;;245    	else	/* 写相位寄存器1 */
;;;246    	{	
;;;247    		AD9833_Write16Bits(0xE000 + _phase_reg);
00000a  b288              UXTH     r0,r1
00000c  f7ffbffe          B.W      AD9833_Write16Bits
                  |L6.16|
000010  f5014140          ADD      r1,r1,#0xc000
000014  e7f9              B        |L6.10|
;;;248    	}
;;;249    }
;;;250    
                          ENDP


                          AREA ||i.bsp_InitAD9833||, CODE, READONLY, ALIGN=2

                  bsp_InitAD9833 PROC
;;;65     */
;;;66     void bsp_InitAD9833(void)
000000  b508              PUSH     {r3,lr}
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
00000a  4815              LDR      r0,|L7.96|
00000c  2108              MOVS     r1,#8
00000e  6101              STR      r1,[r0,#0x10]
000010  2210              MOVS     r2,#0x10
000012  f88d2003          STRB     r2,[sp,#3]
000016  2203              MOVS     r2,#3
000018  f88d2002          STRB     r2,[sp,#2]
00001c  f8ad1000          STRH     r1,[sp,#0]
000020  4669              MOV      r1,sp
000022  f7fffffe          BL       GPIO_Init
;;;67     {
;;;68     	AD9833_ConfigGPIO();	/* 配置片选。SPI总线在 bsp_spi_bus.c 中进行配置 */
;;;69     	
;;;70     	/* 初始化流程 */
;;;71     	{
;;;72     		/* 重启不会重新设置相位、频率和控制寄存器。 */
;;;73     		AD9833_Write16Bits(0x0100);	/* 写控制寄存器，复位寄存器 RESET = 0 */
000026  f44f7080          MOV      r0,#0x100
00002a  f7fffffe          BL       AD9833_Write16Bits
;;;74     		
;;;75     		AD9833_WriteFreqReg(0, 0);	/* 清零频率寄存器 0 */
00002e  2100              MOVS     r1,#0
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       AD9833_WriteFreqReg
;;;76     		AD9833_WriteFreqReg(1, 0);	/* 清零频率寄存器 1 */
000036  2100              MOVS     r1,#0
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       AD9833_WriteFreqReg
;;;77     		
;;;78     		AD9833_WritePhaseReg(0, 0);	/* 清零相位寄存器 0 */
00003e  2100              MOVS     r1,#0
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       AD9833_WritePhaseReg
;;;79     		AD9833_WritePhaseReg(1, 0);	/* 清零相位寄存器 1 */		
000046  2100              MOVS     r1,#0
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       AD9833_WritePhaseReg
;;;80     		
;;;81     		AD9833_Write16Bits(0x0000);	/* 写控制寄存器，复位寄存器 RESET = 1 */
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       AD9833_Write16Bits
;;;82     	}
;;;83     	
;;;84     	AD9833_SelectWave(NONE_WAVE);	/* 停止输出 */
000054  e8bd4008          POP      {r3,lr}
000058  2000              MOVS     r0,#0
00005a  f7ffbffe          B.W      AD9833_SelectWave
;;;85     }
;;;86     
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      0x40011000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_ad9833.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_ad9833_c_d020938e____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_bsp_ad9833_c_d020938e____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_ad9833_c_d020938e____REVSH|
#line 128
|__asm___12_bsp_ad9833_c_d020938e____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
