; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_mpu6050.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_mpu6050.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_mpu6050.crf ..\..\User\bsp\src\bsp_mpu6050.c]
                          THUMB

                          AREA ||i.MPU6050_ReadByte||, CODE, READONLY, ALIGN=1

                  MPU6050_ReadByte PROC
;;;75     */
;;;76     uint8_t MPU6050_ReadByte(uint8_t _ucRegAddr)
000000  b510              PUSH     {r4,lr}
;;;77     {
000002  4604              MOV      r4,r0
;;;78     	uint8_t ucData;
;;;79     
;;;80     	i2c_Start();                  			/* 总线开始信号 */
000004  f7fffffe          BL       i2c_Start
;;;81     	i2c_SendByte(MPU6050_SLAVE_ADDRESS);	/* 发送设备地址+写信号 */
000008  20d0              MOVS     r0,#0xd0
00000a  f7fffffe          BL       i2c_SendByte
;;;82     	i2c_WaitAck();
00000e  f7fffffe          BL       i2c_WaitAck
;;;83     	i2c_SendByte(_ucRegAddr);     			/* 发送存储单元地址 */
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       i2c_SendByte
;;;84     	i2c_WaitAck();
000018  f7fffffe          BL       i2c_WaitAck
;;;85     
;;;86     	i2c_Start();                  			/* 总线开始信号 */
00001c  f7fffffe          BL       i2c_Start
;;;87     
;;;88     	i2c_SendByte(MPU6050_SLAVE_ADDRESS+1); 	/* 发送设备地址+读信号 */
000020  20d1              MOVS     r0,#0xd1
000022  f7fffffe          BL       i2c_SendByte
;;;89     	i2c_WaitAck();
000026  f7fffffe          BL       i2c_WaitAck
;;;90     
;;;91     	ucData = i2c_ReadByte();       			/* 读出寄存器数据 */
00002a  f7fffffe          BL       i2c_ReadByte
00002e  4604              MOV      r4,r0
;;;92     	i2c_NAck();
000030  f7fffffe          BL       i2c_NAck
;;;93     	i2c_Stop();                  			/* 总线停止信号 */
000034  f7fffffe          BL       i2c_Stop
;;;94     	return ucData;
000038  4620              MOV      r0,r4
;;;95     }
00003a  bd10              POP      {r4,pc}
;;;96     
                          ENDP


                          AREA ||i.MPU6050_ReadData||, CODE, READONLY, ALIGN=2

                  MPU6050_ReadData PROC
;;;105    */
;;;106    void MPU6050_ReadData(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;107    {
;;;108    	uint8_t ucReadBuf[14];
;;;109    	uint8_t i;
;;;110    	uint8_t ack;
;;;111    
;;;112    #if 1 /* 连续读 */
;;;113    	i2c_Start();                  			/* 总线开始信号 */
000002  f7fffffe          BL       i2c_Start
;;;114    	i2c_SendByte(MPU6050_SLAVE_ADDRESS);	/* 发送设备地址+写信号 */
000006  20d0              MOVS     r0,#0xd0
000008  f7fffffe          BL       i2c_SendByte
;;;115    	ack = i2c_WaitAck();
00000c  f7fffffe          BL       i2c_WaitAck
;;;116    	if (ack != 0)
000010  b968              CBNZ     r0,|L2.46|
;;;117    	{
;;;118    		i2c_Stop(); 
;;;119    		return;
;;;120    	}
;;;121    	i2c_SendByte(ACCEL_XOUT_H);     		/* 发送存储单元地址  */
000012  203b              MOVS     r0,#0x3b
000014  f7fffffe          BL       i2c_SendByte
;;;122    	ack = i2c_WaitAck();
000018  f7fffffe          BL       i2c_WaitAck
;;;123    	if (ack != 0)
00001c  b938              CBNZ     r0,|L2.46|
;;;124    	{
;;;125    		i2c_Stop(); 
;;;126    		return;
;;;127    	}
;;;128    
;;;129    	i2c_Start();                  			/* 总线开始信号 */
00001e  f7fffffe          BL       i2c_Start
;;;130    
;;;131    	i2c_SendByte(MPU6050_SLAVE_ADDRESS + 1); /* 发送设备地址+读信号 */
000022  20d1              MOVS     r0,#0xd1
000024  f7fffffe          BL       i2c_SendByte
;;;132    	ack = i2c_WaitAck();
000028  f7fffffe          BL       i2c_WaitAck
;;;133    	if (ack != 0)
00002c  b110              CBZ      r0,|L2.52|
                  |L2.46|
;;;134    	{
;;;135    		i2c_Stop(); 
00002e  f7fffffe          BL       i2c_Stop
;;;136    		return;
;;;137    	}
;;;138    
;;;139    	for (i = 0; i < 13; i++)
;;;140    	{
;;;141    		ucReadBuf[i] = i2c_ReadByte();       			/* 读出寄存器数据 */
;;;142    		i2c_Ack();
;;;143    	}
;;;144    
;;;145    	/* 读最后一个字节时给 NAck */
;;;146    	ucReadBuf[13] = i2c_ReadByte();
;;;147    	i2c_NAck();
;;;148    
;;;149    	i2c_Stop();                  			/* 总线停止信号 */
;;;150    
;;;151    #else	/* 单字节读 */
;;;152    	for (i = 0 ; i < 14; i++)
;;;153    	{
;;;154    		ucReadBuf[i] = MPU6050_ReadByte(ACCEL_XOUT_H + i);
;;;155    	}
;;;156    #endif
;;;157    
;;;158    	/* 将读出的数据保存到全局结构体变量 */
;;;159    	g_tMPU6050.Accel_X = (ucReadBuf[0] << 8) + ucReadBuf[1];
;;;160    	g_tMPU6050.Accel_Y = (ucReadBuf[2] << 8) + ucReadBuf[3];
;;;161    	g_tMPU6050.Accel_Z = (ucReadBuf[4] << 8) + ucReadBuf[5];
;;;162    
;;;163    	g_tMPU6050.Temp = (int16_t)((ucReadBuf[6] << 8) + ucReadBuf[7]);
;;;164    
;;;165    	g_tMPU6050.GYRO_X = (ucReadBuf[8] << 8) + ucReadBuf[9];
;;;166    	g_tMPU6050.GYRO_Y = (ucReadBuf[10] << 8) + ucReadBuf[11];
;;;167    	g_tMPU6050.GYRO_Z = (ucReadBuf[12] << 8) + ucReadBuf[13];
;;;168    }
000032  bd7f              POP      {r0-r6,pc}
                  |L2.52|
000034  2400              MOVS     r4,#0                 ;139
000036  466d              MOV      r5,sp                 ;108
                  |L2.56|
000038  f7fffffe          BL       i2c_ReadByte
00003c  5528              STRB     r0,[r5,r4]            ;141
00003e  f7fffffe          BL       i2c_Ack
000042  1c64              ADDS     r4,r4,#1              ;142
000044  b2e4              UXTB     r4,r4                 ;139
000046  2c0d              CMP      r4,#0xd               ;139
000048  d3f6              BCC      |L2.56|
00004a  f7fffffe          BL       i2c_ReadByte
00004e  f88d000d          STRB     r0,[sp,#0xd]          ;146
000052  f7fffffe          BL       i2c_NAck
000056  f7fffffe          BL       i2c_Stop
00005a  f89d0001          LDRB     r0,[sp,#1]            ;159
00005e  f89d1000          LDRB     r1,[sp,#0]            ;159
000062  eb002101          ADD      r1,r0,r1,LSL #8       ;159
000066  4816              LDR      r0,|L2.192|
000068  8001              STRH     r1,[r0,#0]            ;159
00006a  f89d1003          LDRB     r1,[sp,#3]            ;160
00006e  f89d2002          LDRB     r2,[sp,#2]            ;160
000072  eb012102          ADD      r1,r1,r2,LSL #8       ;160
000076  8041              STRH     r1,[r0,#2]            ;160
000078  f89d1005          LDRB     r1,[sp,#5]            ;161
00007c  f89d2004          LDRB     r2,[sp,#4]            ;161
000080  eb012102          ADD      r1,r1,r2,LSL #8       ;161
000084  8081              STRH     r1,[r0,#4]            ;161
000086  f89d1007          LDRB     r1,[sp,#7]            ;163
00008a  f89d2006          LDRB     r2,[sp,#6]            ;163
00008e  eb012102          ADD      r1,r1,r2,LSL #8       ;163
000092  80c1              STRH     r1,[r0,#6]            ;163
000094  f89d1009          LDRB     r1,[sp,#9]            ;165
000098  f89d2008          LDRB     r2,[sp,#8]            ;165
00009c  eb012102          ADD      r1,r1,r2,LSL #8       ;165
0000a0  8101              STRH     r1,[r0,#8]            ;165
0000a2  f89d100b          LDRB     r1,[sp,#0xb]          ;166
0000a6  f89d200a          LDRB     r2,[sp,#0xa]          ;166
0000aa  eb012102          ADD      r1,r1,r2,LSL #8       ;166
0000ae  8141              STRH     r1,[r0,#0xa]          ;166
0000b0  f89d100d          LDRB     r1,[sp,#0xd]          ;167
0000b4  f89d200c          LDRB     r2,[sp,#0xc]          ;167
0000b8  eb012102          ADD      r1,r1,r2,LSL #8       ;167
0000bc  8181              STRH     r1,[r0,#0xc]          ;167
0000be  bd7f              POP      {r0-r6,pc}
;;;169    
                          ENDP

                  |L2.192|
                          DCD      ||.bss||

                          AREA ||i.MPU6050_WriteByte||, CODE, READONLY, ALIGN=1

                  MPU6050_WriteByte PROC
;;;51     */
;;;52     void MPU6050_WriteByte(uint8_t _ucRegAddr, uint8_t _ucRegData)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;54         i2c_Start();							/* 总线开始信号 */
000006  f7fffffe          BL       i2c_Start
;;;55     
;;;56         i2c_SendByte(MPU6050_SLAVE_ADDRESS);	/* 发送设备地址+写信号 */
00000a  20d0              MOVS     r0,#0xd0
00000c  f7fffffe          BL       i2c_SendByte
;;;57     	i2c_WaitAck();
000010  f7fffffe          BL       i2c_WaitAck
;;;58     
;;;59         i2c_SendByte(_ucRegAddr);				/* 内部寄存器地址 */
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       i2c_SendByte
;;;60     	i2c_WaitAck();
00001a  f7fffffe          BL       i2c_WaitAck
;;;61     
;;;62         i2c_SendByte(_ucRegData);				/* 内部寄存器数据 */
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       i2c_SendByte
;;;63     	i2c_WaitAck();
000024  f7fffffe          BL       i2c_WaitAck
;;;64     
;;;65         i2c_Stop();                   			/* 总线停止信号 */
000028  e8bd4070          POP      {r4-r6,lr}
00002c  f7ffbffe          B.W      i2c_Stop
;;;66     }
;;;67     
                          ENDP


                          AREA ||i.bsp_InitMPU6050||, CODE, READONLY, ALIGN=1

                  bsp_InitMPU6050 PROC
;;;33     */
;;;34     void bsp_InitMPU6050(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36     	MPU6050_WriteByte(PWR_MGMT_1, 0x00);	//解除休眠状态
000002  2100              MOVS     r1,#0
000004  206b              MOVS     r0,#0x6b
000006  f7fffffe          BL       MPU6050_WriteByte
;;;37     	MPU6050_WriteByte(SMPLRT_DIV, 0x07);
00000a  2107              MOVS     r1,#7
00000c  2019              MOVS     r0,#0x19
00000e  f7fffffe          BL       MPU6050_WriteByte
;;;38     	MPU6050_WriteByte(CONFIG, 0x06);
000012  2106              MOVS     r1,#6
000014  201a              MOVS     r0,#0x1a
000016  f7fffffe          BL       MPU6050_WriteByte
;;;39     	MPU6050_WriteByte(GYRO_CONFIG, 0xE8);
00001a  21e8              MOVS     r1,#0xe8
00001c  201b              MOVS     r0,#0x1b
00001e  f7fffffe          BL       MPU6050_WriteByte
;;;40     	MPU6050_WriteByte(ACCEL_CONFIG, 0x01);
000022  2101              MOVS     r1,#1
000024  e8bd4010          POP      {r4,lr}
000028  201c              MOVS     r0,#0x1c
00002a  f7ffbffe          B.W      MPU6050_WriteByte
;;;41     }
;;;42     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_tMPU6050
                          %        14

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_mpu6050.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_mpu6050_c_49ed8fcc____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_mpu6050_c_49ed8fcc____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_mpu6050_c_49ed8fcc____REVSH|
#line 128
|__asm___13_bsp_mpu6050_c_49ed8fcc____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
