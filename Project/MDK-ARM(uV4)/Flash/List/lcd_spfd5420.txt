; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\lcd_spfd5420.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\lcd_spfd5420.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\lcd_spfd5420.crf ..\..\User\bsp\src\LCD_SPFD5420.c]
                          THUMB

                          AREA ||i.Init_5420_4001||, CODE, READONLY, ALIGN=1

                  Init_5420_4001 PROC
;;;255    */
;;;256    static void Init_5420_4001(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;257    {
;;;258    	/* 初始化LCD，写LCD寄存器进行配置 */
;;;259    	SPFD5420_WriteReg(0x0000, 0x0000);
000004  2100              MOVS     r1,#0
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       SPFD5420_WriteReg
;;;260    	SPFD5420_WriteReg(0x0001, 0x0100);
00000c  f44f7680          MOV      r6,#0x100
000010  4631              MOV      r1,r6
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       SPFD5420_WriteReg
;;;261    	SPFD5420_WriteReg(0x0002, 0x0100);
000018  4631              MOV      r1,r6
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       SPFD5420_WriteReg
;;;262    
;;;263    	/*
;;;264    		R003H 寄存器很关键， Entry Mode ，决定了扫描方向
;;;265    		参见：SPFD5420A.pdf 第15页
;;;266    
;;;267    		240x400屏幕物理坐标(px,py)如下:
;;;268    		    R003 = 0x1018                  R003 = 0x1008
;;;269    		  -------------------          -------------------
;;;270    		 |(0,0)              |        |(0,0)              |
;;;271    		 |                   |        |					  |
;;;272    		 |  ^           ^    |        |   ^           ^   |
;;;273    		 |  |           |    |        |   |           |   |
;;;274    		 |  |           |    |        |   |           |   |
;;;275    		 |  |           |    |        |   |           |   |
;;;276    		 |  |  ------>  |    |        |   | <------   |   |
;;;277    		 |  |           |    |        |   |           |   |
;;;278    		 |  |           |    |        |   |           |   |
;;;279    		 |  |           |    |        |   |           |   |
;;;280    		 |  |           |    |        |   |           |   |
;;;281    		 |                   |        |					  |
;;;282    		 |                   |        |                   |
;;;283    		 |      (x=239,y=399)|        |      (x=239,y=399)|
;;;284    		 |-------------------|        |-------------------|
;;;285    		 |                   |        |                   |
;;;286    		  -------------------          -------------------
;;;287    
;;;288    		按照安富莱开发板LCD的方向，我们期望的虚拟坐标和扫描方向如下：(和上图第1个吻合)
;;;289    		 --------------------------------
;;;290    		|  |(0,0)                        |
;;;291    		|  |     --------->              |
;;;292    		|  |         |                   |
;;;293    		|  |         |                   |
;;;294    		|  |         |                   |
;;;295    		|  |         V                   |
;;;296    		|  |     --------->              |
;;;297    		|  |                    (399,239)|
;;;298    		 --------------------------------
;;;299    
;;;300    		虚拟坐标(x,y) 和物理坐标的转换关系
;;;301    		x = 399 - py;
;;;302    		y = px;
;;;303    
;;;304    		py = 399 - x;
;;;305    		px = y;
;;;306    
;;;307    	*/
;;;308    	SPFD5420_WriteReg(0x0003, 0x1018); /* 0x1018 1030 */
000020  f2410118          MOV      r1,#0x1018
000024  2003              MOVS     r0,#3
000026  f7fffffe          BL       SPFD5420_WriteReg
;;;309    
;;;310    	SPFD5420_WriteReg(0x0008, 0x0808);
00002a  f6400108          MOV      r1,#0x808
00002e  2008              MOVS     r0,#8
000030  f7fffffe          BL       SPFD5420_WriteReg
;;;311    	SPFD5420_WriteReg(0x0009, 0x0001);
000034  2101              MOVS     r1,#1
000036  2009              MOVS     r0,#9
000038  f7fffffe          BL       SPFD5420_WriteReg
;;;312    	SPFD5420_WriteReg(0x000B, 0x0010);
00003c  2110              MOVS     r1,#0x10
00003e  200b              MOVS     r0,#0xb
000040  f7fffffe          BL       SPFD5420_WriteReg
;;;313    	SPFD5420_WriteReg(0x000C, 0x0000);
000044  2100              MOVS     r1,#0
000046  200c              MOVS     r0,#0xc
000048  f7fffffe          BL       SPFD5420_WriteReg
;;;314    	SPFD5420_WriteReg(0x000F, 0x0000);
00004c  2100              MOVS     r1,#0
00004e  200f              MOVS     r0,#0xf
000050  f7fffffe          BL       SPFD5420_WriteReg
;;;315    	SPFD5420_WriteReg(0x0007, 0x0001);
000054  2101              MOVS     r1,#1
000056  2007              MOVS     r0,#7
000058  f7fffffe          BL       SPFD5420_WriteReg
;;;316    	SPFD5420_WriteReg(0x0010, 0x0013);
00005c  2113              MOVS     r1,#0x13
00005e  2010              MOVS     r0,#0x10
000060  f7fffffe          BL       SPFD5420_WriteReg
;;;317    	SPFD5420_WriteReg(0x0011, 0x0501);
000064  f2405401          MOV      r4,#0x501
000068  4621              MOV      r1,r4
00006a  2011              MOVS     r0,#0x11
00006c  f7fffffe          BL       SPFD5420_WriteReg
;;;318    	SPFD5420_WriteReg(0x0012, 0x0300);
000070  f44f7540          MOV      r5,#0x300
000074  4629              MOV      r1,r5
000076  2012              MOVS     r0,#0x12
000078  f7fffffe          BL       SPFD5420_WriteReg
;;;319    	SPFD5420_WriteReg(0x0020, 0x021E);
00007c  f240211e          MOV      r1,#0x21e
000080  2020              MOVS     r0,#0x20
000082  f7fffffe          BL       SPFD5420_WriteReg
;;;320    	SPFD5420_WriteReg(0x0021, 0x0202);
000086  f2402102          MOV      r1,#0x202
00008a  2021              MOVS     r0,#0x21
00008c  f7fffffe          BL       SPFD5420_WriteReg
;;;321    	SPFD5420_WriteReg(0x0090, 0x8000);
000090  01f1              LSLS     r1,r6,#7
000092  2090              MOVS     r0,#0x90
000094  f7fffffe          BL       SPFD5420_WriteReg
;;;322    	SPFD5420_WriteReg(0x0100, 0x17B0);
000098  f24171b0          MOV      r1,#0x17b0
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       SPFD5420_WriteReg
;;;323    	SPFD5420_WriteReg(0x0101, 0x0147);
0000a2  1c76              ADDS     r6,r6,#1
0000a4  f2401147          MOV      r1,#0x147
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       SPFD5420_WriteReg
;;;324    	SPFD5420_WriteReg(0x0102, 0x0135);
0000ae  f2401135          MOV      r1,#0x135
0000b2  1c70              ADDS     r0,r6,#1
0000b4  f7fffffe          BL       SPFD5420_WriteReg
;;;325    	SPFD5420_WriteReg(0x0103, 0x0700);
0000b8  f44f61e0          MOV      r1,#0x700
0000bc  1cb0              ADDS     r0,r6,#2
0000be  f7fffffe          BL       SPFD5420_WriteReg
;;;326    	SPFD5420_WriteReg(0x0107, 0x0000);
0000c2  1db7              ADDS     r7,r6,#6
0000c4  2100              MOVS     r1,#0
0000c6  4638              MOV      r0,r7
0000c8  f7fffffe          BL       SPFD5420_WriteReg
;;;327    	SPFD5420_WriteReg(0x0110, 0x0001);
0000cc  2101              MOVS     r1,#1
0000ce  f44f7088          MOV      r0,#0x110
0000d2  f7fffffe          BL       SPFD5420_WriteReg
;;;328    	SPFD5420_WriteReg(0x0210, 0x0000);
0000d6  f44f7804          MOV      r8,#0x210
0000da  2100              MOVS     r1,#0
0000dc  4640              MOV      r0,r8
0000de  f7fffffe          BL       SPFD5420_WriteReg
;;;329    	SPFD5420_WriteReg(0x0211, 0x00EF);
0000e2  f2402911          MOV      r9,#0x211
0000e6  21ef              MOVS     r1,#0xef
0000e8  4648              MOV      r0,r9
0000ea  f7fffffe          BL       SPFD5420_WriteReg
;;;330    	SPFD5420_WriteReg(0x0212, 0x0000);
0000ee  f2402a12          MOV      r10,#0x212
0000f2  2100              MOVS     r1,#0
0000f4  4650              MOV      r0,r10
0000f6  f7fffffe          BL       SPFD5420_WriteReg
;;;331    	SPFD5420_WriteReg(0x0213, 0x018F);
0000fa  f2401b8f          MOV      r11,#0x18f
0000fe  4659              MOV      r1,r11
000100  f2402013          MOV      r0,#0x213
000104  f7fffffe          BL       SPFD5420_WriteReg
;;;332    	SPFD5420_WriteReg(0x0280, 0x0000);
000108  2100              MOVS     r1,#0
00010a  1060              ASRS     r0,r4,#1
00010c  f7fffffe          BL       SPFD5420_WriteReg
;;;333    	SPFD5420_WriteReg(0x0281, 0x0004);
000110  2104              MOVS     r1,#4
000112  f2402081          MOV      r0,#0x281
000116  f7fffffe          BL       SPFD5420_WriteReg
;;;334    	SPFD5420_WriteReg(0x0282, 0x0000);
00011a  2100              MOVS     r1,#0
00011c  f2402082          MOV      r0,#0x282
000120  f7fffffe          BL       SPFD5420_WriteReg
;;;335    	SPFD5420_WriteReg(0x0300, 0x0101);
000124  4631              MOV      r1,r6
000126  4628              MOV      r0,r5
000128  f7fffffe          BL       SPFD5420_WriteReg
;;;336    	SPFD5420_WriteReg(0x0301, 0x0B2C);
00012c  f640312c          MOV      r1,#0xb2c
000130  1c68              ADDS     r0,r5,#1
000132  f7fffffe          BL       SPFD5420_WriteReg
;;;337    	SPFD5420_WriteReg(0x0302, 0x1030);
000136  f2410130          MOV      r1,#0x1030
00013a  1ca8              ADDS     r0,r5,#2
00013c  f7fffffe          BL       SPFD5420_WriteReg
;;;338    	SPFD5420_WriteReg(0x0303, 0x3010);
000140  f2430110          MOV      r1,#0x3010
000144  1ce8              ADDS     r0,r5,#3
000146  f7fffffe          BL       SPFD5420_WriteReg
;;;339    	SPFD5420_WriteReg(0x0304, 0x2C0B);
00014a  f642410b          MOV      r1,#0x2c0b
00014e  1d28              ADDS     r0,r5,#4
000150  f7fffffe          BL       SPFD5420_WriteReg
;;;340    	SPFD5420_WriteReg(0x0305, 0x0101);
000154  4631              MOV      r1,r6
000156  1d68              ADDS     r0,r5,#5
000158  f7fffffe          BL       SPFD5420_WriteReg
;;;341    	SPFD5420_WriteReg(0x0306, 0x0807);
00015c  f6400107          MOV      r1,#0x807
000160  1da8              ADDS     r0,r5,#6
000162  f7fffffe          BL       SPFD5420_WriteReg
;;;342    	SPFD5420_WriteReg(0x0307, 0x0708);
000166  f44f61e1          MOV      r1,#0x708
00016a  1de8              ADDS     r0,r5,#7
00016c  f7fffffe          BL       SPFD5420_WriteReg
;;;343    	SPFD5420_WriteReg(0x0308, 0x0107);
000170  4639              MOV      r1,r7
000172  f44f7042          MOV      r0,#0x308
000176  f7fffffe          BL       SPFD5420_WriteReg
;;;344    	SPFD5420_WriteReg(0x0309, 0x0105);
00017a  1d31              ADDS     r1,r6,#4
00017c  f2403009          MOV      r0,#0x309
000180  f7fffffe          BL       SPFD5420_WriteReg
;;;345    	SPFD5420_WriteReg(0x030A, 0x0F04);
000184  f6407104          MOV      r1,#0xf04
000188  f240300a          MOV      r0,#0x30a
00018c  f7fffffe          BL       SPFD5420_WriteReg
;;;346    	SPFD5420_WriteReg(0x030B, 0x0F00);
000190  f44f6170          MOV      r1,#0xf00
000194  f240300b          MOV      r0,#0x30b
000198  f7fffffe          BL       SPFD5420_WriteReg
;;;347    	SPFD5420_WriteReg(0x030C, 0x000F);
00019c  210f              MOVS     r1,#0xf
00019e  f44f7043          MOV      r0,#0x30c
0001a2  f7fffffe          BL       SPFD5420_WriteReg
;;;348    	SPFD5420_WriteReg(0x030D, 0x040F);
0001a6  f240410f          MOV      r1,#0x40f
0001aa  f240300d          MOV      r0,#0x30d
0001ae  f7fffffe          BL       SPFD5420_WriteReg
;;;349    	SPFD5420_WriteReg(0x030E, 0x0300);
0001b2  4629              MOV      r1,r5
0001b4  f240300e          MOV      r0,#0x30e
0001b8  f7fffffe          BL       SPFD5420_WriteReg
;;;350    	SPFD5420_WriteReg(0x030F, 0x0701);
0001bc  f2407101          MOV      r1,#0x701
0001c0  f240300f          MOV      r0,#0x30f
0001c4  f7fffffe          BL       SPFD5420_WriteReg
;;;351    	SPFD5420_WriteReg(0x0400, 0x3500);
0001c8  f44f5154          MOV      r1,#0x3500
0001cc  f44f6080          MOV      r0,#0x400
0001d0  f7fffffe          BL       SPFD5420_WriteReg
;;;352    	SPFD5420_WriteReg(0x0401, 0x0001);
0001d4  2101              MOVS     r1,#1
0001d6  f2404001          MOV      r0,#0x401
0001da  f7fffffe          BL       SPFD5420_WriteReg
;;;353    	SPFD5420_WriteReg(0x0404, 0x0000);
0001de  2100              MOVS     r1,#0
0001e0  00b0              LSLS     r0,r6,#2
0001e2  f7fffffe          BL       SPFD5420_WriteReg
;;;354    	SPFD5420_WriteReg(0x0500, 0x0000);
0001e6  2100              MOVS     r1,#0
0001e8  1e60              SUBS     r0,r4,#1
0001ea  f7fffffe          BL       SPFD5420_WriteReg
;;;355    	SPFD5420_WriteReg(0x0501, 0x0000);
0001ee  2100              MOVS     r1,#0
0001f0  4620              MOV      r0,r4
0001f2  f7fffffe          BL       SPFD5420_WriteReg
;;;356    	SPFD5420_WriteReg(0x0502, 0x0000);
0001f6  2100              MOVS     r1,#0
0001f8  1c60              ADDS     r0,r4,#1
0001fa  f7fffffe          BL       SPFD5420_WriteReg
;;;357    	SPFD5420_WriteReg(0x0503, 0x0000);
0001fe  2100              MOVS     r1,#0
000200  1ca0              ADDS     r0,r4,#2
000202  f7fffffe          BL       SPFD5420_WriteReg
;;;358    	SPFD5420_WriteReg(0x0504, 0x0000);
000206  2100              MOVS     r1,#0
000208  1ce0              ADDS     r0,r4,#3
00020a  f7fffffe          BL       SPFD5420_WriteReg
;;;359    	SPFD5420_WriteReg(0x0505, 0x0000);
00020e  2100              MOVS     r1,#0
000210  1d20              ADDS     r0,r4,#4
000212  f7fffffe          BL       SPFD5420_WriteReg
;;;360    	SPFD5420_WriteReg(0x0600, 0x0000);
000216  2100              MOVS     r1,#0
000218  0068              LSLS     r0,r5,#1
00021a  f7fffffe          BL       SPFD5420_WriteReg
;;;361    	SPFD5420_WriteReg(0x0606, 0x0000);
00021e  2100              MOVS     r1,#0
000220  f2406006          MOV      r0,#0x606
000224  f7fffffe          BL       SPFD5420_WriteReg
;;;362    	SPFD5420_WriteReg(0x06F0, 0x0000);
000228  2100              MOVS     r1,#0
00022a  f44f60de          MOV      r0,#0x6f0
00022e  f7fffffe          BL       SPFD5420_WriteReg
;;;363    	SPFD5420_WriteReg(0x07F0, 0x5420);
000232  f44f64fe          MOV      r4,#0x7f0
000236  f2454120          MOV      r1,#0x5420
00023a  4620              MOV      r0,r4
00023c  f7fffffe          BL       SPFD5420_WriteReg
;;;364    	SPFD5420_WriteReg(0x07DE, 0x0000);
000240  2100              MOVS     r1,#0
000242  f24070de          MOV      r0,#0x7de
000246  f7fffffe          BL       SPFD5420_WriteReg
;;;365    	SPFD5420_WriteReg(0x07F2, 0x00DF);
00024a  21df              MOVS     r1,#0xdf
00024c  1ca0              ADDS     r0,r4,#2
00024e  f7fffffe          BL       SPFD5420_WriteReg
;;;366    	SPFD5420_WriteReg(0x07F3, 0x0810);
000252  f44f6101          MOV      r1,#0x810
000256  1ce0              ADDS     r0,r4,#3
000258  f7fffffe          BL       SPFD5420_WriteReg
;;;367    	SPFD5420_WriteReg(0x07F4, 0x0077);
00025c  2177              MOVS     r1,#0x77
00025e  1d20              ADDS     r0,r4,#4
000260  f7fffffe          BL       SPFD5420_WriteReg
;;;368    	SPFD5420_WriteReg(0x07F5, 0x0021);
000264  2121              MOVS     r1,#0x21
000266  1d60              ADDS     r0,r4,#5
000268  f7fffffe          BL       SPFD5420_WriteReg
;;;369    	SPFD5420_WriteReg(0x07F0, 0x0000);
00026c  2100              MOVS     r1,#0
00026e  4620              MOV      r0,r4
000270  f7fffffe          BL       SPFD5420_WriteReg
;;;370    	SPFD5420_WriteReg(0x0007, 0x0173);
000274  f2401173          MOV      r1,#0x173
000278  2007              MOVS     r0,#7
00027a  f7fffffe          BL       SPFD5420_WriteReg
;;;371    
;;;372    	/* 设置显示窗口 WINDOWS */
;;;373    	SPFD5420_WriteReg(0x0210, 0);	/* 水平起始地址 */
00027e  2100              MOVS     r1,#0
000280  4640              MOV      r0,r8
000282  f7fffffe          BL       SPFD5420_WriteReg
;;;374    	SPFD5420_WriteReg(0x0211, 239);	/* 水平结束坐标 */
000286  21ef              MOVS     r1,#0xef
000288  4648              MOV      r0,r9
00028a  f7fffffe          BL       SPFD5420_WriteReg
;;;375    	SPFD5420_WriteReg(0x0212, 0);	/* 垂直起始地址 */
00028e  2100              MOVS     r1,#0
000290  4650              MOV      r0,r10
000292  f7fffffe          BL       SPFD5420_WriteReg
;;;376    	SPFD5420_WriteReg(0x0213, 399);	/* 垂直结束地址 */
000296  4659              MOV      r1,r11
000298  e8bd5ff0          POP      {r4-r12,lr}
00029c  f2402013          MOV      r0,#0x213
0002a0  f7ffbffe          B.W      SPFD5420_WriteReg
;;;377    }
;;;378    
                          ENDP


                          AREA ||i.Init_61509||, CODE, READONLY, ALIGN=1

                  Init_61509 PROC
;;;386    */
;;;387    static void Init_61509(void)
000000  b570              PUSH     {r4-r6,lr}
;;;388    {
;;;389    	SPFD5420_WriteReg(0x000,0x0000);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       SPFD5420_WriteReg
;;;390    	SPFD5420_WriteReg(0x000,0x0000);
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       SPFD5420_WriteReg
;;;391    	SPFD5420_WriteReg(0x000,0x0000);
000012  2100              MOVS     r1,#0
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       SPFD5420_WriteReg
;;;392    	SPFD5420_WriteReg(0x000,0x0000);
00001a  2100              MOVS     r1,#0
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SPFD5420_WriteReg
;;;393    	SPFD5420_Delaly10ms();
000022  f7fffffe          BL       SPFD5420_Delaly10ms
;;;394    
;;;395    	SPFD5420_WriteReg(0x008,0x0808);
000026  f6400108          MOV      r1,#0x808
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       SPFD5420_WriteReg
;;;396    	SPFD5420_WriteReg(0x010,0x0010);
000030  2110              MOVS     r1,#0x10
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       SPFD5420_WriteReg
;;;397    	SPFD5420_WriteReg(0x400,0x6200);
000038  f44f41c4          MOV      r1,#0x6200
00003c  f44f6080          MOV      r0,#0x400
000040  f7fffffe          BL       SPFD5420_WriteReg
;;;398    
;;;399    	SPFD5420_WriteReg(0x300,0x0c06);	/* GAMMA */
000044  f6404106          MOV      r1,#0xc06
000048  f44f7040          MOV      r0,#0x300
00004c  f7fffffe          BL       SPFD5420_WriteReg
;;;400    	SPFD5420_WriteReg(0x301,0x9d0f);
000050  f649510f          MOV      r1,#0x9d0f
000054  f2403001          MOV      r0,#0x301
000058  f7fffffe          BL       SPFD5420_WriteReg
;;;401    	SPFD5420_WriteReg(0x302,0x0b05);
00005c  f6403105          MOV      r1,#0xb05
000060  f2403002          MOV      r0,#0x302
000064  f7fffffe          BL       SPFD5420_WriteReg
;;;402    	SPFD5420_WriteReg(0x303,0x1217);
000068  f2412117          MOV      r1,#0x1217
00006c  f2403003          MOV      r0,#0x303
000070  f7fffffe          BL       SPFD5420_WriteReg
;;;403    	SPFD5420_WriteReg(0x304,0x3333);
000074  f2433133          MOV      r1,#0x3333
000078  f44f7041          MOV      r0,#0x304
00007c  f7fffffe          BL       SPFD5420_WriteReg
;;;404    	SPFD5420_WriteReg(0x305,0x1712);
000080  f2417112          MOV      r1,#0x1712
000084  f2403005          MOV      r0,#0x305
000088  f7fffffe          BL       SPFD5420_WriteReg
;;;405    	SPFD5420_WriteReg(0x306,0x950b);
00008c  f249510b          MOV      r1,#0x950b
000090  f2403006          MOV      r0,#0x306
000094  f7fffffe          BL       SPFD5420_WriteReg
;;;406    	SPFD5420_WriteReg(0x307,0x0f0d);
000098  f640710d          MOV      r1,#0xf0d
00009c  f2403007          MOV      r0,#0x307
0000a0  f7fffffe          BL       SPFD5420_WriteReg
;;;407    	SPFD5420_WriteReg(0x308,0x060c);
0000a4  f240610c          MOV      r1,#0x60c
0000a8  f44f7042          MOV      r0,#0x308
0000ac  f7fffffe          BL       SPFD5420_WriteReg
;;;408    	SPFD5420_WriteReg(0x309,0x0000);
0000b0  2100              MOVS     r1,#0
0000b2  f2403009          MOV      r0,#0x309
0000b6  f7fffffe          BL       SPFD5420_WriteReg
;;;409    
;;;410    	SPFD5420_WriteReg(0x011,0x0202);
0000ba  f2402102          MOV      r1,#0x202
0000be  2011              MOVS     r0,#0x11
0000c0  f7fffffe          BL       SPFD5420_WriteReg
;;;411    	SPFD5420_WriteReg(0x012,0x0101);
0000c4  f2401401          MOV      r4,#0x101
0000c8  4621              MOV      r1,r4
0000ca  2012              MOVS     r0,#0x12
0000cc  f7fffffe          BL       SPFD5420_WriteReg
;;;412    	SPFD5420_WriteReg(0x013,0x0001);
0000d0  2101              MOVS     r1,#1
0000d2  2013              MOVS     r0,#0x13
0000d4  f7fffffe          BL       SPFD5420_WriteReg
;;;413    
;;;414    	SPFD5420_WriteReg(0x007,0x0001);
0000d8  2101              MOVS     r1,#1
0000da  2007              MOVS     r0,#7
0000dc  f7fffffe          BL       SPFD5420_WriteReg
;;;415    	SPFD5420_WriteReg(0x100,0x0730);	/* BT,AP 0x0330　*/
0000e0  1e65              SUBS     r5,r4,#1
0000e2  f44f61e6          MOV      r1,#0x730
0000e6  4628              MOV      r0,r5
0000e8  f7fffffe          BL       SPFD5420_WriteReg
;;;416    	SPFD5420_WriteReg(0x101,0x0237);	/* DC0,DC1,VC */
0000ec  f2402137          MOV      r1,#0x237
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       SPFD5420_WriteReg
;;;417    	SPFD5420_WriteReg(0x103,0x2b00);	/* VDV	//0x0f00 */
0000f6  f44f512c          MOV      r1,#0x2b00
0000fa  1ca0              ADDS     r0,r4,#2
0000fc  f7fffffe          BL       SPFD5420_WriteReg
;;;418    	SPFD5420_WriteReg(0x280,0x4000);	/* VCM */
000100  01a9              LSLS     r1,r5,#6
000102  f44f7020          MOV      r0,#0x280
000106  f7fffffe          BL       SPFD5420_WriteReg
;;;419    	SPFD5420_WriteReg(0x102,0x81b0);	/* VRH,VCMR,PSON,PON */
00010a  f24811b0          MOV      r1,#0x81b0
00010e  1c60              ADDS     r0,r4,#1
000110  f7fffffe          BL       SPFD5420_WriteReg
;;;420    	SPFD5420_Delaly10ms();
000114  f7fffffe          BL       SPFD5420_Delaly10ms
;;;421    
;;;422    	SPFD5420_WriteReg(0x001,0x0100);
000118  4629              MOV      r1,r5
00011a  2001              MOVS     r0,#1
00011c  f7fffffe          BL       SPFD5420_WriteReg
;;;423    	SPFD5420_WriteReg(0x002,0x0100);
000120  4629              MOV      r1,r5
000122  2002              MOVS     r0,#2
000124  f7fffffe          BL       SPFD5420_WriteReg
;;;424    	/* SPFD5420_WriteReg(0x003,0x1030); */
;;;425    	SPFD5420_WriteReg(0x003,0x1018);
000128  f2410118          MOV      r1,#0x1018
00012c  2003              MOVS     r0,#3
00012e  f7fffffe          BL       SPFD5420_WriteReg
;;;426    	SPFD5420_WriteReg(0x009,0x0001);
000132  2101              MOVS     r1,#1
000134  2009              MOVS     r0,#9
000136  f7fffffe          BL       SPFD5420_WriteReg
;;;427    
;;;428    	SPFD5420_WriteReg(0x0C,0x0000);	/* MCU interface  */
00013a  2100              MOVS     r1,#0
00013c  200c              MOVS     r0,#0xc
00013e  f7fffffe          BL       SPFD5420_WriteReg
;;;429    	/*
;;;430    		SPFD5420_WriteReg(0x0C,0x0110);	//RGB interface 18bit
;;;431    		SPFD5420_WriteReg(0x0C,0x0111);	//RGB interface 16bit
;;;432    		SPFD5420_WriteReg(0x0C,0x0020);	//VSYNC interface
;;;433    	*/
;;;434    
;;;435    	SPFD5420_WriteReg(0x090,0x8000);
000142  01e9              LSLS     r1,r5,#7
000144  2090              MOVS     r0,#0x90
000146  f7fffffe          BL       SPFD5420_WriteReg
;;;436    	SPFD5420_WriteReg(0x00f,0x0000);
00014a  2100              MOVS     r1,#0
00014c  200f              MOVS     r0,#0xf
00014e  f7fffffe          BL       SPFD5420_WriteReg
;;;437    
;;;438    	SPFD5420_WriteReg(0x210,0x0000);
000152  2100              MOVS     r1,#0
000154  f44f7004          MOV      r0,#0x210
000158  f7fffffe          BL       SPFD5420_WriteReg
;;;439    	SPFD5420_WriteReg(0x211,0x00ef);
00015c  21ef              MOVS     r1,#0xef
00015e  f2402011          MOV      r0,#0x211
000162  f7fffffe          BL       SPFD5420_WriteReg
;;;440    	SPFD5420_WriteReg(0x212,0x0000);
000166  2100              MOVS     r1,#0
000168  f2402012          MOV      r0,#0x212
00016c  f7fffffe          BL       SPFD5420_WriteReg
;;;441    	SPFD5420_WriteReg(0x213,0x018f);
000170  f240118f          MOV      r1,#0x18f
000174  f2402013          MOV      r0,#0x213
000178  f7fffffe          BL       SPFD5420_WriteReg
;;;442    
;;;443    	SPFD5420_WriteReg(0x500,0x0000);
00017c  2100              MOVS     r1,#0
00017e  f44f60a0          MOV      r0,#0x500
000182  f7fffffe          BL       SPFD5420_WriteReg
;;;444    	SPFD5420_WriteReg(0x501,0x0000);
000186  2100              MOVS     r1,#0
000188  f2405001          MOV      r0,#0x501
00018c  f7fffffe          BL       SPFD5420_WriteReg
;;;445    	SPFD5420_WriteReg(0x502,0x005f);
000190  215f              MOVS     r1,#0x5f
000192  f2405002          MOV      r0,#0x502
000196  f7fffffe          BL       SPFD5420_WriteReg
;;;446    	SPFD5420_WriteReg(0x401,0x0001);
00019a  2101              MOVS     r1,#1
00019c  f2404001          MOV      r0,#0x401
0001a0  f7fffffe          BL       SPFD5420_WriteReg
;;;447    	SPFD5420_WriteReg(0x404,0x0000);
0001a4  2100              MOVS     r1,#0
0001a6  00a0              LSLS     r0,r4,#2
0001a8  f7fffffe          BL       SPFD5420_WriteReg
;;;448    	SPFD5420_Delaly10ms();
0001ac  f7fffffe          BL       SPFD5420_Delaly10ms
;;;449    	SPFD5420_WriteReg(0x007,0x0100);
0001b0  4629              MOV      r1,r5
0001b2  2007              MOVS     r0,#7
0001b4  f7fffffe          BL       SPFD5420_WriteReg
;;;450    	SPFD5420_Delaly10ms();
0001b8  f7fffffe          BL       SPFD5420_Delaly10ms
;;;451    	SPFD5420_WriteReg(0x200,0x0000);
0001bc  2100              MOVS     r1,#0
0001be  0068              LSLS     r0,r5,#1
0001c0  f7fffffe          BL       SPFD5420_WriteReg
;;;452    	SPFD5420_WriteReg(0x201,0x0000);
0001c4  e8bd4070          POP      {r4-r6,lr}
0001c8  2100              MOVS     r1,#0
0001ca  f2402001          MOV      r0,#0x201
0001ce  f7ffbffe          B.W      SPFD5420_WriteReg
;;;453    }
;;;454    
                          ENDP


                          AREA ||i.SPFD5420_ClrScr||, CODE, READONLY, ALIGN=2

                  SPFD5420_ClrScr PROC
;;;555    */
;;;556    void SPFD5420_ClrScr(uint16_t _usColor)
000000  b510              PUSH     {r4,lr}
;;;557    {
000002  4604              MOV      r4,r0
;;;558    	uint32_t i;
;;;559    
;;;560    	SPFD5420_SetCursor(0, 0);		/* 设置光标位置 */
000004  2100              MOVS     r1,#0
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       SPFD5420_SetCursor
;;;561    
;;;562    	SPFD5420_REG = 0x202; 			/* 准备读写显存 */
00000c  f04f41c0          MOV      r1,#0x60000000
000010  f2402002          MOV      r0,#0x202
000014  8008              STRH     r0,[r1,#0]
;;;563    
;;;564    	for (i = 0; i < g_LcdHeight * g_LcdWidth; i++)
000016  4a07              LDR      r2,|L3.52|
000018  4807              LDR      r0,|L3.56|
00001a  2100              MOVS     r1,#0
00001c  8812              LDRH     r2,[r2,#0]
00001e  8800              LDRH     r0,[r0,#0]
;;;565    	{
;;;566    		SPFD5420_RAM = _usColor;
000020  4b03              LDR      r3,|L3.48|
000022  4342              MULS     r2,r0,r2              ;564
000024  e001              B        |L3.42|
                  |L3.38|
000026  801c              STRH     r4,[r3,#0]
000028  1c49              ADDS     r1,r1,#1
                  |L3.42|
00002a  428a              CMP      r2,r1                 ;564
00002c  d8fb              BHI      |L3.38|
;;;567    	}
;;;568    }
00002e  bd10              POP      {r4,pc}
;;;569    
                          ENDP

                  |L3.48|
                          DCD      0x60080000
                  |L3.52|
                          DCD      g_LcdHeight
                  |L3.56|
                          DCD      g_LcdWidth

                          AREA ||i.SPFD5420_Delaly10ms||, CODE, READONLY, ALIGN=1

                  SPFD5420_Delaly10ms PROC
;;;67     */
;;;68     static void SPFD5420_Delaly10ms(void)
000000  2000              MOVS     r0,#0
;;;69     {
;;;70     	uint16_t i;
;;;71     
;;;72     	for (i = 0; i < 50000; i++);
000002  f24c3150          MOV      r1,#0xc350
                  |L4.6|
000006  1c40              ADDS     r0,r0,#1
000008  b280              UXTH     r0,r0
00000a  4288              CMP      r0,r1
00000c  d3fb              BCC      |L4.6|
;;;73     }
00000e  4770              BX       lr
;;;74     
                          ENDP


                          AREA ||i.SPFD5420_DispOff||, CODE, READONLY, ALIGN=1

                  SPFD5420_DispOff PROC
;;;542    */
;;;543    void SPFD5420_DispOff(void)
000000  2100              MOVS     r1,#0
;;;544    {
;;;545    	SPFD5420_WriteReg(7, 0x0000);
000002  2007              MOVS     r0,#7
000004  f7ffbffe          B.W      SPFD5420_WriteReg
;;;546    }
;;;547    
                          ENDP


                          AREA ||i.SPFD5420_DispOn||, CODE, READONLY, ALIGN=2

                  SPFD5420_DispOn PROC
;;;522    */
;;;523    void SPFD5420_DispOn(void)
000000  4806              LDR      r0,|L6.28|
;;;524    {
;;;525    	if (g_ChipID == IC_61509)
000002  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000004  f5a04135          SUB      r1,r0,#0xb500
000008  3909              SUBS     r1,r1,#9
00000a  d004              BEQ      |L6.22|
;;;526    	{
;;;527    		SPFD5420_WriteReg(0x007,0x0100);
;;;528    	}
;;;529    	else	/* IC_4001 */
;;;530    	{
;;;531    		SPFD5420_WriteReg(7, 0x0173); /* 设置262K颜色并且打开显示 */
00000c  f2401173          MOV      r1,#0x173
                  |L6.16|
000010  2007              MOVS     r0,#7
000012  f7ffbffe          B.W      SPFD5420_WriteReg
                  |L6.22|
000016  f44f7180          MOV      r1,#0x100             ;527
00001a  e7f9              B        |L6.16|
;;;532    	}
;;;533    }
;;;534    
                          ENDP

                  |L6.28|
                          DCD      g_ChipID

                          AREA ||i.SPFD5420_DrawBMP||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawBMP PROC
;;;906    */
;;;907    void SPFD5420_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;908    {
000004  461f              MOV      r7,r3
000006  4616              MOV      r6,r2
000008  4688              MOV      r8,r1
00000a  4681              MOV      r9,r0
;;;909    	uint32_t index = 0;
00000c  2500              MOVS     r5,#0
;;;910    	const uint16_t *p;
;;;911    
;;;912    	/* 设置图片的位置和大小， 即设置显示窗口 */
;;;913    	SPFD5420_SetDispWin(_usX, _usY, _usHeight, _usWidth);
00000e  9c08              LDR      r4,[sp,#0x20]
000010  f7fffffe          BL       SPFD5420_SetDispWin
;;;914    
;;;915    	p = _ptr;
;;;916    	for (index = 0; index < _usHeight * _usWidth; index++)
000014  437e              MULS     r6,r7,r6
000016  e006              B        |L7.38|
                  |L7.24|
;;;917    	{
;;;918    		SPFD5420_PutPixel(_usX, _usY, *p++);
000018  f8342b02          LDRH     r2,[r4],#2
00001c  4641              MOV      r1,r8
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       SPFD5420_PutPixel
000024  1c6d              ADDS     r5,r5,#1
                  |L7.38|
000026  42ae              CMP      r6,r5                 ;916
000028  d8f6              BHI      |L7.24|
00002a  4805              LDR      r0,|L7.64|
00002c  2100              MOVS     r1,#0                 ;916
00002e  8803              LDRH     r3,[r0,#0]            ;916  ; g_LcdWidth
000030  4804              LDR      r0,|L7.68|
000032  8802              LDRH     r2,[r0,#0]            ;916  ; g_LcdHeight
000034  e8bd47f0          POP      {r4-r10,lr}           ;916
000038  4608              MOV      r0,r1                 ;916
00003a  f7ffbffe          B.W      SPFD5420_SetDispWin
;;;919    	}
;;;920    
;;;921    	/* 退出窗口绘图模式 */
;;;922    	SPFD5420_QuitWinMode();
;;;923    }
;;;924    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      g_LcdWidth
                  |L7.68|
                          DCD      g_LcdHeight

                          AREA ||i.SPFD5420_DrawCircle||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawCircle PROC
;;;860    */
;;;861    void SPFD5420_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;862    {
000004  4680              MOV      r8,r0
;;;863    	int32_t  D;			/* Decision Variable */
;;;864    	uint32_t  CurX;		/* 当前 X 值 */
;;;865    	uint32_t  CurY;		/* 当前 Y 值 */
;;;866    
;;;867    	D = 3 - (_usRadius << 1);
000006  2003              MOVS     r0,#3
000008  460f              MOV      r7,r1                 ;862
00000a  eba00642          SUB      r6,r0,r2,LSL #1
;;;868    	CurX = 0;
00000e  2500              MOVS     r5,#0
;;;869    	CurY = _usRadius;
000010  4614              MOV      r4,r2
000012  e053              B        |L8.188|
                  |L8.20|
;;;870    
;;;871    	while (CurX <= CurY)
;;;872    	{
;;;873    		SPFD5420_PutPixel(_usX + CurX, _usY + CurY, _usColor);
000014  eb070b04          ADD      r11,r7,r4
000018  eb080905          ADD      r9,r8,r5
00001c  fa1ff18b          UXTH     r1,r11
000020  fa1ff089          UXTH     r0,r9
000024  9a03              LDR      r2,[sp,#0xc]
000026  f7fffffe          BL       SPFD5420_PutPixel
;;;874    		SPFD5420_PutPixel(_usX + CurX, _usY - CurY, _usColor);
00002a  eba70a04          SUB      r10,r7,r4
00002e  fa1ff18a          UXTH     r1,r10
000032  fa1ff089          UXTH     r0,r9
000036  9a03              LDR      r2,[sp,#0xc]
000038  f7fffffe          BL       SPFD5420_PutPixel
;;;875    		SPFD5420_PutPixel(_usX - CurX, _usY + CurY, _usColor);
00003c  eba80905          SUB      r9,r8,r5
000040  fa1ff18b          UXTH     r1,r11
000044  fa1ff089          UXTH     r0,r9
000048  9a03              LDR      r2,[sp,#0xc]
00004a  f7fffffe          BL       SPFD5420_PutPixel
;;;876    		SPFD5420_PutPixel(_usX - CurX, _usY - CurY, _usColor);
00004e  fa1ff18a          UXTH     r1,r10
000052  fa1ff089          UXTH     r0,r9
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       SPFD5420_PutPixel
;;;877    		SPFD5420_PutPixel(_usX + CurY, _usY + CurX, _usColor);
00005c  eb070b05          ADD      r11,r7,r5
000060  eb080904          ADD      r9,r8,r4
000064  fa1ff18b          UXTH     r1,r11
000068  fa1ff089          UXTH     r0,r9
00006c  9a03              LDR      r2,[sp,#0xc]
00006e  f7fffffe          BL       SPFD5420_PutPixel
;;;878    		SPFD5420_PutPixel(_usX + CurY, _usY - CurX, _usColor);
000072  eba70a05          SUB      r10,r7,r5
000076  fa1ff18a          UXTH     r1,r10
00007a  fa1ff089          UXTH     r0,r9
00007e  9a03              LDR      r2,[sp,#0xc]
000080  f7fffffe          BL       SPFD5420_PutPixel
;;;879    		SPFD5420_PutPixel(_usX - CurY, _usY + CurX, _usColor);
000084  eba80904          SUB      r9,r8,r4
000088  fa1ff18b          UXTH     r1,r11
00008c  fa1ff089          UXTH     r0,r9
000090  9a03              LDR      r2,[sp,#0xc]
000092  f7fffffe          BL       SPFD5420_PutPixel
;;;880    		SPFD5420_PutPixel(_usX - CurY, _usY - CurX, _usColor);
000096  fa1ff18a          UXTH     r1,r10
00009a  fa1ff089          UXTH     r0,r9
00009e  9a03              LDR      r2,[sp,#0xc]
0000a0  f7fffffe          BL       SPFD5420_PutPixel
;;;881    
;;;882    		if (D < 0)
0000a4  2e00              CMP      r6,#0
0000a6  da03              BGE      |L8.176|
;;;883    		{
;;;884    			D += (CurX << 2) + 6;
0000a8  eb060685          ADD      r6,r6,r5,LSL #2
0000ac  1db6              ADDS     r6,r6,#6
0000ae  e004              B        |L8.186|
                  |L8.176|
;;;885    		}
;;;886    		else
;;;887    		{
;;;888    			D += ((CurX - CurY) << 2) + 10;
0000b0  1b28              SUBS     r0,r5,r4
0000b2  eb060680          ADD      r6,r6,r0,LSL #2
0000b6  1e64              SUBS     r4,r4,#1
0000b8  360a              ADDS     r6,r6,#0xa
                  |L8.186|
0000ba  1c6d              ADDS     r5,r5,#1
                  |L8.188|
0000bc  42a5              CMP      r5,r4                 ;871
0000be  d9a9              BLS      |L8.20|
;;;889    			CurY--;
;;;890    		}
;;;891    		CurX++;
;;;892    	}
;;;893    }
0000c0  e8bd9fff          POP      {r0-r12,pc}
;;;894    
                          ENDP


                          AREA ||i.SPFD5420_DrawHColorLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawHColorLine PROC
;;;755    */
;;;756    void SPFD5420_DrawHColorLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  b570              PUSH     {r4-r6,lr}
;;;757    {
000002  4605              MOV      r5,r0
000004  461c              MOV      r4,r3
000006  4616              MOV      r6,r2
;;;758    	uint16_t i;
;;;759    
;;;760    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;761    	/*
;;;762    		px，py 是物理坐标， x，y是虚拟坐标
;;;763    		转换公式:
;;;764    		py = 399 - x;
;;;765    		px = y;
;;;766    	*/
;;;767    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
000008  f44f7000          MOV      r0,#0x200
00000c  f7fffffe          BL       SPFD5420_WriteReg
000010  f2a5158f          SUB      r5,r5,#0x18f
;;;768    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000014  4268              RSBS     r0,r5,#0
000016  b281              UXTH     r1,r0
000018  f2402001          MOV      r0,#0x201
00001c  f7fffffe          BL       SPFD5420_WriteReg
;;;769    
;;;770    	/* 写显存 */
;;;771    	SPFD5420_REG = 0x202;
000020  f04f41c0          MOV      r1,#0x60000000
000024  f2402002          MOV      r0,#0x202
000028  8008              STRH     r0,[r1,#0]
;;;772    	for (i = 0; i < _usWidth; i++)
00002a  2000              MOVS     r0,#0
;;;773    	{
;;;774    		SPFD5420_RAM = *_pColor++;
00002c  4904              LDR      r1,|L9.64|
00002e  e004              B        |L9.58|
                  |L9.48|
000030  f8342b02          LDRH     r2,[r4],#2
000034  800a              STRH     r2,[r1,#0]
000036  1c40              ADDS     r0,r0,#1
000038  b280              UXTH     r0,r0                 ;772
                  |L9.58|
00003a  42b0              CMP      r0,r6                 ;772
00003c  d3f8              BCC      |L9.48|
;;;775    	}
;;;776    }
00003e  bd70              POP      {r4-r6,pc}
;;;777    
                          ENDP

                  |L9.64|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_DrawHLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawHLine PROC
;;;722    */
;;;723    void SPFD5420_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;724    {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
;;;725    	uint16_t i;
;;;726    
;;;727    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;728    	/*
;;;729    		px，py 是物理坐标， x，y是虚拟坐标
;;;730    		转换公式:
;;;731    		py = 399 - x;
;;;732    		px = y;
;;;733    	*/
;;;734    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
000008  f44f7000          MOV      r0,#0x200
00000c  f7fffffe          BL       SPFD5420_WriteReg
;;;735    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000010  f2a4108f          SUB      r0,r4,#0x18f
000014  4240              RSBS     r0,r0,#0
000016  b281              UXTH     r1,r0
000018  f2402001          MOV      r0,#0x201
00001c  f7fffffe          BL       SPFD5420_WriteReg
;;;736    
;;;737    	/* 写显存 */
;;;738    	SPFD5420_REG = 0x202;
000020  f04f41c0          MOV      r1,#0x60000000
000024  f2402002          MOV      r0,#0x202
000028  8008              STRH     r0,[r1,#0]
;;;739    	for (i = 0; i < _usX2 - _usX1 + 1; i++)
00002a  2100              MOVS     r1,#0
00002c  1b30              SUBS     r0,r6,r4
;;;740    	{
;;;741    		SPFD5420_RAM = _usColor;
00002e  4a04              LDR      r2,|L10.64|
000030  1c40              ADDS     r0,r0,#1              ;739
000032  e002              B        |L10.58|
                  |L10.52|
000034  8015              STRH     r5,[r2,#0]
000036  1c49              ADDS     r1,r1,#1
000038  b289              UXTH     r1,r1                 ;739
                  |L10.58|
00003a  4288              CMP      r0,r1                 ;739
00003c  dcfa              BGT      |L10.52|
;;;742    	}
;;;743    }
00003e  bd70              POP      {r4-r6,pc}
;;;744    
                          ENDP

                  |L10.64|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_DrawHTransLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawHTransLine PROC
;;;788    */
;;;789    void SPFD5420_DrawHTransLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;790    {
000004  4681              MOV      r9,r0
000006  461f              MOV      r7,r3
000008  4690              MOV      r8,r2
;;;791    	uint16_t i, j;
;;;792    	uint16_t Index;
;;;793    
;;;794    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;795    	/*
;;;796    		px，py 是物理坐标， x，y是虚拟坐标
;;;797    		转换公式:
;;;798    		py = 399 - x;
;;;799    		px = y;
;;;800    	*/
;;;801    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
00000a  f44f7000          MOV      r0,#0x200
00000e  9901              LDR      r1,[sp,#4]
000010  f7fffffe          BL       SPFD5420_WriteReg
;;;802    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000014  f2a9108f          SUB      r0,r9,#0x18f
000018  4240              RSBS     r0,r0,#0
00001a  b281              UXTH     r1,r0
00001c  f2402001          MOV      r0,#0x201
000020  f7fffffe          BL       SPFD5420_WriteReg
;;;803    
;;;804    	/* 写显存 */
;;;805    	SPFD5420_REG = 0x202;
000024  f04f41c0          MOV      r1,#0x60000000
000028  f2402002          MOV      r0,#0x202
00002c  8008              STRH     r0,[r1,#0]
;;;806    	for (i = 0,j = 0; i < _usWidth; i++, j++)
00002e  2400              MOVS     r4,#0
000030  4625              MOV      r5,r4
;;;807    	{
;;;808    		Index = *_pColor++;
;;;809    	    if (Index)
;;;810            {
;;;811    			 SPFD5420_RAM = Index;
000032  f8dfa03c          LDR      r10,|L11.112|
000036  4683              MOV      r11,r0                ;805
000038  e00a              B        |L11.80|
00003a  bf00              NOP                            ;808
                  |L11.60|
00003c  f8376b02          LDRH     r6,[r7],#2            ;808
000040  b156              CBZ      r6,|L11.88|
000042  bf00              NOP      
                  |L11.68|
000044  f8aa6000          STRH     r6,[r10,#0]
000048  1c64              ADDS     r4,r4,#1
00004a  1c6d              ADDS     r5,r5,#1              ;806
00004c  b2a4              UXTH     r4,r4                 ;806
00004e  b2ad              UXTH     r5,r5                 ;806
                  |L11.80|
000050  4544              CMP      r4,r8                 ;806
000052  d3f3              BCC      |L11.60|
;;;812    		}
;;;813    		else
;;;814    		{
;;;815    			SPFD5420_SetCursor(_usX1 + j, _usY1);
;;;816    			SPFD5420_REG = 0x202;
;;;817    			SPFD5420_RAM = Index;
;;;818    		}
;;;819    	}
;;;820    }
000054  e8bd9fff          POP      {r0-r12,pc}
                  |L11.88|
000058  eb090005          ADD      r0,r9,r5              ;815
00005c  b280              UXTH     r0,r0                 ;815
00005e  9901              LDR      r1,[sp,#4]            ;815
000060  f7fffffe          BL       SPFD5420_SetCursor
000064  f04f41c0          MOV      r1,#0x60000000        ;816
000068  f8a1b000          STRH     r11,[r1,#0]           ;816
00006c  e7ea              B        |L11.68|
;;;821    
                          ENDP

00006e  0000              DCW      0x0000
                  |L11.112|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_DrawLine||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawLine PROC
;;;632    */
;;;633    void SPFD5420_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;634    {
000004  4616              MOV      r6,r2
000006  461f              MOV      r7,r3
000008  460d              MOV      r5,r1
00000a  4604              MOV      r4,r0
;;;635    	int32_t dx , dy ;
;;;636    	int32_t tx , ty ;
;;;637    	int32_t inc1 , inc2 ;
;;;638    	int32_t d , iTag ;
;;;639    	int32_t x , y ;
;;;640    
;;;641    	/* 采用 Bresenham 算法，在2点间画一条直线 */
;;;642    
;;;643    	SPFD5420_PutPixel(_usX1 , _usY1 , _usColor);
00000c  9a0a              LDR      r2,[sp,#0x28]
00000e  f7fffffe          BL       SPFD5420_PutPixel
;;;644    
;;;645    	/* 如果两点重合，结束后面的动作。*/
;;;646    	if ( _usX1 == _usX2 && _usY1 == _usY2 )
000012  42b4              CMP      r4,r6
000014  d101              BNE      |L12.26|
000016  42bd              CMP      r5,r7
000018  d041              BEQ      |L12.158|
                  |L12.26|
;;;647    	{
;;;648    		return;
;;;649    	}
;;;650    
;;;651    	iTag = 0 ;
00001a  f04f0800          MOV      r8,#0
;;;652    	/* dx = abs ( _usX2 - _usX1 ); */
;;;653    	if (_usX2 >= _usX1)
00001e  42a6              CMP      r6,r4
000020  d301              BCC      |L12.38|
;;;654    	{
;;;655    		dx = _usX2 - _usX1;
000022  1b31              SUBS     r1,r6,r4
000024  e000              B        |L12.40|
                  |L12.38|
;;;656    	}
;;;657    	else
;;;658    	{
;;;659    		dx = _usX1 - _usX2;
000026  1ba1              SUBS     r1,r4,r6
                  |L12.40|
;;;660    	}
;;;661    
;;;662    	/* dy = abs ( _usY2 - _usY1 ); */
;;;663    	if (_usY2 >= _usY1)
000028  42af              CMP      r7,r5
00002a  d301              BCC      |L12.48|
;;;664    	{
;;;665    		dy = _usY2 - _usY1;
00002c  1b78              SUBS     r0,r7,r5
00002e  e000              B        |L12.50|
                  |L12.48|
;;;666    	}
;;;667    	else
;;;668    	{
;;;669    		dy = _usY1 - _usY2;
000030  1be8              SUBS     r0,r5,r7
                  |L12.50|
;;;670    	}
;;;671    
;;;672    	if ( dx < dy )   /*如果dy为计长方向，则交换纵横坐标。*/
000032  4281              CMP      r1,r0
000034  da0a              BGE      |L12.76|
;;;673    	{
;;;674    		uint16_t temp;
;;;675    
;;;676    		iTag = 1 ;
;;;677    		temp = _usX1; _usX1 = _usY1; _usY1 = temp;
000036  4622              MOV      r2,r4
000038  462c              MOV      r4,r5
00003a  4615              MOV      r5,r2
;;;678    		temp = _usX2; _usX2 = _usY2; _usY2 = temp;
00003c  4632              MOV      r2,r6
00003e  463e              MOV      r6,r7
000040  4617              MOV      r7,r2
;;;679    		temp = dx; dx = dy; dy = temp;
000042  b28a              UXTH     r2,r1
000044  4601              MOV      r1,r0
000046  f04f0801          MOV      r8,#1                 ;676
00004a  4610              MOV      r0,r2
                  |L12.76|
;;;680    	}
;;;681    	tx = _usX2 > _usX1 ? 1 : -1 ;    /* 确定是增1还是减1 */
00004c  f04f32ff          MOV      r2,#0xffffffff
000050  42a6              CMP      r6,r4
000052  d901              BLS      |L12.88|
000054  2301              MOVS     r3,#1
000056  e000              B        |L12.90|
                  |L12.88|
000058  4613              MOV      r3,r2
                  |L12.90|
00005a  469a              MOV      r10,r3
;;;682    	ty = _usY2 > _usY1 ? 1 : -1 ;
00005c  42af              CMP      r7,r5
00005e  d900              BLS      |L12.98|
000060  2201              MOVS     r2,#1
                  |L12.98|
;;;683    	x = _usX1 ;
;;;684    	y = _usY1 ;
;;;685    	inc1 = 2 * dy ;
000062  ea4f0940          LSL      r9,r0,#1
;;;686    	inc2 = 2 * ( dy - dx );
000066  1a40              SUBS     r0,r0,r1
000068  0040              LSLS     r0,r0,#1
00006a  4693              MOV      r11,r2                ;682
;;;687    	d = inc1 - dx ;
00006c  eba90701          SUB      r7,r9,r1
;;;688    	while ( x != _usX2 )     /* 循环画点 */
000070  9000              STR      r0,[sp,#0]
000072  e012              B        |L12.154|
                  |L12.116|
;;;689    	{
;;;690    		if ( d < 0 )
000074  2f00              CMP      r7,#0
000076  da01              BGE      |L12.124|
;;;691    		{
;;;692    			d += inc1 ;
000078  444f              ADD      r7,r7,r9
00007a  e002              B        |L12.130|
                  |L12.124|
;;;693    		}
;;;694    		else
;;;695    		{
;;;696    			y += ty ;
;;;697    			d += inc2 ;
00007c  9800              LDR      r0,[sp,#0]
00007e  445d              ADD      r5,r5,r11             ;696
000080  4407              ADD      r7,r7,r0
                  |L12.130|
;;;698    		}
;;;699    		if ( iTag )
000082  f1b80f00          CMP      r8,#0
000086  d002              BEQ      |L12.142|
;;;700    		{
;;;701    			SPFD5420_PutPixel ( y , x , _usColor) ;
000088  b2a1              UXTH     r1,r4
00008a  b2a8              UXTH     r0,r5
00008c  e001              B        |L12.146|
                  |L12.142|
;;;702    		}
;;;703    		else
;;;704    		{
;;;705    			SPFD5420_PutPixel ( x , y , _usColor) ;
00008e  b2a9              UXTH     r1,r5
000090  b2a0              UXTH     r0,r4
                  |L12.146|
000092  9a0a              LDR      r2,[sp,#0x28]
000094  f7fffffe          BL       SPFD5420_PutPixel
;;;706    		}
;;;707    		x += tx ;
000098  4454              ADD      r4,r4,r10
                  |L12.154|
00009a  42b4              CMP      r4,r6                 ;688
00009c  d1ea              BNE      |L12.116|
                  |L12.158|
;;;708    	}
;;;709    }
00009e  e8bd8ff8          POP      {r3-r11,pc}
;;;710    
                          ENDP


                          AREA ||i.SPFD5420_DrawRect||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawRect PROC
;;;832    */
;;;833    void SPFD5420_DrawRect(uint16_t _usX, uint16_t _usY, uint8_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;834    {
;;;835    	/*
;;;836    	 ---------------->---
;;;837    	|(_usX，_usY)        |
;;;838    	V                    V  _usHeight
;;;839    	|                    |
;;;840    	 ---------------->---
;;;841    		  _usWidth
;;;842    	*/
;;;843    
;;;844    	SPFD5420_DrawLine(_usX, _usY, _usX + _usWidth - 1, _usY, _usColor);	/* 顶 */
000004  18c5              ADDS     r5,r0,r3
000006  4614              MOV      r4,r2                 ;834
000008  9e08              LDR      r6,[sp,#0x20]
00000a  1e6d              SUBS     r5,r5,#1
00000c  4688              MOV      r8,r1                 ;834
00000e  4607              MOV      r7,r0                 ;834
000010  b2aa              UXTH     r2,r5
000012  460b              MOV      r3,r1
000014  9600              STR      r6,[sp,#0]
000016  f7fffffe          BL       SPFD5420_DrawLine
;;;845    	SPFD5420_DrawLine(_usX, _usY + _usHeight - 1, _usX + _usWidth - 1, _usY + _usHeight - 1, _usColor);	/* 底 */
00001a  eb080904          ADD      r9,r8,r4
00001e  f1a90401          SUB      r4,r9,#1
000022  b2a3              UXTH     r3,r4
000024  b2aa              UXTH     r2,r5
000026  b2a1              UXTH     r1,r4
000028  4638              MOV      r0,r7
00002a  9600              STR      r6,[sp,#0]
00002c  f7fffffe          BL       SPFD5420_DrawLine
;;;846    
;;;847    	SPFD5420_DrawLine(_usX, _usY, _usX, _usY + _usHeight - 1, _usColor);	/* 左 */
000030  463a              MOV      r2,r7
000032  b2a3              UXTH     r3,r4
000034  4641              MOV      r1,r8
000036  4610              MOV      r0,r2
000038  9600              STR      r6,[sp,#0]
00003a  f7fffffe          BL       SPFD5420_DrawLine
;;;848    	SPFD5420_DrawLine(_usX + _usWidth - 1, _usY, _usX + _usWidth - 1, _usY + _usHeight, _usColor);	/* 右 */
00003e  fa1ff389          UXTH     r3,r9
000042  b2aa              UXTH     r2,r5
000044  b2a8              UXTH     r0,r5
000046  4641              MOV      r1,r8
000048  9600              STR      r6,[sp,#0]
00004a  f7fffffe          BL       SPFD5420_DrawLine
;;;849    }
00004e  e8bd83f8          POP      {r3-r9,pc}
;;;850    
                          ENDP


                          AREA ||i.SPFD5420_GetPixel||, CODE, READONLY, ALIGN=2

                  SPFD5420_GetPixel PROC
;;;599    */
;;;600    uint16_t SPFD5420_GetPixel(uint16_t _usX, uint16_t _usY)
000000  b510              PUSH     {r4,lr}
;;;601    {
;;;602    	uint16_t usRGB;
;;;603    
;;;604    	SPFD5420_SetCursor(_usX, _usY);	/* 设置光标位置 */
000002  f7fffffe          BL       SPFD5420_SetCursor
;;;605    
;;;606    	{
;;;607    		/* 准备写显存 */
;;;608    		SPFD5420_REG = 0x202;
000006  f04f41c0          MOV      r1,#0x60000000
00000a  f2402002          MOV      r0,#0x202
00000e  8008              STRH     r0,[r1,#0]
;;;609    
;;;610    		usRGB = SPFD5420_RAM;
000010  4807              LDR      r0,|L14.48|
000012  8800              LDRH     r0,[r0,#0]
;;;611    
;;;612    		/* 读 16-bit GRAM Reg */
;;;613    		if (s_RGBChgEn == 1)
000014  4907              LDR      r1,|L14.52|
000016  7809              LDRB     r1,[r1,#0]  ; s_RGBChgEn
000018  2901              CMP      r1,#1
00001a  d107              BNE      |L14.44|
00001c  f3c01145          UBFX     r1,r0,#5,#6
000020  0ac2              LSRS     r2,r0,#11
000022  02c0              LSLS     r0,r0,#11
000024  eb001041          ADD      r0,r0,r1,LSL #5
000028  4410              ADD      r0,r0,r2
00002a  b280              UXTH     r0,r0
                  |L14.44|
;;;614    		{
;;;615    			usRGB = SPFD5420_BGR2RGB(usRGB);
;;;616    		}
;;;617    	}
;;;618    
;;;619    	return usRGB;
;;;620    }
00002c  bd10              POP      {r4,pc}
;;;621    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      0x60080000
                  |L14.52|
                          DCD      ||.data||

                          AREA ||i.SPFD5420_InitHard||, CODE, READONLY, ALIGN=2

                  SPFD5420_InitHard PROC
;;;462    */
;;;463    void SPFD5420_InitHard(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;464    {
;;;465    	uint16_t id;
;;;466    
;;;467    	id = SPFD5420_ReadReg(0x0000);  	/* 读取LCD驱动芯片ID */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       SPFD5420_ReadReg
;;;468    
;;;469    	if ((id == 0x5420) || (id == 0x5520))	/* 4001屏和5420相同，4001屏读回显存RGB时，需要进行转换，5420无需 */
00000a  f2454620          MOV      r6,#0x5420
;;;470    	{
;;;471    		Init_5420_4001();	/* 初始化5420和4001屏硬件 */
;;;472    
;;;473    		/* 下面这段代码用于识别是4001屏还是5420屏 */
;;;474    		{
;;;475    			uint16_t dummy;
;;;476    
;;;477    			SPFD5420_WriteReg(0x0200, 0);
;;;478    			SPFD5420_WriteReg(0x0201, 0);
;;;479    
;;;480    			SPFD5420_REG = 0x0202;
;;;481    			SPFD5420_RAM = 0x1234;		/* 写一个像素 */
;;;482    
;;;483    			SPFD5420_WriteReg(0x0200, 0);
;;;484    			SPFD5420_WriteReg(0x0201, 0);
;;;485    			SPFD5420_REG = 0x0202;
;;;486    			dummy = SPFD5420_RAM; 		/* 读回颜色值 */
;;;487    			if (dummy == 0x1234)
;;;488    			{
;;;489    				s_RGBChgEn = 0;
00000e  4c25              LDR      r4,|L15.164|
;;;490    
;;;491    				g_ChipID = IC_5420;
000010  4d25              LDR      r5,|L15.168|
;;;492    			}
;;;493    			else
;;;494    			{
;;;495    				s_RGBChgEn = 1;		/* 如果读回的和写入的不同，则需要RGB转换, 只影响读取像素的函数 */
000012  f04f0b01          MOV      r11,#1
000016  42b0              CMP      r0,r6                 ;469
000018  d00d              BEQ      |L15.54|
00001a  f5a041aa          SUB      r1,r0,#0x5500         ;469
00001e  3920              SUBS     r1,r1,#0x20           ;469
000020  d009              BEQ      |L15.54|
;;;496    
;;;497    				g_ChipID = IC_4001;
;;;498    			}
;;;499    			g_LcdHeight = LCD_30_HEIGHT;
;;;500    			g_LcdWidth = LCD_30_WIDTH;
;;;501    		}
;;;502    	}
;;;503    	else if (id == 0xB509)
000022  f24b5609          MOV      r6,#0xb509
000026  42b0              CMP      r0,r6
000028  d139              BNE      |L15.158|
;;;504    	{
;;;505    		Init_61509();		/* 初始化61509屏硬件 */
00002a  f7fffffe          BL       Init_61509
;;;506    
;;;507    		s_RGBChgEn = 1;			/* 如果读回的和写入的不同，则需要RGB转换, 只影响读取像素的函数 */
00002e  4658              MOV      r0,r11
                  |L15.48|
000030  7020              STRB     r0,[r4,#0]
;;;508    
;;;509    		g_ChipID = IC_61509;
000032  802e              STRH     r6,[r5,#0]
000034  e02c              B        |L15.144|
                  |L15.54|
000036  f7fffffe          BL       Init_5420_4001
00003a  2100              MOVS     r1,#0                 ;477
00003c  f44f7000          MOV      r0,#0x200             ;477
000040  f7fffffe          BL       SPFD5420_WriteReg
000044  2100              MOVS     r1,#0                 ;478
000046  f2402001          MOV      r0,#0x201             ;478
00004a  f7fffffe          BL       SPFD5420_WriteReg
00004e  f04f4ac0          MOV      r10,#0x60000000       ;480
000052  f2402702          MOV      r7,#0x202             ;480
000056  f8aa7000          STRH     r7,[r10,#0]           ;480
00005a  f8df9050          LDR      r9,|L15.172|
00005e  f2412834          MOV      r8,#0x1234            ;481
000062  f8a98000          STRH     r8,[r9,#0]            ;481
000066  2100              MOVS     r1,#0                 ;483
000068  1eb8              SUBS     r0,r7,#2              ;483
00006a  f7fffffe          BL       SPFD5420_WriteReg
00006e  2100              MOVS     r1,#0                 ;484
000070  1e78              SUBS     r0,r7,#1              ;484
000072  f7fffffe          BL       SPFD5420_WriteReg
000076  f8aa7000          STRH     r7,[r10,#0]           ;485
00007a  f8b90000          LDRH     r0,[r9,#0]            ;486
00007e  4540              CMP      r0,r8                 ;487
000080  d101              BNE      |L15.134|
000082  2000              MOVS     r0,#0                 ;489
000084  e7d4              B        |L15.48|
                  |L15.134|
000086  f884b000          STRB     r11,[r4,#0]           ;495
00008a  f2440001          MOV      r0,#0x4001            ;497
00008e  8028              STRH     r0,[r5,#0]            ;497
                  |L15.144|
000090  4907              LDR      r1,|L15.176|
000092  20f0              MOVS     r0,#0xf0              ;499
000094  8008              STRH     r0,[r1,#0]            ;499
000096  4907              LDR      r1,|L15.180|
000098  f44f70c8          MOV      r0,#0x190             ;500
00009c  8008              STRH     r0,[r1,#0]            ;500
                  |L15.158|
;;;510    		g_LcdHeight = LCD_30_HEIGHT;
;;;511    		g_LcdWidth = LCD_30_WIDTH;
;;;512    	}
;;;513    }
00009e  e8bd9ff0          POP      {r4-r12,pc}
;;;514    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L15.164|
                          DCD      ||.data||
                  |L15.168|
                          DCD      g_ChipID
                  |L15.172|
                          DCD      0x60080000
                  |L15.176|
                          DCD      g_LcdHeight
                  |L15.180|
                          DCD      g_LcdWidth

                          AREA ||i.SPFD5420_PutPixel||, CODE, READONLY, ALIGN=2

                  SPFD5420_PutPixel PROC
;;;579    */
;;;580    void SPFD5420_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b510              PUSH     {r4,lr}
;;;581    {
000002  4614              MOV      r4,r2
;;;582    	SPFD5420_SetCursor(_usX, _usY);	/* 设置光标位置 */
000004  f7fffffe          BL       SPFD5420_SetCursor
;;;583    
;;;584    	/* 写显存 */
;;;585    	SPFD5420_REG = 0x202;
000008  f04f41c0          MOV      r1,#0x60000000
00000c  f2402002          MOV      r0,#0x202
000010  8008              STRH     r0,[r1,#0]
;;;586    	/* Write 16-bit GRAM Reg */
;;;587    	SPFD5420_RAM = _usColor;
000012  4801              LDR      r0,|L16.24|
000014  8004              STRH     r4,[r0,#0]
;;;588    }
000016  bd10              POP      {r4,pc}
;;;589    
                          ENDP

                  |L16.24|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_ReadID||, CODE, READONLY, ALIGN=1

                  SPFD5420_ReadID PROC
;;;242    */
;;;243    uint16_t SPFD5420_ReadID(void)
000000  2000              MOVS     r0,#0
;;;244    {
;;;245    	return SPFD5420_ReadReg(0x0000);
000002  f7ffbffe          B.W      SPFD5420_ReadReg
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.SPFD5420_ReadReg||, CODE, READONLY, ALIGN=2

                  SPFD5420_ReadReg PROC
;;;102    */
;;;103    static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
000000  b501              PUSH     {r0,lr}
;;;104    {
;;;105    	/* Write 16-bit Index (then Read Reg) */
;;;106    	SPFD5420_REG = _usAddr;
000002  f8bd0000          LDRH     r0,[sp,#0]
000006  f04f41c0          MOV      r1,#0x60000000
00000a  8008              STRH     r0,[r1,#0]
;;;107    	/* Read 16-bit Reg */
;;;108    	return (SPFD5420_RAM);
00000c  4801              LDR      r0,|L18.20|
00000e  8800              LDRH     r0,[r0,#0]
;;;109    }
000010  bd08              POP      {r3,pc}
;;;110    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_SetCursor||, CODE, READONLY, ALIGN=1

                  SPFD5420_SetCursor PROC
;;;187    */
;;;188    static void SPFD5420_SetCursor(uint16_t _usX, uint16_t _usY)
000000  b510              PUSH     {r4,lr}
;;;189    {
000002  4604              MOV      r4,r0
;;;190    	/*
;;;191    		px，py 是物理坐标， x，y是虚拟坐标
;;;192    		转换公式:
;;;193    		py = 399 - x;
;;;194    		px = y;
;;;195    	*/
;;;196    
;;;197    	SPFD5420_WriteReg(0x0200, _usY);  		/* px */
000004  f44f7000          MOV      r0,#0x200
000008  f7fffffe          BL       SPFD5420_WriteReg
00000c  f2a4148f          SUB      r4,r4,#0x18f
;;;198    	SPFD5420_WriteReg(0x0201, 399 - _usX);	/* py */
000010  4260              RSBS     r0,r4,#0
000012  b281              UXTH     r1,r0
000014  e8bd4010          POP      {r4,lr}
000018  f2402001          MOV      r0,#0x201
00001c  f7ffbffe          B.W      SPFD5420_WriteReg
;;;199    }
;;;200    
                          ENDP


                          AREA ||i.SPFD5420_SetDispWin||, CODE, READONLY, ALIGN=1

                  SPFD5420_SetDispWin PROC
;;;123    */
;;;124    static void SPFD5420_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
000004  4606              MOV      r6,r0
;;;126    	uint16_t px, py;
;;;127    	/*
;;;128    		240x400屏幕物理坐标(px,py)如下:
;;;129    		    R003 = 0x1018                  R003 = 0x1008
;;;130    		  -------------------          -------------------
;;;131    		 |(0,0)              |        |(0,0)              |
;;;132    		 |                   |        |					  |
;;;133    		 |  ^           ^    |        |   ^           ^   |
;;;134    		 |  |           |    |        |   |           |   |
;;;135    		 |  |           |    |        |   |           |   |
;;;136    		 |  |           |    |        |   |           |   |
;;;137    		 |  |  ------>  |    |        |   | <------   |   |
;;;138    		 |  |           |    |        |   |           |   |
;;;139    		 |  |           |    |        |   |           |   |
;;;140    		 |  |           |    |        |   |           |   |
;;;141    		 |  |           |    |        |   |           |   |
;;;142    		 |                   |        |					  |
;;;143    		 |                   |        |                   |
;;;144    		 |      (x=239,y=399)|        |      (x=239,y=399)|
;;;145    		 |-------------------|        |-------------------|
;;;146    		 |                   |        |                   |
;;;147    		  -------------------          -------------------
;;;148    
;;;149    		按照安富莱开发板LCD的方向，我们期望的虚拟坐标和扫描方向如下：(和上图第1个吻合)
;;;150    		 --------------------------------
;;;151    		|  |(0,0)                        |
;;;152    		|  |     --------->              |
;;;153    		|  |         |                   |
;;;154    		|  |         |                   |
;;;155    		|  |         |                   |
;;;156    		|  |         V                   |
;;;157    		|  |     --------->              |
;;;158    		|  |                    (399,239)|
;;;159    		 --------------------------------
;;;160    	虚拟坐标和物理坐标转换关系：
;;;161    		x = 399 - py;
;;;162    		y = px;
;;;163    
;;;164    		py = 399 - x;
;;;165    		px = y;
;;;166    	*/
;;;167    
;;;168    	py = 399 - _usX;
000006  f2a0108f          SUB      r0,r0,#0x18f
00000a  4240              RSBS     r0,r0,#0
00000c  b285              UXTH     r5,r0
00000e  4698              MOV      r8,r3                 ;125
000010  4617              MOV      r7,r2                 ;125
000012  460c              MOV      r4,r1                 ;125
;;;169    	px = _usY;
;;;170    
;;;171    	/* 设置显示窗口 WINDOWS */
;;;172    	SPFD5420_WriteReg(0x0210, px);						/* 水平起始地址 */
000014  f44f7004          MOV      r0,#0x210
000018  f7fffffe          BL       SPFD5420_WriteReg
;;;173    	SPFD5420_WriteReg(0x0211, px + (_usHeight - 1));		/* 水平结束坐标 */
00001c  19e0              ADDS     r0,r4,r7
00001e  1e40              SUBS     r0,r0,#1
000020  b281              UXTH     r1,r0
000022  f2402011          MOV      r0,#0x211
000026  f7fffffe          BL       SPFD5420_WriteReg
;;;174    	SPFD5420_WriteReg(0x0212, py + 1 - _usWidth);		/* 垂直起始地址 */
00002a  eba50008          SUB      r0,r5,r8
00002e  1c40              ADDS     r0,r0,#1
000030  b281              UXTH     r1,r0
000032  f2402012          MOV      r0,#0x212
000036  f7fffffe          BL       SPFD5420_WriteReg
;;;175    	SPFD5420_WriteReg(0x0213, py);						/* 垂直结束地址 */
00003a  4629              MOV      r1,r5
00003c  f2402013          MOV      r0,#0x213
000040  f7fffffe          BL       SPFD5420_WriteReg
;;;176    
;;;177    	SPFD5420_SetCursor(_usX, _usY);
000044  4621              MOV      r1,r4
000046  4630              MOV      r0,r6
000048  e8bd41f0          POP      {r4-r8,lr}
00004c  f7ffbffe          B.W      SPFD5420_SetCursor
;;;178    }
;;;179    
                          ENDP


                          AREA ||i.SPFD5420_WriteReg||, CODE, READONLY, ALIGN=2

                  SPFD5420_WriteReg PROC
;;;84     */
;;;85     static void SPFD5420_WriteReg(__IO uint16_t _usAddr, uint16_t _usValue)
000000  b503              PUSH     {r0,r1,lr}
;;;86     {
;;;87     	/* Write 16-bit Index, then Write Reg */
;;;88     	SPFD5420_REG = _usAddr;
000002  f8bd0000          LDRH     r0,[sp,#0]
000006  f04f42c0          MOV      r2,#0x60000000
00000a  8010              STRH     r0,[r2,#0]
;;;89     	/* Write 16-bit Reg */
;;;90     	SPFD5420_RAM = _usValue;
00000c  4801              LDR      r0,|L21.20|
00000e  8001              STRH     r1,[r0,#0]
;;;91     }
000010  bd0c              POP      {r2,r3,pc}
;;;92     
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      0x60080000

                          AREA ||.data||, DATA, ALIGN=0

                  s_RGBChgEn
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\LCD_SPFD5420.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_LCD_SPFD5420_c_a559b03d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_LCD_SPFD5420_c_a559b03d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_LCD_SPFD5420_c_a559b03d____REVSH|
#line 128
|__asm___14_LCD_SPFD5420_c_a559b03d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
