; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bmp_file.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bmp_file.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bmp_file.crf ..\..\User\app\src\bmp_file.c]
                          THUMB

                          AREA ||i.SaveScreenToBmp||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  SaveScreenToBmp PROC
;;;103    */
;;;104    void SaveScreenToBmp(uint16_t _index)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;105    {
000004  4605              MOV      r5,r0
000006  f6ad6d28          SUB      sp,sp,#0xe28
;;;106    	__packed BMP_T tBmpHead;
;;;107    	uint8_t LineData[800 * 3]; 	/* 按最大 800像素宽度分配缓冲区 */
;;;108    	
;;;109    	uint16_t i,j;
;;;110    	uint16_t pixel;
;;;111    	uint16_t h, w;
;;;112    	uint32_t bytes;
;;;113    
;;;114    	/* 本函数使用的局部变量占用较多，请修改启动文件，保证堆栈空间够用 */
;;;115    	FRESULT result;
;;;116    	FATFS fs;
;;;117    	FIL file;
;;;118    	uint32_t bw;
;;;119    	char path[32];
;;;120    
;;;121    	bsp_LedOn(1);	/* 点亮LED1, 表示开始截屏 */
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOn
;;;122    
;;;123    	/* 本函数只支持横屏截图 */
;;;124    	h = LCD_GetHeight();
000010  f7fffffe          BL       LCD_GetHeight
000014  4604              MOV      r4,r0
;;;125    	w = LCD_GetWidth();
000016  f7fffffe          BL       LCD_GetWidth
00001a  4602              MOV      r2,r0
00001c  f6445042          MOV      r0,#0x4d42
000020  f8ad0dc0          STRH     r0,[sp,#0xdc0]
000024  fb04f002          MUL      r0,r4,r2
000028  eb000340          ADD      r3,r0,r0,LSL #1
00002c  f1030036          ADD      r0,r3,#0x36
000030  f8cd0dc2          STR      r0,[sp,#0xdc2]
000034  2000              MOVS     r0,#0
;;;126    	MakeBmpHeader(&tBmpHead, w, h);	/* 构建BMP文件头 */
000036  4621              MOV      r1,r4
000038  f8ad0dc6          STRH     r0,[sp,#0xdc6]
00003c  f8ad0dc8          STRH     r0,[sp,#0xdc8]
000040  2436              MOVS     r4,#0x36
000042  f8cd4dca          STR      r4,[sp,#0xdca]
000046  2428              MOVS     r4,#0x28
000048  f8cd4dce          STR      r4,[sp,#0xdce]
00004c  f8cd2dd2          STR      r2,[sp,#0xdd2]
000050  f8cd1dd6          STR      r1,[sp,#0xdd6]
000054  2101              MOVS     r1,#1
000056  f8ad1dda          STRH     r1,[sp,#0xdda]
00005a  2118              MOVS     r1,#0x18
00005c  f8ad1ddc          STRH     r1,[sp,#0xddc]
000060  f8cd0dde          STR      r0,[sp,#0xdde]
000064  f8cd3de2          STR      r3,[sp,#0xde2]
000068  f8cd0de6          STR      r0,[sp,#0xde6]
00006c  f8cd0dea          STR      r0,[sp,#0xdea]
000070  f8cd0dee          STR      r0,[sp,#0xdee]
000074  f8cd0df2          STR      r0,[sp,#0xdf2]
;;;127    
;;;128    	/* 文件系统操作 */
;;;129    	{
;;;130    		/* 挂载文件系统 */
;;;131    		result = f_mount(&fs, FS_VOLUME_SD, 0);			/* Mount a logical drive， 1表示立即执行 */
000078  2200              MOVS     r2,#0
00007a  a149              ADR      r1,|L1.416|
00007c  f50d6039          ADD      r0,sp,#0xb90
000080  f7fffffe          BL       f_mount
;;;132    		if (result != FR_OK)
000084  2800              CMP      r0,#0
000086  d17a              BNE      |L1.382|
;;;133    		{
;;;134    			goto quit1;
;;;135    		}
;;;136    
;;;137    		/* 打开文件 */
;;;138    		sprintf(path, "%s/%02d_%dx%d.bmp", FS_VOLUME_SD, _index, tBmpHead.biWidth, tBmpHead.biHeight);
000088  f8dd1dd6          LDR      r1,[sp,#0xdd6]
00008c  f8dd0dd2          LDR      r0,[sp,#0xdd2]
000090  e9cd0100          STRD     r0,r1,[sp,#0]
000094  462b              MOV      r3,r5
000096  a242              ADR      r2,|L1.416|
000098  a142              ADR      r1,|L1.420|
00009a  f60d50f8          ADD      r0,sp,#0xdf8
00009e  f7fffffe          BL       __2sprintf
;;;139    		//result = f_opendir(&DirInf, path);
;;;140    		result = f_open(&file, path, FA_CREATE_ALWAYS | FA_WRITE);
0000a2  220a              MOVS     r2,#0xa
0000a4  f60d51f8          ADD      r1,sp,#0xdf8
0000a8  f60d1068          ADD      r0,sp,#0x968
0000ac  f7fffffe          BL       f_open
0000b0  0002              MOVS     r2,r0
;;;141    		if (result != FR_OK)
0000b2  d005              BEQ      |L1.192|
;;;142    		{
;;;143    			printf("创建SD卡文件%s失败 (%d)\r\n", path, result);
0000b4  f60d51f8          ADD      r1,sp,#0xdf8
0000b8  a03f              ADR      r0,|L1.440|
0000ba  f7fffffe          BL       __2printf
;;;144    			goto quit1;
0000be  e05e              B        |L1.382|
                  |L1.192|
;;;145    		}
;;;146    	}
;;;147    
;;;148    	/* 写bmp文件头 */
;;;149    	result = f_write(&file, (char *)&tBmpHead, 54, &bw);
0000c0  f50d6362          ADD      r3,sp,#0xe20
0000c4  2236              MOVS     r2,#0x36
0000c6  f50d615c          ADD      r1,sp,#0xdc0
0000ca  f60d1068          ADD      r0,sp,#0x968
0000ce  f7fffffe          BL       f_write
;;;150    	if (result != FR_OK)
0000d2  bbe8              CBNZ     r0,|L1.336|
;;;151    	{
;;;152    		printf("%s 文件写入失败\r\n", path);
;;;153    		goto quit1;
;;;154    	}
;;;155    
;;;156    	/* 开始读取屏幕数据，并写入文件 */
;;;157    	for (i = 0; i <  tBmpHead.biHeight; i++)
0000d4  2600              MOVS     r6,#0
0000d6  ad02              ADD      r5,sp,#8              ;107
0000d8  e04d              B        |L1.374|
                  |L1.218|
;;;158    	{
;;;159    		/* 读取1行数据到缓冲区 (注意：BMP文件扫描次序，从左到右，从下到上。和LCD逻辑坐标是垂直翻转的) */
;;;160    		for (j = 0; j < tBmpHead.biWidth; j++)
0000da  2400              MOVS     r4,#0
;;;161    		{
;;;162    			pixel = LCD_GetPixel(j, tBmpHead.biHeight - i - 1);		/* 读取屏幕1个像素 （RGB = 565结构）*/
;;;163    			
;;;164    			LineData[3 * j + 2] = ((pixel & 0xF800) >> 8);		/* R */
0000dc  f04f08f8          MOV      r8,#0xf8
;;;165    			LineData[3 * j + 1] = ((pixel & 0x07E0) >> 3);		/* G */
0000e0  27fc              MOVS     r7,#0xfc
0000e2  e014              B        |L1.270|
                  |L1.228|
0000e4  f8bd0dd6          LDRH     r0,[sp,#0xdd6]        ;162
0000e8  1b80              SUBS     r0,r0,r6              ;162
0000ea  1e40              SUBS     r0,r0,#1              ;162
0000ec  b281              UXTH     r1,r0                 ;162
0000ee  4620              MOV      r0,r4                 ;162
0000f0  f7fffffe          BL       LCD_GetPixel
0000f4  eb040144          ADD      r1,r4,r4,LSL #1       ;164
0000f8  194a              ADDS     r2,r1,r5              ;164
0000fa  ea082310          AND      r3,r8,r0,LSR #8       ;164
0000fe  7093              STRB     r3,[r2,#2]            ;164
000100  ea0703d0          AND      r3,r7,r0,LSR #3
;;;166    			LineData[3 * j + 0] = ((pixel & 0x001F) << 3);		/* B */
000104  00c0              LSLS     r0,r0,#3
000106  7053              STRB     r3,[r2,#1]            ;165
000108  1c64              ADDS     r4,r4,#1
00010a  5468              STRB     r0,[r5,r1]
00010c  b2a4              UXTH     r4,r4                 ;160
                  |L1.270|
00010e  f8dd0dd2          LDR      r0,[sp,#0xdd2]        ;160
000112  42a0              CMP      r0,r4                 ;160
000114  dce6              BGT      |L1.228|
;;;167    		}
;;;168    
;;;169    		#if 0
;;;170    			/* 写1行数据，大于512字节，写卡会出错 */
;;;171    			result = f_write(&file, LineData, tBmpHead.biWidth * 3, &bw);
;;;172    			if (result != FR_OK)
;;;173    			{
;;;174    				printf("%s 文件写入失败\r\n", path);
;;;175    				goto quit1;
;;;176    			}
;;;177    		#else
;;;178    			/* 分批次写入， 每次不能超过512字节 */
;;;179    			bytes = tBmpHead.biWidth * 3;
000116  f8dd0dd2          LDR      r0,[sp,#0xdd2]
;;;180    			for (j = 0 ;j < bytes / 512; j++)
00011a  2400              MOVS     r4,#0
00011c  eb000740          ADD      r7,r0,r0,LSL #1       ;179
;;;181    			{
;;;182    				/* 每次写入512字节 */
;;;183    				result = f_write(&file, &LineData[512 * j], 512, &bw);
000120  f44f7800          MOV      r8,#0x200
000124  e00c              B        |L1.320|
000126  bf00              NOP      
                  |L1.296|
000128  eb052144          ADD      r1,r5,r4,LSL #9
00012c  f50d6362          ADD      r3,sp,#0xe20
000130  4642              MOV      r2,r8
000132  f60d1068          ADD      r0,sp,#0x968
000136  f7fffffe          BL       f_write
;;;184    				if (result != FR_OK)
00013a  b948              CBNZ     r0,|L1.336|
00013c  1c64              ADDS     r4,r4,#1
00013e  b2a4              UXTH     r4,r4                 ;180
                  |L1.320|
000140  ebb42f57          CMP      r4,r7,LSR #9          ;180
000144  d3f0              BCC      |L1.296|
;;;185    				{
;;;186    					printf("%s 文件写入失败\r\n", path);
;;;187    					goto quit1;
;;;188    				}
;;;189    			}		
;;;190    			
;;;191    			if (bytes % 512)
000146  05f8              LSLS     r0,r7,#23
000148  d013              BEQ      |L1.370|
;;;192    			{
;;;193    				result = f_write(&file, &LineData[(bytes / 512) * 512], bytes % 512, &bw);
00014a  f3c70208          UBFX     r2,r7,#0,#9
00014e  e000              B        |L1.338|
                  |L1.336|
000150  e009              B        |L1.358|
                  |L1.338|
000152  0a78              LSRS     r0,r7,#9
000154  0240              LSLS     r0,r0,#9
000156  1941              ADDS     r1,r0,r5
000158  f50d6362          ADD      r3,sp,#0xe20
00015c  f60d1068          ADD      r0,sp,#0x968
000160  f7fffffe          BL       f_write
;;;194    				if (result != FR_OK)
000164  b128              CBZ      r0,|L1.370|
                  |L1.358|
;;;195    				{
;;;196    					printf("%s 文件写入失败\r\n", path);
000166  f60d51f8          ADD      r1,sp,#0xdf8
00016a  a01a              ADR      r0,|L1.468|
00016c  f7fffffe          BL       __2printf
;;;197    					goto quit1;
000170  e005              B        |L1.382|
                  |L1.370|
000172  1c76              ADDS     r6,r6,#1
000174  b2b6              UXTH     r6,r6                 ;157
                  |L1.374|
000176  f8dd0dd6          LDR      r0,[sp,#0xdd6]        ;157
00017a  42b0              CMP      r0,r6                 ;157
00017c  dcad              BGT      |L1.218|
                  |L1.382|
;;;198    				}		
;;;199    			}				
;;;200    			
;;;201    		#endif
;;;202    	}
;;;203    
;;;204    quit1:
;;;205    	/* 关闭文件*/
;;;206    	f_close(&file);
00017e  f60d1068          ADD      r0,sp,#0x968
000182  f7fffffe          BL       f_close
;;;207    
;;;208    	/* 卸载文件系统 */
;;;209    	//f_mount(ucVolume, NULL);
;;;210    	f_mount(NULL,FS_VOLUME_SD, 0);
000186  2200              MOVS     r2,#0
000188  a105              ADR      r1,|L1.416|
00018a  4610              MOV      r0,r2
00018c  f7fffffe          BL       f_mount
;;;211    
;;;212    	bsp_LedOff(1);	/* 关闭LED1, 表示开始截屏结束 */
000190  2001              MOVS     r0,#1
000192  f7fffffe          BL       bsp_LedOff
;;;213    }
000196  f60d6d28          ADD      sp,sp,#0xe28
00019a  e8bd81f0          POP      {r4-r8,pc}
;;;214    
                          ENDP

00019e  0000              DCW      0x0000
                  |L1.416|
0001a0  303a00            DCB      "0:",0
0001a3  00                DCB      0
                  |L1.420|
0001a4  25732f25          DCB      "%s/%02d_%dx%d.bmp",0
0001a8  3032645f
0001ac  25647825
0001b0  642e626d
0001b4  7000    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L1.440|
0001b8  b4b4bda8          DCB      180,180,189,168,"SD",191,168,206,196,188,254,"%s",202,167
0001bc  5344bfa8
0001c0  cec4bcfe
0001c4  2573caa7
0001c8  b0dc2028          DCB      176,220," (%d)\r\n",0
0001cc  2564290d
0001d0  0a00    
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L1.468|
0001d4  257320ce          DCB      "%s ",206,196,188,254,208,180,200,235,202,167,176,220,"\r"
0001d8  c4bcfed0
0001dc  b4c8ebca
0001e0  a7b0dc0d
0001e4  0a00              DCB      "\n",0
0001e6  00                DCB      0
0001e7  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bmp_file.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_bmp_file_c_d839a426____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_bmp_file_c_d839a426____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_bmp_file_c_d839a426____REVSH|
#line 128
|__asm___10_bmp_file_c_d839a426____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
