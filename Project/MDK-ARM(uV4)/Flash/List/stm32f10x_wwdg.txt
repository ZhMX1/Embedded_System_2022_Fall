; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f10x_wwdg.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\stm32f10x_wwdg.crf ..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;212      */
;;;213    void WWDG_ClearFlag(void)
000000  4901              LDR      r1,|L1.8|
;;;214    {
;;;215      WWDG->SR = (uint32_t)RESET;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;216    }
000006  4770              BX       lr
;;;217    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;107      */
;;;108    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;111      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;112    }
;;;113    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;190      */
;;;191    void WWDG_Enable(uint8_t Counter)
000000  4902              LDR      r1,|L3.12|
;;;192    {
;;;193      /* Check the parameters */
;;;194      assert_param(IS_WWDG_COUNTER(Counter));
;;;195      WWDG->CR = CR_WDGA_Set | Counter;
000002  f0400080          ORR      r0,r0,#0x80
000006  6008              STR      r0,[r1,#0]
;;;196    }
000008  4770              BX       lr
;;;197    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;164      */
;;;165    void WWDG_EnableIT(void)
000000  4902              LDR      r1,|L4.12|
;;;166    {
;;;167      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a4          STR      r0,[r1,#0xa4]
;;;168    }
000008  4770              BX       lr
;;;169    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42058000

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;202      */
;;;203    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;204    {
;;;205      return (FlagStatus)(WWDG->SR);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;206    }
000006  4770              BX       lr
;;;207    
                          ENDP

                  |L5.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;175      */
;;;176    void WWDG_SetCounter(uint8_t Counter)
000000  4902              LDR      r1,|L6.12|
;;;177    {
;;;178      /* Check the parameters */
;;;179      assert_param(IS_WWDG_COUNTER(Counter));
;;;180      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;181         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;182      WWDG->CR = Counter & BIT_Mask;
000002  f000007f          AND      r0,r0,#0x7f
000006  6008              STR      r0,[r1,#0]
;;;183    }
000008  4770              BX       lr
;;;184    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;123      */
;;;124    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  4a03              LDR      r2,|L7.16|
;;;125    {
;;;126      uint32_t tmpreg = 0;
;;;127      /* Check the parameters */
;;;128      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;129      /* Clear WDGTB[1:0] bits */
;;;130      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000002  6811              LDR      r1,[r2,#0]
000004  f42171c0          BIC      r1,r1,#0x180
;;;131      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;132      tmpreg |= WWDG_Prescaler;
000008  4301              ORRS     r1,r1,r0
;;;133      /* Store the new value */
;;;134      WWDG->CFR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;135    }
00000c  4770              BX       lr
;;;136    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;142      */
;;;143    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  4905              LDR      r1,|L8.24|
;;;144    {
000002  b508              PUSH     {r3,lr}
;;;145      __IO uint32_t tmpreg = 0;
;;;146    
;;;147      /* Check the parameters */
;;;148      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;149      /* Clear W[6:0] bits */
;;;150    
;;;151      tmpreg = WWDG->CFR & CFR_W_Mask;
000004  680a              LDR      r2,[r1,#0]
;;;152    
;;;153      /* Set W[6:0] bits according to WindowValue value */
;;;154      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
000006  f000007f          AND      r0,r0,#0x7f
00000a  f022027f          BIC      r2,r2,#0x7f           ;151
00000e  4310              ORRS     r0,r0,r2
;;;155    
;;;156      /* Store the new value */
;;;157      WWDG->CFR = tmpreg;
000010  9000              STR      r0,[sp,#0]
000012  6008              STR      r0,[r1,#0]
;;;158    }
000014  bd08              POP      {r3,pc}
;;;159    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40002c04

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_wwdg_c_9668c0ca____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f10x_wwdg_c_9668c0ca____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f10x_wwdg_c_9668c0ca____REVSH|
#line 128
|__asm___16_stm32f10x_wwdg_c_9668c0ca____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
