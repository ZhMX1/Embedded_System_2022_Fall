; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\hard_test.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\hard_test.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\hard_test.crf ..\..\User\app\src\hard_test.c]
                          THUMB

                          AREA ||i.HardInfo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  HardInfo PROC
;;;34     */
;;;35     void HardInfo(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;36     {
000004  b0b1              SUB      sp,sp,#0xc4
;;;37     	uint8_t ucKeyCode;		/* 按键代码 */
;;;38     	uint8_t ucTouch;		/* 触摸事件 */
;;;39     	uint8_t fRefresh;		/* 刷屏请求标志,1表示需要刷新 */
;;;40     	FONT_T tFont, tFontBtn;	/* 定义一个字体结构体变量，用于设置字体参数 */
;;;41     	char buf[128];
;;;42     	uint16_t x, y;
;;;43     	uint16_t usLineCap = 18;
;;;44     	int16_t tpX, tpY;
;;;45     	BUTTON_T tBtn;
;;;46     	uint8_t fQuit;
;;;47     
;;;48     	LCD_ClrScr(CL_BLUE);  	/* 清屏，背景蓝色 */
000006  201f              MOVS     r0,#0x1f
000008  f7fffffe          BL       LCD_ClrScr
;;;49     
;;;50     	/* 设置字体参数 */
;;;51     	{
;;;52     		tFont.FontCode = FC_ST_16;	/* 字体代码 16点阵 */
00000c  f04f0801          MOV      r8,#1
;;;53     		tFont.FrontColor = CL_WHITE;	/* 字体颜色 */
;;;54     		tFont.BackColor = CL_BLUE;	/* 文字背景颜色 */
;;;55     		tFont.Space = 0;				/* 文字间距，单位 = 像素 */
;;;56     
;;;57     		/* 按钮字体 */
;;;58     		tFontBtn.FontCode = FC_ST_16;
;;;59     		tFontBtn.BackColor = CL_MASK;	/* 透明色 */
000010  f6491099          MOV      r0,#0x9999
000014  2600              MOVS     r6,#0                 ;55
000016  f8ad00b4          STRH     r0,[sp,#0xb4]
00001a  f88d8090          STRB     r8,[sp,#0x90]         ;52
00001e  f64f74ff          MOV      r4,#0xffff            ;53
000022  f04f0b1f          MOV      r11,#0x1f             ;54
000026  f8ad4092          STRH     r4,[sp,#0x92]         ;53
00002a  f8adb094          STRH     r11,[sp,#0x94]        ;54
00002e  f88d80b0          STRB     r8,[sp,#0xb0]         ;58
;;;60     		tFontBtn.FrontColor = CL_BLACK;
;;;61     		tFontBtn.Space = 0;
;;;62     	}
;;;63     	
;;;64     	
;;;65     
;;;66     	x = 5;
000032  2005              MOVS     r0,#5
000034  f8ad6096          STRH     r6,[sp,#0x96]         ;55
000038  f8ad60b2          STRH     r6,[sp,#0xb2]         ;60
00003c  f8ad60b6          STRH     r6,[sp,#0xb6]         ;61
;;;67     	y = 3;
000040  2103              MOVS     r1,#3
;;;68     	LCD_DispStr(x, y, "安富莱STM32-V4开发板硬件信息", &tFont);			/* 在(8,3)坐标处显示一串汉字 */
000042  ab24              ADD      r3,sp,#0x90
000044  a2d9              ADR      r2,|L1.940|
000046  9001              STR      r0,[sp,#4]
000048  f7fffffe          BL       LCD_DispStr
;;;69     	y += usLineCap;
;;;70     
;;;71     	/* 检测CPU ID */
;;;72     	{
;;;73     		/* 参考手册：
;;;74     			32.6.1 MCU device ID code
;;;75     			33.1 Unique device ID register (96 bits)
;;;76     		*/
;;;77     		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;
;;;78     
;;;79     		CPU_Sn0 = *(__IO uint32_t*)(0x1FFFF7E8);
00004c  48df              LDR      r0,|L1.972|
00004e  f04f0a15          MOV      r10,#0x15             ;69
000052  f8d09000          LDR      r9,[r0,#0]
;;;80     		CPU_Sn1 = *(__IO uint32_t*)(0x1FFFF7EC);
000056  1d00              ADDS     r0,r0,#4
000058  6807              LDR      r7,[r0,#0]
;;;81     		CPU_Sn2 = *(__IO uint32_t*)(0x1FFFF7F0);
00005a  1d00              ADDS     r0,r0,#4
00005c  6805              LDR      r5,[r0,#0]
;;;82     
;;;83     		printf("\r\nCPU : STM32F103ZET6, LQFP144\r\n");
00005e  a0dc              ADR      r0,|L1.976|
000060  f7fffffe          BL       __2printf
;;;84     		
;;;85     		LCD_DispStr(x, y, "CPU : STM32F103ZET6, LQFP144", &tFont);			
000064  ab24              ADD      r3,sp,#0x90
000066  a2e3              ADR      r2,|L1.1012|
000068  4651              MOV      r1,r10
00006a  9801              LDR      r0,[sp,#4]
00006c  f7fffffe          BL       LCD_DispStr
;;;86     		y += usLineCap;				
000070  f04f0a27          MOV      r10,#0x27
;;;87     		
;;;88     		sprintf(buf, " UID = %08X %08X %08X"
000074  463b              MOV      r3,r7
000076  462a              MOV      r2,r5
000078  a1e6              ADR      r1,|L1.1044|
00007a  a804              ADD      r0,sp,#0x10
00007c  f8cd9000          STR      r9,[sp,#0]
000080  f7fffffe          BL       __2sprintf
;;;89     			, CPU_Sn2, CPU_Sn1, CPU_Sn0);
;;;90     		printf("%s\r\n", buf);
000084  a904              ADD      r1,sp,#0x10
000086  a0e9              ADR      r0,|L1.1068|
000088  f7fffffe          BL       __2printf
;;;91     		LCD_DispStr(x, y, buf, &tFont);
00008c  ab24              ADD      r3,sp,#0x90
00008e  aa04              ADD      r2,sp,#0x10
000090  4651              MOV      r1,r10
000092  9801              LDR      r0,[sp,#4]
000094  f7fffffe          BL       LCD_DispStr
;;;92     		y += usLineCap;		
000098  2739              MOVS     r7,#0x39
;;;93     	}
;;;94     	
;;;95     	/* 显示TFT控制器型号和屏幕分辨率 */
;;;96     	{
;;;97     		strcpy(buf, "TFT Driver : ");
00009a  a1e6              ADR      r1,|L1.1076|
00009c  a804              ADD      r0,sp,#0x10
00009e  f7fffffe          BL       strcpy
;;;98     		LCD_GetChipDescribe(&buf[strlen(buf)]);	/* 读取TFT驱动芯片型号 */
0000a2  a804              ADD      r0,sp,#0x10
0000a4  f7fffffe          BL       strlen
0000a8  ad04              ADD      r5,sp,#0x10
0000aa  4428              ADD      r0,r0,r5
0000ac  f7fffffe          BL       LCD_GetChipDescribe
;;;99     		sprintf(&buf[strlen(buf)], "   %d x %d", LCD_GetWidth(), LCD_GetHeight());
0000b0  f7fffffe          BL       LCD_GetHeight
0000b4  4682              MOV      r10,r0
0000b6  f7fffffe          BL       LCD_GetWidth
0000ba  4681              MOV      r9,r0
0000bc  a804              ADD      r0,sp,#0x10
0000be  f7fffffe          BL       strlen
0000c2  4428              ADD      r0,r0,r5
0000c4  4653              MOV      r3,r10
0000c6  464a              MOV      r2,r9
0000c8  a1de              ADR      r1,|L1.1092|
0000ca  f7fffffe          BL       __2sprintf
;;;100    		LCD_DispStr(x, y, buf, &tFont);
0000ce  ab24              ADD      r3,sp,#0x90
0000d0  aa04              ADD      r2,sp,#0x10
0000d2  4639              MOV      r1,r7
0000d4  9801              LDR      r0,[sp,#4]
0000d6  f7fffffe          BL       LCD_DispStr
;;;101    		y += usLineCap;
0000da  274b              MOVS     r7,#0x4b
;;;102    	}
;;;103    
;;;104    	/* 测试SRAM */
;;;105    	{
;;;106    		if (bsp_TestExtSRAM() == 0)
0000dc  f7fffffe          BL       bsp_TestExtSRAM
;;;107    		{
;;;108    			sprintf(buf, "SRAM Model : EM681FV16BU, Test OK");
;;;109    			printf("%s\r\n", buf);
;;;110    
;;;111    			LCD_DispStr(x, y, buf, &tFont);
;;;112    		}
;;;113    		else
;;;114    		{
;;;115    			sprintf(buf, "SRAM Model: EM681FV16BU, Test Err");
;;;116    			printf("%s\r\n", buf);
;;;117    
;;;118    			tFont.FrontColor = CL_RED;
0000e0  f44f4578          MOV      r5,#0xf800
0000e4  2800              CMP      r0,#0                 ;106
0000e6  d027              BEQ      |L1.312|
0000e8  a1d9              ADR      r1,|L1.1104|
0000ea  a804              ADD      r0,sp,#0x10           ;115
0000ec  f7fffffe          BL       __2sprintf
0000f0  a904              ADD      r1,sp,#0x10           ;116
0000f2  a0ce              ADR      r0,|L1.1068|
0000f4  f7fffffe          BL       __2printf
0000f8  f8ad5092          STRH     r5,[sp,#0x92]
;;;119    			LCD_DispStr(x, y, buf, &tFont);
0000fc  ab24              ADD      r3,sp,#0x90
0000fe  aa04              ADD      r2,sp,#0x10
000100  4639              MOV      r1,r7
000102  9801              LDR      r0,[sp,#4]
000104  f7fffffe          BL       LCD_DispStr
;;;120    			tFont.FrontColor = CL_WHITE;
000108  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.268|
;;;121    		}
;;;122    		y += usLineCap;
00010c  275d              MOVS     r7,#0x5d
;;;123    	}
;;;124    
;;;125    	/* 测试NOR Flash */
;;;126    	{
;;;127    		uint32_t id;
;;;128    
;;;129    		id = NOR_ReadID();
00010e  f7fffffe          BL       NOR_ReadID
000112  4602              MOV      r2,r0
;;;130    
;;;131    		if (id == S29GL128P)
000114  48d7              LDR      r0,|L1.1140|
000116  4282              CMP      r2,r0
000118  d11d              BNE      |L1.342|
;;;132    		{
;;;133    			sprintf(buf, "NOR Flash ID = 0x%08X, Model = S29GL128P, OK", id);
00011a  a1d7              ADR      r1,|L1.1144|
00011c  a804              ADD      r0,sp,#0x10
00011e  f7fffffe          BL       __2sprintf
;;;134    			printf("%s\r\n", buf);
000122  a904              ADD      r1,sp,#0x10
000124  a0c1              ADR      r0,|L1.1068|
000126  f7fffffe          BL       __2printf
;;;135    
;;;136    			LCD_DispStr(x, y, buf, &tFont);
00012a  ab24              ADD      r3,sp,#0x90
00012c  aa04              ADD      r2,sp,#0x10
00012e  4639              MOV      r1,r7
000130  9801              LDR      r0,[sp,#4]
000132  f7fffffe          BL       LCD_DispStr
000136  e020              B        |L1.378|
                  |L1.312|
000138  a1db              ADR      r1,|L1.1192|
00013a  a804              ADD      r0,sp,#0x10           ;108
00013c  f7fffffe          BL       __2sprintf
000140  a904              ADD      r1,sp,#0x10           ;109
000142  a0ba              ADR      r0,|L1.1068|
000144  f7fffffe          BL       __2printf
000148  ab24              ADD      r3,sp,#0x90           ;111
00014a  aa04              ADD      r2,sp,#0x10           ;111
00014c  4639              MOV      r1,r7                 ;111
00014e  9801              LDR      r0,[sp,#4]            ;111
000150  f7fffffe          BL       LCD_DispStr
000154  e7da              B        |L1.268|
                  |L1.342|
;;;137    		}
;;;138    		else
;;;139    		{
;;;140    			sprintf(buf, "NOR Flash ID = 0x%08X, Model = xxxx, Err", id);
000156  a1dd              ADR      r1,|L1.1228|
000158  a804              ADD      r0,sp,#0x10
00015a  f7fffffe          BL       __2sprintf
;;;141    			printf("%s\r\n", buf);
00015e  a904              ADD      r1,sp,#0x10
000160  a0b2              ADR      r0,|L1.1068|
000162  f7fffffe          BL       __2printf
;;;142    
;;;143    			tFont.FrontColor = CL_RED;
000166  f8ad5092          STRH     r5,[sp,#0x92]
;;;144    			LCD_DispStr(x, y, buf, &tFont);
00016a  ab24              ADD      r3,sp,#0x90
00016c  aa04              ADD      r2,sp,#0x10
00016e  4639              MOV      r1,r7
000170  9801              LDR      r0,[sp,#4]
000172  f7fffffe          BL       LCD_DispStr
;;;145    			tFont.FrontColor = CL_WHITE;
000176  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.378|
;;;146    		}
;;;147    		y += usLineCap;
00017a  f04f096f          MOV      r9,#0x6f
;;;148    	}
;;;149    
;;;150    	/* 测试NADN Flash */
;;;151    	{
;;;152    		uint32_t id;
;;;153    
;;;154    		NAND_Init();	/* 初始化NAND */
00017e  f7fffffe          BL       NAND_Init
;;;155    		
;;;156    		id = NAND_ReadID();
000182  f7fffffe          BL       NAND_ReadID
000186  4607              MOV      r7,r0
;;;157    
;;;158    		sprintf(buf, "NAND Flash ID = 0x%04X, Type = ", id);
000188  4602              MOV      r2,r0
00018a  a1db              ADR      r1,|L1.1272|
00018c  a804              ADD      r0,sp,#0x10
00018e  f7fffffe          BL       __2sprintf
;;;159    		if (id == HY27UF081G2A)
000192  48e1              LDR      r0,|L1.1304|
000194  4287              CMP      r7,r0
000196  d102              BNE      |L1.414|
;;;160    		{
;;;161    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = HY27UF081G2A, OK", id);
000198  463a              MOV      r2,r7
00019a  a1e0              ADR      r1,|L1.1308|
;;;162    			printf("%s\r\n", buf);
;;;163    			LCD_DispStr(x, y, buf, &tFont);
00019c  e00a              B        |L1.436|
                  |L1.414|
;;;164    		}
;;;165    		else if (id == H27U1G8F2BTR)
00019e  48ec              LDR      r0,|L1.1360|
0001a0  4287              CMP      r7,r0
0001a2  d102              BNE      |L1.426|
;;;166    		{
;;;167    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = H27U1G8F2BTR, OK", id);
0001a4  463a              MOV      r2,r7
0001a6  a1eb              ADR      r1,|L1.1364|
;;;168    			printf("%s\r\n", buf);
;;;169    			LCD_DispStr(x, y, buf, &tFont);
0001a8  e004              B        |L1.436|
                  |L1.426|
;;;170    		}		
;;;171    		else if (id == H27U4G8F2DTR)
0001aa  48f7              LDR      r0,|L1.1416|
;;;172    		{
;;;173    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = H27U4G8F2DTR, OK", id);
;;;174    			printf("%s\r\n", buf);
;;;175    			LCD_DispStr(x, y, buf, &tFont);
;;;176    		}		
;;;177    		else
;;;178    		{
;;;179    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = Unknow, Err", id);
0001ac  463a              MOV      r2,r7
0001ae  4287              CMP      r7,r0                 ;171
0001b0  d10e              BNE      |L1.464|
0001b2  a1f6              ADR      r1,|L1.1420|
                  |L1.436|
0001b4  a804              ADD      r0,sp,#0x10           ;173
0001b6  f7fffffe          BL       __2sprintf
0001ba  a904              ADD      r1,sp,#0x10           ;174
0001bc  a09b              ADR      r0,|L1.1068|
0001be  f7fffffe          BL       __2printf
0001c2  ab24              ADD      r3,sp,#0x90           ;175
0001c4  aa04              ADD      r2,sp,#0x10           ;175
0001c6  4649              MOV      r1,r9                 ;175
0001c8  9801              LDR      r0,[sp,#4]            ;175
0001ca  f7fffffe          BL       LCD_DispStr
0001ce  e00d              B        |L1.492|
                  |L1.464|
0001d0  a1fb              ADR      r1,|L1.1472|
0001d2  a804              ADD      r0,sp,#0x10
0001d4  f7fffffe          BL       __2sprintf
;;;180    			tFont.FrontColor = CL_RED;
0001d8  f8ad5092          STRH     r5,[sp,#0x92]
;;;181    			LCD_DispStr(x, y, buf, &tFont);
0001dc  ab24              ADD      r3,sp,#0x90
0001de  aa04              ADD      r2,sp,#0x10
0001e0  4649              MOV      r1,r9
0001e2  9801              LDR      r0,[sp,#4]
0001e4  f7fffffe          BL       LCD_DispStr
;;;182    			tFont.FrontColor = CL_WHITE;
0001e8  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.492|
;;;183    		}
;;;184    		y += usLineCap;
0001ec  2781              MOVS     r7,#0x81
;;;185    		//NAND_DispBadBlockInfo();	/* 向串口1打印NAND Flash坏块信息 (此函数开头初始FSMC) */
;;;186    	}
;;;187    
;;;188    	/* 测试I2C设备 */
;;;189    	{
;;;190    		if (i2c_CheckDevice(EE_DEV_ADDR) == 0)
0001ee  20a0              MOVS     r0,#0xa0
0001f0  f7fffffe          BL       i2c_CheckDevice
0001f4  2800              CMP      r0,#0
;;;191    		{
;;;192    			sprintf(buf, "AT24C128 Ok (0x%02X)", EE_DEV_ADDR);
;;;193    			printf("%s\r\n", buf);
;;;194    			LCD_DispStr(x, y, buf, &tFont);
;;;195    		}
;;;196    		else
;;;197    		{
;;;198    			sprintf(buf, "AT24C128 Err (0x%02X)", EE_DEV_ADDR);
0001f6  f04f02a0          MOV      r2,#0xa0
0001fa  d07c              BEQ      |L1.758|
0001fc  a1fb              ADR      r1,|L1.1516|
0001fe  a804              ADD      r0,sp,#0x10
000200  f7fffffe          BL       __2sprintf
;;;199    			printf("%s\r\n", buf);
000204  a904              ADD      r1,sp,#0x10
000206  a089              ADR      r0,|L1.1068|
000208  f7fffffe          BL       __2printf
;;;200    
;;;201    			tFont.FrontColor = CL_RED;
00020c  f8ad5092          STRH     r5,[sp,#0x92]
;;;202    			LCD_DispStr(x, y, buf, &tFont);
000210  ab24              ADD      r3,sp,#0x90
000212  aa04              ADD      r2,sp,#0x10
000214  4639              MOV      r1,r7
000216  9801              LDR      r0,[sp,#4]
000218  f7fffffe          BL       LCD_DispStr
;;;203    			tFont.FrontColor = CL_WHITE;
00021c  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.544|
;;;204    		}
;;;205    		y += usLineCap;
000220  2793              MOVS     r7,#0x93
;;;206    
;;;207    		if (i2c_CheckDevice(I2C_ADDR_SI4730_W) == 0)
000222  2022              MOVS     r0,#0x22
000224  f7fffffe          BL       i2c_CheckDevice
000228  2800              CMP      r0,#0
;;;208    		{
;;;209    			sprintf(buf, "Si4704 Ok (0x%02X)", I2C_ADDR_SI4730_W);
;;;210    			printf("%s\r\n", buf);
;;;211    			LCD_DispStr(x, y, buf, &tFont);
;;;212    		}
;;;213    		else
;;;214    		{
;;;215    			sprintf(buf, "Si4704 Err (0x%02X)", I2C_ADDR_SI4730_W);
00022a  f04f0222          MOV      r2,#0x22
00022e  d07c              BEQ      |L1.810|
000230  a1f4              ADR      r1,|L1.1540|
000232  a804              ADD      r0,sp,#0x10
000234  f7fffffe          BL       __2sprintf
;;;216    			printf("%s\r\n", buf);
000238  a904              ADD      r1,sp,#0x10
00023a  a07c              ADR      r0,|L1.1068|
00023c  f7fffffe          BL       __2printf
;;;217    
;;;218    			tFont.FrontColor = CL_RED;
000240  f8ad5092          STRH     r5,[sp,#0x92]
;;;219    			LCD_DispStr(x, y, buf, &tFont);
000244  ab24              ADD      r3,sp,#0x90
000246  aa04              ADD      r2,sp,#0x10
000248  4639              MOV      r1,r7
00024a  9801              LDR      r0,[sp,#4]
00024c  f7fffffe          BL       LCD_DispStr
;;;220    			tFont.FrontColor = CL_WHITE;
000250  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.596|
;;;221    		}
;;;222    		y += usLineCap;
000254  27a5              MOVS     r7,#0xa5
;;;223    
;;;224    #if 0
;;;225    		if (i2c_CheckDevice(HMC5883L_SLAVE_ADDRESS) == 0)
;;;226    		{
;;;227    			sprintf(buf, "HMC5883L Ok (0x%02X)", HMC5883L_SLAVE_ADDRESS);
;;;228    			printf("%s\r\n", buf);
;;;229    			LCD_DispStr(x, y, buf, &tFont);
;;;230    		}
;;;231    		else
;;;232    		{
;;;233    			sprintf(buf, "HMC5883L Err");
;;;234    			printf("%s\r\n", buf);
;;;235    
;;;236    			tFont.FrontColor = CL_RED;
;;;237    			LCD_DispStr(x, y, buf, &tFont);
;;;238    			tFont.FrontColor = CL_WHITE;
;;;239    		}
;;;240    		y += usLineCap;
;;;241    #endif		
;;;242    
;;;243    		if (i2c_CheckDevice(MPU6050_SLAVE_ADDRESS) == 0)
000256  20d0              MOVS     r0,#0xd0
000258  f7fffffe          BL       i2c_CheckDevice
00025c  2800              CMP      r0,#0
;;;244    		{
;;;245    			sprintf(buf, "MPU6050 Ok (0x%02X)", MPU6050_SLAVE_ADDRESS);
;;;246    			printf("%s\r\n", buf);
;;;247    			LCD_DispStr(x, y, buf, &tFont);
;;;248    		}
;;;249    		else
;;;250    		{
;;;251    			sprintf(buf, "MPU6050 Err (0x%02X)", MPU6050_SLAVE_ADDRESS);
00025e  f04f02d0          MOV      r2,#0xd0
000262  d07d              BEQ      |L1.864|
000264  a1ec              ADR      r1,|L1.1560|
000266  a804              ADD      r0,sp,#0x10
000268  f7fffffe          BL       __2sprintf
;;;252    			printf("%s\r\n", buf);
00026c  a904              ADD      r1,sp,#0x10
00026e  a06f              ADR      r0,|L1.1068|
000270  f7fffffe          BL       __2printf
;;;253    
;;;254    			tFont.FrontColor = CL_RED;
000274  f8ad5092          STRH     r5,[sp,#0x92]
;;;255    			LCD_DispStr(x, y, buf, &tFont);
000278  ab24              ADD      r3,sp,#0x90
00027a  aa04              ADD      r2,sp,#0x10
00027c  4639              MOV      r1,r7
00027e  9801              LDR      r0,[sp,#4]
000280  f7fffffe          BL       LCD_DispStr
;;;256    			tFont.FrontColor = CL_WHITE;
000284  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.648|
;;;257    		}
;;;258    		y += usLineCap;
000288  27b7              MOVS     r7,#0xb7
;;;259    
;;;260    	#if 1
;;;261    		if (i2c_CheckDevice(BMP180_SLAVE_ADDRESS) == 0)
00028a  20ee              MOVS     r0,#0xee
00028c  f7fffffe          BL       i2c_CheckDevice
000290  2800              CMP      r0,#0
;;;262    		{
;;;263    			sprintf(buf, "BMP180 Ok (0x%02X)", BMP180_SLAVE_ADDRESS);
;;;264    			printf("%s\r\n", buf);
;;;265    			LCD_DispStr(x, y, buf, &tFont);
;;;266    		}
;;;267    		else
;;;268    		{
;;;269    			sprintf(buf, "BMP180 Err (0x%02X)", BMP180_SLAVE_ADDRESS);
000292  f04f02ee          MOV      r2,#0xee
000296  d076              BEQ      |L1.902|
000298  a1e5              ADR      r1,|L1.1584|
00029a  a804              ADD      r0,sp,#0x10
00029c  f7fffffe          BL       __2sprintf
;;;270    			printf("%s\r\n", buf);
0002a0  a904              ADD      r1,sp,#0x10
0002a2  a062              ADR      r0,|L1.1068|
0002a4  f7fffffe          BL       __2printf
;;;271    
;;;272    			tFont.FrontColor = CL_RED;
0002a8  f8ad5092          STRH     r5,[sp,#0x92]
;;;273    			LCD_DispStr(x, y, buf, &tFont);
0002ac  ab24              ADD      r3,sp,#0x90
0002ae  aa04              ADD      r2,sp,#0x10
0002b0  4639              MOV      r1,r7
0002b2  9801              LDR      r0,[sp,#4]
0002b4  f7fffffe          BL       LCD_DispStr
;;;274    			tFont.FrontColor = CL_WHITE;
0002b8  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.700|
;;;275    		}
;;;276    		y += usLineCap;
0002bc  27c9              MOVS     r7,#0xc9
;;;277    	#endif
;;;278    
;;;279    		if (i2c_CheckDevice(WM8978_SLAVE_ADDRESS) == 0)
0002be  2034              MOVS     r0,#0x34
0002c0  f7fffffe          BL       i2c_CheckDevice
0002c4  2800              CMP      r0,#0
;;;280    		{
;;;281    			sprintf(buf, "WM8978 Ok (0x%02X)", WM8978_SLAVE_ADDRESS);
;;;282    			printf("%s\r\n", buf);
;;;283    			LCD_DispStr(x, y, buf, &tFont);
;;;284    		}
;;;285    		else
;;;286    		{
;;;287    			sprintf(buf, "WM8978 Err (0x%02X)", WM8978_SLAVE_ADDRESS);
0002c6  f04f0234          MOV      r2,#0x34
0002ca  d06c              BEQ      |L1.934|
0002cc  a1dd              ADR      r1,|L1.1604|
0002ce  a804              ADD      r0,sp,#0x10
0002d0  f7fffffe          BL       __2sprintf
;;;288    			printf("%s\r\n", buf);
0002d4  a904              ADD      r1,sp,#0x10
0002d6  a055              ADR      r0,|L1.1068|
0002d8  f7fffffe          BL       __2printf
;;;289    
;;;290    			tFont.FrontColor = CL_RED;
0002dc  f8ad5092          STRH     r5,[sp,#0x92]
;;;291    			LCD_DispStr(x, y, buf, &tFont);
0002e0  ab24              ADD      r3,sp,#0x90
0002e2  aa04              ADD      r2,sp,#0x10
0002e4  4639              MOV      r1,r7
0002e6  9801              LDR      r0,[sp,#4]
0002e8  f7fffffe          BL       LCD_DispStr
;;;292    			tFont.FrontColor = CL_WHITE;
0002ec  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.752|
;;;293    		}
;;;294    		y += usLineCap;
0002f0  27db              MOVS     r7,#0xdb
;;;295    
;;;296    		if (i2c_CheckDevice(BH1750_SLAVE_ADDRESS) == 0)
0002f2  2046              MOVS     r0,#0x46
0002f4  e000              B        |L1.760|
                  |L1.758|
0002f6  e037              B        |L1.872|
                  |L1.760|
0002f8  f7fffffe          BL       i2c_CheckDevice
0002fc  2800              CMP      r0,#0
;;;297    		{
;;;298    			sprintf(buf, "BH1750 Ok (0x%02X)", BH1750_SLAVE_ADDRESS);
;;;299    			printf("%s\r\n", buf);
;;;300    			LCD_DispStr(x, y, buf, &tFont);
;;;301    		}
;;;302    		else
;;;303    		{
;;;304    			sprintf(buf, "BH1750 Err (0x%02X)", BH1750_SLAVE_ADDRESS);
0002fe  f04f0246          MOV      r2,#0x46
000302  d051              BEQ      |L1.936|
000304  a1d4              ADR      r1,|L1.1624|
000306  a804              ADD      r0,sp,#0x10
000308  f7fffffe          BL       __2sprintf
;;;305    			printf("%s\r\n", buf);
00030c  a904              ADD      r1,sp,#0x10
00030e  a047              ADR      r0,|L1.1068|
000310  f7fffffe          BL       __2printf
;;;306    
;;;307    			tFont.FrontColor = CL_RED;
000314  f8ad5092          STRH     r5,[sp,#0x92]
;;;308    			LCD_DispStr(x, y, buf, &tFont);
000318  ab24              ADD      r3,sp,#0x90
00031a  aa04              ADD      r2,sp,#0x10
00031c  4639              MOV      r1,r7
00031e  9801              LDR      r0,[sp,#4]
000320  f7fffffe          BL       LCD_DispStr
;;;309    			tFont.FrontColor = CL_WHITE;
000324  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.808|
;;;310    		}
;;;311    		y += usLineCap;
000328  e000              B        |L1.812|
                  |L1.810|
00032a  e02d              B        |L1.904|
                  |L1.812|
00032c  f04f09ed          MOV      r9,#0xed
;;;312    	}
;;;313    
;;;314    	/* 测试SPI Flash */
;;;315    	{
;;;316    		bsp_InitSFlash();	/* 初始化SPI硬件 */
000330  f7fffffe          BL       bsp_InitSFlash
;;;317    
;;;318    		sf_ReadInfo();
000334  f7fffffe          BL       sf_ReadInfo
;;;319    		
;;;320    		/* 检测串行Flash OK */
;;;321    		sprintf(buf, "SPI Flash ID = %08X, Model = %s",g_tSF.ChipID , g_tSF.ChipName);
000338  4fcc              LDR      r7,|L1.1644|
00033a  a1cd              ADR      r1,|L1.1648|
00033c  1d3b              ADDS     r3,r7,#4
00033e  a804              ADD      r0,sp,#0x10
000340  683a              LDR      r2,[r7,#0]  ; g_tSF
000342  f7fffffe          BL       __2sprintf
;;;322    		printf("%s\r\n", buf);
000346  a904              ADD      r1,sp,#0x10
000348  a038              ADR      r0,|L1.1068|
00034a  f7fffffe          BL       __2printf
;;;323    
;;;324    		if (g_tSF.ChipID == W25Q128_ID)
00034e  49d0              LDR      r1,|L1.1680|
000350  6838              LDR      r0,[r7,#0]  ; g_tSF
000352  4288              CMP      r0,r1
000354  d129              BNE      |L1.938|
;;;325    		{
;;;326    			LCD_DispStr(x, y, buf, &tFont);
000356  ab24              ADD      r3,sp,#0x90
000358  aa04              ADD      r2,sp,#0x10
00035a  4649              MOV      r1,r9
00035c  9801              LDR      r0,[sp,#4]
00035e  e000              B        |L1.866|
                  |L1.864|
000360  e1ae              B        |L1.1728|
                  |L1.866|
000362  f7fffffe          BL       LCD_DispStr
000366  e1f5              B        |L1.1876|
                  |L1.872|
000368  a1ca              ADR      r1,|L1.1684|
00036a  a804              ADD      r0,sp,#0x10           ;192
00036c  f7fffffe          BL       __2sprintf
000370  a904              ADD      r1,sp,#0x10           ;193
000372  a02e              ADR      r0,|L1.1068|
000374  f7fffffe          BL       __2printf
000378  ab24              ADD      r3,sp,#0x90           ;194
00037a  aa04              ADD      r2,sp,#0x10           ;194
00037c  4639              MOV      r1,r7                 ;194
00037e  9801              LDR      r0,[sp,#4]            ;194
000380  f7fffffe          BL       LCD_DispStr
000384  e74c              B        |L1.544|
                  |L1.902|
000386  e1ab              B        |L1.1760|
                  |L1.904|
000388  a1c8              ADR      r1,|L1.1708|
00038a  a804              ADD      r0,sp,#0x10           ;209
00038c  f7fffffe          BL       __2sprintf
000390  a904              ADD      r1,sp,#0x10           ;210
000392  a026              ADR      r0,|L1.1068|
000394  f7fffffe          BL       __2printf
000398  ab24              ADD      r3,sp,#0x90           ;211
00039a  aa04              ADD      r2,sp,#0x10           ;211
00039c  4639              MOV      r1,r7                 ;211
00039e  9801              LDR      r0,[sp,#4]            ;211
0003a0  f7fffffe          BL       LCD_DispStr
0003a4  e756              B        |L1.596|
                  |L1.934|
0003a6  e1ab              B        |L1.1792|
                  |L1.936|
0003a8  e1ba              B        |L1.1824|
                  |L1.938|
0003aa  e1c9              B        |L1.1856|
                  |L1.940|
0003ac  b0b2b8bb          DCB      176,178,184,187,192,179,"STM32-V4",191,170,183,162,176,229
0003b0  c0b35354
0003b4  4d33322d
0003b8  5634bfaa
0003bc  b7a2b0e5
0003c0  d3b2bcfe          DCB      211,178,188,254,208,197,207,162,0
0003c4  d0c5cfa2
0003c8  00      
0003c9  00                DCB      0
0003ca  00                DCB      0
0003cb  00                DCB      0
                  |L1.972|
                          DCD      0x1ffff7e8
                  |L1.976|
0003d0  0d0a4350          DCB      "\r\nCPU : STM32F103ZET6, LQFP144\r\n",0
0003d4  55203a20
0003d8  53544d33
0003dc  32463130
0003e0  335a4554
0003e4  362c204c
0003e8  51465031
0003ec  34340d0a
0003f0  00      
0003f1  00                DCB      0
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L1.1012|
0003f4  43505520          DCB      "CPU : STM32F103ZET6, LQFP144",0
0003f8  3a205354
0003fc  4d333246
000400  3130335a
000404  4554362c
000408  204c5146
00040c  50313434
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
000414  20554944          DCB      " UID = %08X %08X %08X",0
000418  203d2025
00041c  30385820
000420  25303858
000424  20253038
000428  5800    
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
00042c  25730d0a          DCB      "%s\r\n",0
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  54465420          DCB      "TFT Driver : ",0
000438  44726976
00043c  6572203a
000440  2000    
000442  00                DCB      0
000443  00                DCB      0
                  |L1.1092|
000444  20202025          DCB      "   %d x %d",0
000448  64207820
00044c  256400  
00044f  00                DCB      0
                  |L1.1104|
000450  5352414d          DCB      "SRAM Model: EM681FV16BU, Test Err",0
000454  204d6f64
000458  656c3a20
00045c  454d3638
000460  31465631
000464  3642552c
000468  20546573
00046c  74204572
000470  7200    
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
                          DCD      0x017e2101
                  |L1.1144|
000478  4e4f5220          DCB      "NOR Flash ID = 0x%08X, Model = S29GL128P, OK",0
00047c  466c6173
000480  68204944
000484  203d2030
000488  78253038
00048c  582c204d
000490  6f64656c
000494  203d2053
000498  3239474c
00049c  31323850
0004a0  2c204f4b
0004a4  00      
0004a5  00                DCB      0
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  5352414d          DCB      "SRAM Model : EM681FV16BU, Test OK",0
0004ac  204d6f64
0004b0  656c203a
0004b4  20454d36
0004b8  38314656
0004bc  31364255
0004c0  2c205465
0004c4  7374204f
0004c8  4b00    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  4e4f5220          DCB      "NOR Flash ID = 0x%08X, Model = xxxx, Err",0
0004d0  466c6173
0004d4  68204944
0004d8  203d2030
0004dc  78253038
0004e0  582c204d
0004e4  6f64656c
0004e8  203d2078
0004ec  7878782c
0004f0  20457272
0004f4  00      
0004f5  00                DCB      0
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L1.1272|
0004f8  4e414e44          DCB      "NAND Flash ID = 0x%04X, Type = ",0
0004fc  20466c61
000500  73682049
000504  44203d20
000508  30782530
00050c  34582c20
000510  54797065
000514  203d2000
                  |L1.1304|
                          DCD      0xadf1801d
                  |L1.1308|
00051c  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = HY27UF081G2A, OK",0
000520  20466c61
000524  73682049
000528  44203d20
00052c  30782530
000530  34582c20
000534  4d6f6465
000538  6c203d20
00053c  48593237
000540  55463038
000544  31473241
000548  2c204f4b
00054c  00      
00054d  00                DCB      0
00054e  00                DCB      0
00054f  00                DCB      0
                  |L1.1360|
                          DCD      0xadf1001d
                  |L1.1364|
000554  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = H27U1G8F2BTR, OK",0
000558  20466c61
00055c  73682049
000560  44203d20
000564  30782530
000568  34582c20
00056c  4d6f6465
000570  6c203d20
000574  48323755
000578  31473846
00057c  32425452
000580  2c204f4b
000584  00      
000585  00                DCB      0
000586  00                DCB      0
000587  00                DCB      0
                  |L1.1416|
                          DCD      0xaddc9095
                  |L1.1420|
00058c  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = H27U4G8F2DTR, OK",0
000590  20466c61
000594  73682049
000598  44203d20
00059c  30782530
0005a0  34582c20
0005a4  4d6f6465
0005a8  6c203d20
0005ac  48323755
0005b0  34473846
0005b4  32445452
0005b8  2c204f4b
0005bc  00      
0005bd  00                DCB      0
0005be  00                DCB      0
0005bf  00                DCB      0
                  |L1.1472|
0005c0  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = Unknow, Err",0
0005c4  20466c61
0005c8  73682049
0005cc  44203d20
0005d0  30782530
0005d4  34582c20
0005d8  4d6f6465
0005dc  6c203d20
0005e0  556e6b6e
0005e4  6f772c20
0005e8  45727200
                  |L1.1516|
0005ec  41543234          DCB      "AT24C128 Err (0x%02X)",0
0005f0  43313238
0005f4  20457272
0005f8  20283078
0005fc  25303258
000600  2900    
000602  00                DCB      0
000603  00                DCB      0
                  |L1.1540|
000604  53693437          DCB      "Si4704 Err (0x%02X)",0
000608  30342045
00060c  72722028
000610  30782530
000614  32582900
                  |L1.1560|
000618  4d505536          DCB      "MPU6050 Err (0x%02X)",0
00061c  30353020
000620  45727220
000624  28307825
000628  30325829
00062c  00      
00062d  00                DCB      0
00062e  00                DCB      0
00062f  00                DCB      0
                  |L1.1584|
000630  424d5031          DCB      "BMP180 Err (0x%02X)",0
000634  38302045
000638  72722028
00063c  30782530
000640  32582900
                  |L1.1604|
000644  574d3839          DCB      "WM8978 Err (0x%02X)",0
000648  37382045
00064c  72722028
000650  30782530
000654  32582900
                  |L1.1624|
000658  42483137          DCB      "BH1750 Err (0x%02X)",0
00065c  35302045
000660  72722028
000664  30782530
000668  32582900
                  |L1.1644|
                          DCD      g_tSF
                  |L1.1648|
000670  53504920          DCB      "SPI Flash ID = %08X, Model = %s",0
000674  466c6173
000678  68204944
00067c  203d2025
000680  3038582c
000684  204d6f64
000688  656c203d
00068c  20257300
                  |L1.1680|
                          DCD      0x00ef4018
                  |L1.1684|
000694  41543234          DCB      "AT24C128 Ok (0x%02X)",0
000698  43313238
00069c  204f6b20
0006a0  28307825
0006a4  30325829
0006a8  00      
0006a9  00                DCB      0
0006aa  00                DCB      0
0006ab  00                DCB      0
                  |L1.1708|
0006ac  53693437          DCB      "Si4704 Ok (0x%02X)",0
0006b0  3034204f
0006b4  6b202830
0006b8  78253032
0006bc  582900  
0006bf  00                DCB      0
                  |L1.1728|
0006c0  a18f              ADR      r1,|L1.2304|
0006c2  a804              ADD      r0,sp,#0x10           ;245
0006c4  f7fffffe          BL       __2sprintf
0006c8  a904              ADD      r1,sp,#0x10           ;246
0006ca  f2af20a0          ADR      r0,|L1.1068|
0006ce  f7fffffe          BL       __2printf
0006d2  ab24              ADD      r3,sp,#0x90           ;247
0006d4  aa04              ADD      r2,sp,#0x10           ;247
0006d6  4639              MOV      r1,r7                 ;247
0006d8  9801              LDR      r0,[sp,#4]            ;247
0006da  f7fffffe          BL       LCD_DispStr
0006de  e5d3              B        |L1.648|
                  |L1.1760|
0006e0  a18c              ADR      r1,|L1.2324|
0006e2  a804              ADD      r0,sp,#0x10           ;263
0006e4  f7fffffe          BL       __2sprintf
0006e8  a904              ADD      r1,sp,#0x10           ;264
0006ea  f2af20c0          ADR      r0,|L1.1068|
0006ee  f7fffffe          BL       __2printf
0006f2  ab24              ADD      r3,sp,#0x90           ;265
0006f4  aa04              ADD      r2,sp,#0x10           ;265
0006f6  4639              MOV      r1,r7                 ;265
0006f8  9801              LDR      r0,[sp,#4]            ;265
0006fa  f7fffffe          BL       LCD_DispStr
0006fe  e5dd              B        |L1.700|
                  |L1.1792|
000700  a189              ADR      r1,|L1.2344|
000702  a804              ADD      r0,sp,#0x10           ;281
000704  f7fffffe          BL       __2sprintf
000708  a904              ADD      r1,sp,#0x10           ;282
00070a  f2af20e0          ADR      r0,|L1.1068|
00070e  f7fffffe          BL       __2printf
000712  ab24              ADD      r3,sp,#0x90           ;283
000714  aa04              ADD      r2,sp,#0x10           ;283
000716  4639              MOV      r1,r7                 ;283
000718  9801              LDR      r0,[sp,#4]            ;283
00071a  f7fffffe          BL       LCD_DispStr
00071e  e5e7              B        |L1.752|
                  |L1.1824|
000720  a186              ADR      r1,|L1.2364|
000722  a804              ADD      r0,sp,#0x10           ;298
000724  f7fffffe          BL       __2sprintf
000728  a904              ADD      r1,sp,#0x10           ;299
00072a  f2af3000          ADR      r0,|L1.1068|
00072e  f7fffffe          BL       __2printf
000732  ab24              ADD      r3,sp,#0x90           ;300
000734  aa04              ADD      r2,sp,#0x10           ;300
000736  4639              MOV      r1,r7                 ;300
000738  9801              LDR      r0,[sp,#4]            ;300
00073a  f7fffffe          BL       LCD_DispStr
00073e  e5f3              B        |L1.808|
                  |L1.1856|
;;;327    		}
;;;328    		else
;;;329    		{
;;;330    			tFont.FrontColor = CL_RED;
000740  f8ad5092          STRH     r5,[sp,#0x92]
;;;331    			LCD_DispStr(x, y, buf, &tFont);
000744  ab24              ADD      r3,sp,#0x90
000746  aa04              ADD      r2,sp,#0x10
000748  4649              MOV      r1,r9
00074a  9801              LDR      r0,[sp,#4]
00074c  f7fffffe          BL       LCD_DispStr
;;;332    			tFont.FrontColor = CL_WHITE;
000750  f8ad4092          STRH     r4,[sp,#0x92]
                  |L1.1876|
;;;333    		}
;;;334    	}
;;;335    
;;;336    	fRefresh = 1;	/* 1表示需要刷新LCD */
000754  2501              MOVS     r5,#1
;;;337    	bsp_StartAutoTimer(0, 1000);
000756  f44f717a          MOV      r1,#0x3e8
00075a  2000              MOVS     r0,#0
00075c  f7fffffe          BL       bsp_StartAutoTimer
;;;338    	fQuit = 0;
000760  f05f0700          MOVS.W   r7,#0
                  |L1.1892|
;;;339    	while (fQuit == 0)
;;;340    	{
;;;341    		bsp_Idle();
000764  f7fffffe          BL       bsp_Idle
;;;342    
;;;343    		/* 显示时钟 */
;;;344    		if (bsp_CheckTimer(0))
000768  2000              MOVS     r0,#0
00076a  f7fffffe          BL       bsp_CheckTimer
00076e  b320              CBZ      r0,|L1.1978|
;;;345    		{
;;;346    			uint16_t x, y;
;;;347    			
;;;348    			tFont.FontCode = FC_ST_16;	/* 字体代码 16点阵 */
000770  f88d8090          STRB     r8,[sp,#0x90]
;;;349    			tFont.FrontColor = CL_WHITE;	/* 字体颜色 */
;;;350    			tFont.BackColor = CL_BLUE;	/* 文字背景颜色 */
000774  f8adb094          STRH     r11,[sp,#0x94]
000778  f8ad4092          STRH     r4,[sp,#0x92]         ;349
;;;351    			tFont.Space = 0;				/* 文字间距，单位 = 像素 */
00077c  f8ad6096          STRH     r6,[sp,#0x96]
;;;352    			
;;;353    			RTC_ReadClock();	/* 读时钟，结果在 g_tRTC */
000780  f7fffffe          BL       RTC_ReadClock
;;;354    			
;;;355    			x = 5;
000784  f04f0a05          MOV      r10,#5
;;;356    			y = LCD_GetHeight() - 20;
000788  f7fffffe          BL       LCD_GetHeight
00078c  3814              SUBS     r0,r0,#0x14
00078e  fa1ff980          UXTH     r9,r0
;;;357    			
;;;358    			sprintf(buf, "%4d-%02d-%02d %02d:%02d:%02d",
000792  486f              LDR      r0,|L1.2384|
000794  78c1              LDRB     r1,[r0,#3]  ; g_tRTC
000796  f890c006          LDRB     r12,[r0,#6]  ; g_tRTC
00079a  7943              LDRB     r3,[r0,#5]  ; g_tRTC
00079c  7902              LDRB     r2,[r0,#4]  ; g_tRTC
00079e  e88d100e          STM      sp,{r1-r3,r12}
0007a2  7883              LDRB     r3,[r0,#2]  ; g_tRTC
0007a4  8802              LDRH     r2,[r0,#0]  ; g_tRTC
0007a6  a16b              ADR      r1,|L1.2388|
0007a8  a804              ADD      r0,sp,#0x10
0007aa  f7fffffe          BL       __2sprintf
;;;359    				g_tRTC.Year, g_tRTC.Mon, g_tRTC.Day, g_tRTC.Hour, g_tRTC.Min, g_tRTC.Sec);
;;;360    			LCD_DispStr(x, y, buf, &tFont);
0007ae  ab24              ADD      r3,sp,#0x90
0007b0  aa04              ADD      r2,sp,#0x10
0007b2  4649              MOV      r1,r9
0007b4  4650              MOV      r0,r10
0007b6  f7fffffe          BL       LCD_DispStr
                  |L1.1978|
;;;361    		}
;;;362    		
;;;363    		if (fRefresh)
0007ba  b1cd              CBZ      r5,|L1.2032|
;;;364    		{
;;;365    			fRefresh = 0;
;;;366    
;;;367    			/* 显示按钮 */
;;;368    			{
;;;369    				tBtn.Font = &tFontBtn;
0007bc  a82c              ADD      r0,sp,#0xb0
;;;370    
;;;371    				tBtn.Left = BUTTON_RET_X;
0007be  9029              STR      r0,[sp,#0xa4]
0007c0  486c              LDR      r0,|L1.2420|
0007c2  2500              MOVS     r5,#0                 ;365
0007c4  8800              LDRH     r0,[r0,#0]  ; g_LcdWidth
0007c6  3840              SUBS     r0,r0,#0x40
0007c8  f8ad009a          STRH     r0,[sp,#0x9a]
;;;372    				tBtn.Top = BUTTON_RET_Y;
0007cc  486a              LDR      r0,|L1.2424|
0007ce  8800              LDRH     r0,[r0,#0]  ; g_LcdHeight
;;;373    				tBtn.Height = BUTTON_RET_H;
;;;374    				tBtn.Width = BUTTON_RET_W;
;;;375    				tBtn.Focus = 0;	/* 失去焦点 */
0007d0  f88d60ac          STRB     r6,[sp,#0xac]
0007d4  3824              SUBS     r0,r0,#0x24           ;372
0007d6  f8ad009c          STRH     r0,[sp,#0x9c]         ;372
0007da  2020              MOVS     r0,#0x20              ;373
0007dc  f8ad009e          STRH     r0,[sp,#0x9e]         ;373
0007e0  203c              MOVS     r0,#0x3c              ;374
0007e2  f8ad00a0          STRH     r0,[sp,#0xa0]         ;374
;;;376    				tBtn.pCaption = "返回";
0007e6  a065              ADR      r0,|L1.2428|
;;;377    				LCD_DrawButton(&tBtn);
0007e8  902a              STR      r0,[sp,#0xa8]
0007ea  a826              ADD      r0,sp,#0x98
0007ec  f7fffffe          BL       LCD_DrawButton
                  |L1.2032|
;;;378    			}
;;;379    		}
;;;380    
;;;381    		ucTouch = TOUCH_GetKey(&tpX, &tpY);	/* 读取触摸事件 */
0007f0  a92f              ADD      r1,sp,#0xbc
0007f2  a82e              ADD      r0,sp,#0xb8
0007f4  f7fffffe          BL       TOUCH_GetKey
;;;382    		if (ucTouch != TOUCH_NONE)
0007f8  b390              CBZ      r0,|L1.2144|
;;;383    		{
;;;384    			switch (ucTouch)
0007fa  2801              CMP      r0,#1
0007fc  d002              BEQ      |L1.2052|
0007fe  2803              CMP      r0,#3
000800  d16f              BNE      |L1.2274|
000802  e02e              B        |L1.2146|
                  |L1.2052|
;;;385    			{
;;;386    				case TOUCH_DOWN:		/* 触笔按下事件 */
;;;387    					if (TOUCH_InRect(tpX, tpY, BUTTON_RET_X, BUTTON_RET_Y, BUTTON_RET_H, BUTTON_RET_W))
000804  f8dfa170          LDR      r10,|L1.2424|
000808  213c              MOVS     r1,#0x3c
00080a  2020              MOVS     r0,#0x20
00080c  e9cd0100          STRD     r0,r1,[sp,#0]
000810  f8ba0000          LDRH     r0,[r10,#0]  ; g_LcdHeight
000814  f8df915c          LDR      r9,|L1.2420|
000818  3824              SUBS     r0,r0,#0x24
00081a  b283              UXTH     r3,r0
00081c  f8b90000          LDRH     r0,[r9,#0]  ; g_LcdWidth
000820  3840              SUBS     r0,r0,#0x40
000822  b282              UXTH     r2,r0
000824  f8bd00bc          LDRH     r0,[sp,#0xbc]
000828  b281              UXTH     r1,r0
00082a  f8bd00b8          LDRH     r0,[sp,#0xb8]
00082e  b280              UXTH     r0,r0
000830  f7fffffe          BL       TOUCH_InRect
000834  b1a0              CBZ      r0,|L1.2144|
;;;388    					{
;;;389    						tBtn.Font = &tFontBtn;
000836  a82c              ADD      r0,sp,#0xb0
;;;390    
;;;391    						tBtn.Left = BUTTON_RET_X;
000838  9029              STR      r0,[sp,#0xa4]
00083a  f8b90000          LDRH     r0,[r9,#0]  ; g_LcdWidth
00083e  3840              SUBS     r0,r0,#0x40
000840  f8ad009a          STRH     r0,[sp,#0x9a]
;;;392    						tBtn.Top = BUTTON_RET_Y;
000844  f8ba0000          LDRH     r0,[r10,#0]  ; g_LcdHeight
;;;393    						tBtn.Height = BUTTON_RET_H;
;;;394    						tBtn.Width = BUTTON_RET_W;
;;;395    						tBtn.Focus = 1;	/* 焦点 */
000848  f88d80ac          STRB     r8,[sp,#0xac]
00084c  3824              SUBS     r0,r0,#0x24           ;392
00084e  f8ad009c          STRH     r0,[sp,#0x9c]         ;392
000852  2020              MOVS     r0,#0x20              ;393
000854  f8ad009e          STRH     r0,[sp,#0x9e]         ;393
000858  203c              MOVS     r0,#0x3c              ;394
00085a  f8ad00a0          STRH     r0,[sp,#0xa0]         ;394
;;;396    						tBtn.pCaption = "返回";
;;;397    						LCD_DrawButton(&tBtn);
00085e  e03b              B        |L1.2264|
                  |L1.2144|
000860  e03f              B        |L1.2274|
                  |L1.2146|
;;;398    					}
;;;399    					break;
;;;400    
;;;401    				case TOUCH_RELEASE:		/* 触笔释放事件 */
;;;402    					if (TOUCH_InRect(tpX, tpY, BUTTON_RET_X, BUTTON_RET_Y, BUTTON_RET_H, BUTTON_RET_W))
000862  f8dfa114          LDR      r10,|L1.2424|
000866  213c              MOVS     r1,#0x3c
000868  2020              MOVS     r0,#0x20
00086a  e9cd0100          STRD     r0,r1,[sp,#0]
00086e  f8ba0000          LDRH     r0,[r10,#0]  ; g_LcdHeight
000872  f8df9100          LDR      r9,|L1.2420|
000876  3824              SUBS     r0,r0,#0x24
000878  b283              UXTH     r3,r0
00087a  f8b90000          LDRH     r0,[r9,#0]  ; g_LcdWidth
00087e  3840              SUBS     r0,r0,#0x40
000880  b282              UXTH     r2,r0
000882  f8bd00bc          LDRH     r0,[sp,#0xbc]
000886  b281              UXTH     r1,r0
000888  f8bd00b8          LDRH     r0,[sp,#0xb8]
00088c  b280              UXTH     r0,r0
00088e  f7fffffe          BL       TOUCH_InRect
000892  2800              CMP      r0,#0
;;;403    					{
;;;404    						tBtn.Font = &tFontBtn;
;;;405    
;;;406    						tBtn.Left = BUTTON_RET_X;
;;;407    						tBtn.Top = BUTTON_RET_Y;
;;;408    						tBtn.Height = BUTTON_RET_H;
;;;409    						tBtn.Width = BUTTON_RET_W;
;;;410    						tBtn.Focus = 1;	/* 焦点 */
;;;411    						tBtn.pCaption = "返回";
;;;412    						LCD_DrawButton(&tBtn);
;;;413    
;;;414    						fQuit = 1;		/* 返回 */
;;;415    					}
;;;416    					else	/* 按钮失去焦点 */
;;;417    					{
;;;418    						tBtn.Font = &tFontBtn;
000894  a82c              ADD      r0,sp,#0xb0
;;;419    
;;;420    						tBtn.Left = BUTTON_RET_X;
000896  9029              STR      r0,[sp,#0xa4]
000898  f8b90000          LDRH     r0,[r9,#0]  ; g_LcdWidth
00089c  f1a00040          SUB      r0,r0,#0x40
0008a0  f8ad009a          STRH     r0,[sp,#0x9a]
;;;421    						tBtn.Top = BUTTON_RET_Y;
0008a4  f8ba0000          LDRH     r0,[r10,#0]  ; g_LcdHeight
0008a8  f1a00024          SUB      r0,r0,#0x24
0008ac  f8ad009c          STRH     r0,[sp,#0x9c]
;;;422    						tBtn.Height = BUTTON_RET_H;
0008b0  f04f0020          MOV      r0,#0x20
0008b4  f8ad009e          STRH     r0,[sp,#0x9e]
;;;423    						tBtn.Width = BUTTON_RET_W;
0008b8  f04f003c          MOV      r0,#0x3c
0008bc  f8ad00a0          STRH     r0,[sp,#0xa0]
0008c0  d008              BEQ      |L1.2260|
0008c2  a02e              ADR      r0,|L1.2428|
0008c4  902a              STR      r0,[sp,#0xa8]         ;412
0008c6  f88d80ac          STRB     r8,[sp,#0xac]         ;410
0008ca  a826              ADD      r0,sp,#0x98           ;412
0008cc  f7fffffe          BL       LCD_DrawButton
0008d0  2701              MOVS     r7,#1                 ;414
0008d2  e006              B        |L1.2274|
                  |L1.2260|
;;;424    						tBtn.Focus = 0;	/* 焦点 */
0008d4  f88d60ac          STRB     r6,[sp,#0xac]
                  |L1.2264|
0008d8  a028              ADR      r0,|L1.2428|
0008da  902a              STR      r0,[sp,#0xa8]         ;397
0008dc  a826              ADD      r0,sp,#0x98           ;397
0008de  f7fffffe          BL       LCD_DrawButton
                  |L1.2274|
;;;425    						tBtn.pCaption = "返回";
;;;426    						LCD_DrawButton(&tBtn);
;;;427    					}
;;;428    					break;
;;;429    			}
;;;430    		}
;;;431    
;;;432    		ucKeyCode = bsp_GetKey();	/* 读取键值, 无键按下时返回 KEY_NONE = 0 */
0008e2  f7fffffe          BL       bsp_GetKey
;;;433    		if (ucKeyCode != KEY_NONE)
0008e6  b108              CBZ      r0,|L1.2284|
;;;434    		{
;;;435    			/* 有键按下 */
;;;436    			switch (ucKeyCode)
0008e8  2816              CMP      r0,#0x16
0008ea  d002              BEQ      |L1.2290|
                  |L1.2284|
0008ec  2f00              CMP      r7,#0                 ;339
0008ee  f43faf39          BEQ      |L1.1892|
                  |L1.2290|
;;;437    			{
;;;438    				case  JOY_DOWN_OK:		/* 摇杆OK键 */
;;;439    					fQuit = 1;
;;;440    					break;
;;;441    
;;;442    				default:
;;;443    					break;
;;;444    			}
;;;445    		}
;;;446    	}
;;;447    	
;;;448    	bsp_StopTimer(0);
0008f2  2000              MOVS     r0,#0
0008f4  f7fffffe          BL       bsp_StopTimer
;;;449    }
0008f8  b031              ADD      sp,sp,#0xc4
0008fa  e8bd8ff0          POP      {r4-r11,pc}
;;;450    
                          ENDP

0008fe  0000              DCW      0x0000
                  |L1.2304|
000900  4d505536          DCB      "MPU6050 Ok (0x%02X)",0
000904  30353020
000908  4f6b2028
00090c  30782530
000910  32582900
                  |L1.2324|
000914  424d5031          DCB      "BMP180 Ok (0x%02X)",0
000918  3830204f
00091c  6b202830
000920  78253032
000924  582900  
000927  00                DCB      0
                  |L1.2344|
000928  574d3839          DCB      "WM8978 Ok (0x%02X)",0
00092c  3738204f
000930  6b202830
000934  78253032
000938  582900  
00093b  00                DCB      0
                  |L1.2364|
00093c  42483137          DCB      "BH1750 Ok (0x%02X)",0
000940  3530204f
000944  6b202830
000948  78253032
00094c  582900  
00094f  00                DCB      0
                  |L1.2384|
                          DCD      g_tRTC
                  |L1.2388|
000954  2534642d          DCB      "%4d-%02d-%02d %02d:%02d:%02d",0
000958  25303264
00095c  2d253032
000960  64202530
000964  32643a25
000968  3032643a
00096c  25303264
000970  00      
000971  00                DCB      0
000972  00                DCB      0
000973  00                DCB      0
                  |L1.2420|
                          DCD      g_LcdWidth
                  |L1.2424|
                          DCD      g_LcdHeight
                  |L1.2428|
00097c  b7b5bbd8          DCB      183,181,187,216,0
000980  00      
000981  00                DCB      0
000982  00                DCB      0
000983  00                DCB      0

                          AREA ||i.PrintfHardInfo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  PrintfHardInfo PROC
;;;460    extern uint32_t dm9k_ReadID(void);
;;;461    void PrintfHardInfo(void)
000000  b570              PUSH     {r4-r6,lr}
;;;462    {
;;;463    	char buf[128];
;;;464    
;;;465    	/* 检测CPU ID */
;;;466    	{
;;;467    		/* 参考手册：
;;;468    			32.6.1 MCU device ID code
;;;469    			33.1 Unique device ID register (96 bits)
;;;470    		*/
;;;471    		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;
;;;472    
;;;473    		CPU_Sn0 = *(__IO uint32_t*)(0x1FFFF7E8);
000002  4878              LDR      r0,|L2.484|
000004  b0a2              SUB      sp,sp,#0x88           ;462
000006  6806              LDR      r6,[r0,#0]
;;;474    		CPU_Sn1 = *(__IO uint32_t*)(0x1FFFF7EC);
000008  1d00              ADDS     r0,r0,#4
00000a  6805              LDR      r5,[r0,#0]
;;;475    		CPU_Sn2 = *(__IO uint32_t*)(0x1FFFF7F0);
00000c  1d00              ADDS     r0,r0,#4
00000e  6804              LDR      r4,[r0,#0]
;;;476    
;;;477    		printf("\r\nCPU : STM32F103ZET6, LQFP144\r\n");
000010  a075              ADR      r0,|L2.488|
000012  f7fffffe          BL       __2printf
;;;478    		sprintf(buf, " UID = %08X %08X %08X"
000016  462b              MOV      r3,r5
000018  4622              MOV      r2,r4
00001a  a17c              ADR      r1,|L2.524|
00001c  a801              ADD      r0,sp,#4
00001e  9600              STR      r6,[sp,#0]
000020  f7fffffe          BL       __2sprintf
;;;479    			, CPU_Sn2, CPU_Sn1, CPU_Sn0);
;;;480    		printf("%s\r\n", buf);
000024  a901              ADD      r1,sp,#4
000026  a07f              ADR      r0,|L2.548|
000028  f7fffffe          BL       __2printf
;;;481    		
;;;482    	}
;;;483    	
;;;484    	/* 显示TFT控制器型号和屏幕分辨率 */
;;;485    	{
;;;486    		strcpy(buf, "TFT Driver : ");
00002c  a17f              ADR      r1,|L2.556|
00002e  a801              ADD      r0,sp,#4
000030  f7fffffe          BL       strcpy
;;;487    		LCD_GetChipDescribe(&buf[strlen(buf)]);	/* 读取TFT驱动芯片型号 */
000034  a801              ADD      r0,sp,#4
000036  f7fffffe          BL       strlen
00003a  ae01              ADD      r6,sp,#4
00003c  4430              ADD      r0,r0,r6
00003e  f7fffffe          BL       LCD_GetChipDescribe
;;;488    		sprintf(&buf[strlen(buf)], "   %d x %d", LCD_GetWidth(), LCD_GetHeight());
000042  f7fffffe          BL       LCD_GetHeight
000046  4605              MOV      r5,r0
000048  f7fffffe          BL       LCD_GetWidth
00004c  4604              MOV      r4,r0
00004e  a801              ADD      r0,sp,#4
000050  f7fffffe          BL       strlen
000054  4430              ADD      r0,r0,r6
000056  462b              MOV      r3,r5
000058  4622              MOV      r2,r4
00005a  a178              ADR      r1,|L2.572|
00005c  f7fffffe          BL       __2sprintf
;;;489    		printf("%s\r\n", buf);
000060  a901              ADD      r1,sp,#4
000062  a070              ADR      r0,|L2.548|
000064  f7fffffe          BL       __2printf
;;;490    	}
;;;491    
;;;492    	/* 测试SRAM */
;;;493    	#if 1
;;;494    	{
;;;495    		if (bsp_TestExtSRAM() == 0)
000068  f7fffffe          BL       bsp_TestExtSRAM
00006c  b178              CBZ      r0,|L2.142|
;;;496    		{
;;;497    			sprintf(buf, "SRAM Model : EM681FV16BU, Test OK");
;;;498    			printf("%s\r\n", buf);
;;;499    		}
;;;500    		else
;;;501    		{
;;;502    			sprintf(buf, "SRAM Model: EM681FV16BU, Test Err");
00006e  a176              ADR      r1,|L2.584|
                  |L2.112|
000070  a801              ADD      r0,sp,#4
000072  f7fffffe          BL       __2sprintf
;;;503    			printf("%s\r\n", buf);
000076  a901              ADD      r1,sp,#4
000078  a06a              ADR      r0,|L2.548|
00007a  f7fffffe          BL       __2printf
;;;504    		}
;;;505    	}
;;;506    
;;;507    
;;;508    	/* 测试NOR Flash */
;;;509    	{
;;;510    		uint32_t id;
;;;511    
;;;512    		id = NOR_ReadID();
00007e  f7fffffe          BL       NOR_ReadID
000082  4602              MOV      r2,r0
;;;513    
;;;514    		if (id == S29GL128P)
000084  4879              LDR      r0,|L2.620|
000086  4282              CMP      r2,r0
000088  d103              BNE      |L2.146|
;;;515    		{
;;;516    			sprintf(buf, "NOR Flash ID = 0x%08X, Model = S29GL128P, OK", id);
00008a  a179              ADR      r1,|L2.624|
;;;517    			printf("%s\r\n", buf);
00008c  e002              B        |L2.148|
                  |L2.142|
00008e  a184              ADR      r1,|L2.672|
000090  e7ee              B        |L2.112|
                  |L2.146|
;;;518    		}
;;;519    		else
;;;520    		{
;;;521    			sprintf(buf, "NOR Flash ID = 0x%08X, Model = xxxx, Err", id);
000092  a18c              ADR      r1,|L2.708|
                  |L2.148|
000094  a801              ADD      r0,sp,#4
000096  f7fffffe          BL       __2sprintf
;;;522    			printf("%s\r\n", buf);
00009a  a901              ADD      r1,sp,#4
00009c  a061              ADR      r0,|L2.548|
00009e  f7fffffe          BL       __2printf
;;;523    		}
;;;524    	}
;;;525    
;;;526    	/* 测试NADN Flash */
;;;527    	{
;;;528    		uint32_t id;
;;;529    
;;;530    		NAND_Init();	/* 初始化NAND */
0000a2  f7fffffe          BL       NAND_Init
;;;531    		
;;;532    		id = NAND_ReadID();
0000a6  f7fffffe          BL       NAND_ReadID
0000aa  4604              MOV      r4,r0
;;;533    
;;;534    		sprintf(buf, "NAND Flash ID = 0x%04X, Type = ", id);
0000ac  4602              MOV      r2,r0
0000ae  a190              ADR      r1,|L2.752|
0000b0  a801              ADD      r0,sp,#4
0000b2  f7fffffe          BL       __2sprintf
;;;535    		if (id == HY27UF081G2A)
0000b6  4896              LDR      r0,|L2.784|
0000b8  4284              CMP      r4,r0
0000ba  d102              BNE      |L2.194|
;;;536    		{
;;;537    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = HY27UF081G2A, OK", id);
0000bc  4622              MOV      r2,r4
0000be  a195              ADR      r1,|L2.788|
;;;538    			printf("%s\r\n", buf);
0000c0  e00c              B        |L2.220|
                  |L2.194|
;;;539    		}
;;;540    		else if (id == H27U1G8F2BTR)
0000c2  48a1              LDR      r0,|L2.840|
0000c4  4284              CMP      r4,r0
0000c6  d102              BNE      |L2.206|
;;;541    		{
;;;542    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = H27U1G8F2BTR, OK", id);
0000c8  4622              MOV      r2,r4
0000ca  a1a0              ADR      r1,|L2.844|
;;;543    			printf("%s\r\n", buf);
0000cc  e006              B        |L2.220|
                  |L2.206|
;;;544    		}		
;;;545    		else if (id == H27U4G8F2DTR)
0000ce  48ac              LDR      r0,|L2.896|
;;;546    		{
;;;547    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = H27U4G8F2DTR, OK", id);
;;;548    			printf("%s\r\n", buf);
;;;549    		}
;;;550    		else
;;;551    		{
;;;552    			sprintf(buf, "NAND Flash ID = 0x%04X, Model = Unknow, Err", id);
0000d0  4622              MOV      r2,r4
0000d2  4284              CMP      r4,r0                 ;545
0000d4  d101              BNE      |L2.218|
0000d6  a1ab              ADR      r1,|L2.900|
0000d8  e000              B        |L2.220|
                  |L2.218|
0000da  a1b7              ADR      r1,|L2.952|
                  |L2.220|
0000dc  a801              ADD      r0,sp,#4              ;547
0000de  f7fffffe          BL       __2sprintf
0000e2  a901              ADD      r1,sp,#4              ;548
0000e4  a04f              ADR      r0,|L2.548|
0000e6  f7fffffe          BL       __2printf
;;;553    			printf("%s\r\n", buf);
;;;554    		}
;;;555    	}
;;;556    	#endif
;;;557    	/* 测试I2C设备 */
;;;558    	{
;;;559    		if (i2c_CheckDevice(EE_DEV_ADDR) == 0)
0000ea  20a0              MOVS     r0,#0xa0
0000ec  f7fffffe          BL       i2c_CheckDevice
0000f0  2800              CMP      r0,#0
;;;560    		{
;;;561    			sprintf(buf, "AT24C128 Ok (0x%02X)", EE_DEV_ADDR);
;;;562    			printf("%s\r\n", buf);
;;;563    		}
;;;564    		else
;;;565    		{
;;;566    			sprintf(buf, "AT24C128 Err (0x%02X)", EE_DEV_ADDR);
0000f2  f04f02a0          MOV      r2,#0xa0
0000f6  d064              BEQ      |L2.450|
0000f8  a1ba              ADR      r1,|L2.996|
                  |L2.250|
0000fa  a801              ADD      r0,sp,#4
0000fc  f7fffffe          BL       __2sprintf
;;;567    			printf("%s\r\n", buf);
000100  a901              ADD      r1,sp,#4
000102  a048              ADR      r0,|L2.548|
000104  f7fffffe          BL       __2printf
;;;568    		}
;;;569    
;;;570    		if (i2c_CheckDevice(I2C_ADDR_SI4730_W) == 0)
000108  2022              MOVS     r0,#0x22
00010a  f7fffffe          BL       i2c_CheckDevice
00010e  2800              CMP      r0,#0
;;;571    		{
;;;572    			sprintf(buf, "Si4704 Ok (0x%02X)", I2C_ADDR_SI4730_W);
;;;573    			printf("%s\r\n", buf);
;;;574    		}
;;;575    		else
;;;576    		{
;;;577    			sprintf(buf, "Si4704 Err (0x%02X)", I2C_ADDR_SI4730_W);
000110  f04f0222          MOV      r2,#0x22
000114  d057              BEQ      |L2.454|
000116  a1b9              ADR      r1,|L2.1020|
                  |L2.280|
000118  a801              ADD      r0,sp,#4
00011a  f7fffffe          BL       __2sprintf
;;;578    			printf("%s\r\n", buf);
00011e  a901              ADD      r1,sp,#4
000120  a040              ADR      r0,|L2.548|
000122  f7fffffe          BL       __2printf
;;;579    		}
;;;580    #if 0
;;;581    		if (i2c_CheckDevice(HMC5883L_SLAVE_ADDRESS) == 0)
;;;582    		{
;;;583    			sprintf(buf, "HMC5883L Ok (0x%02X)", HMC5883L_SLAVE_ADDRESS);
;;;584    			printf("%s\r\n", buf);
;;;585    		}
;;;586    		else
;;;587    		{
;;;588    			sprintf(buf, "HMC5883L Err (0x%02X)", HMC5883L_SLAVE_ADDRESS);
;;;589    			printf("%s\r\n", buf);
;;;590    		}
;;;591    #endif
;;;592    		if (i2c_CheckDevice(MPU6050_SLAVE_ADDRESS) == 0)
000126  20d0              MOVS     r0,#0xd0
000128  f7fffffe          BL       i2c_CheckDevice
00012c  2800              CMP      r0,#0
;;;593    		{
;;;594    			sprintf(buf, "MPU6050 Ok (0x%02X)", MPU6050_SLAVE_ADDRESS);
;;;595    			printf("%s\r\n", buf);
;;;596    		}
;;;597    		else
;;;598    		{
;;;599    			sprintf(buf, "MPU6050 Err (0x%02X)", MPU6050_SLAVE_ADDRESS);
00012e  f04f02d0          MOV      r2,#0xd0
000132  d04a              BEQ      |L2.458|
000134  a1b6              ADR      r1,|L2.1040|
                  |L2.310|
000136  a801              ADD      r0,sp,#4
000138  f7fffffe          BL       __2sprintf
;;;600    			printf("%s\r\n", buf);
00013c  a901              ADD      r1,sp,#4
00013e  a039              ADR      r0,|L2.548|
000140  f7fffffe          BL       __2printf
;;;601    		}
;;;602    
;;;603    		if (i2c_CheckDevice(BMP180_SLAVE_ADDRESS) == 0)
000144  20ee              MOVS     r0,#0xee
000146  f7fffffe          BL       i2c_CheckDevice
00014a  2800              CMP      r0,#0
;;;604    		{
;;;605    			sprintf(buf, "BMP180 Ok (0x%02X)", BMP180_SLAVE_ADDRESS);
;;;606    			printf("%s\r\n", buf);
;;;607    		}
;;;608    		else
;;;609    		{
;;;610    			sprintf(buf, "BMP180 Err (0x%02X)", BMP180_SLAVE_ADDRESS);
00014c  f04f02ee          MOV      r2,#0xee
000150  d03d              BEQ      |L2.462|
000152  a1b5              ADR      r1,|L2.1064|
                  |L2.340|
000154  a801              ADD      r0,sp,#4
000156  f7fffffe          BL       __2sprintf
;;;611    			printf("%s\r\n", buf);
00015a  a901              ADD      r1,sp,#4
00015c  a031              ADR      r0,|L2.548|
00015e  f7fffffe          BL       __2printf
;;;612    		}
;;;613    
;;;614    		if (i2c_CheckDevice(WM8978_SLAVE_ADDRESS) == 0)
000162  2034              MOVS     r0,#0x34
000164  f7fffffe          BL       i2c_CheckDevice
000168  2800              CMP      r0,#0
;;;615    		{
;;;616    			sprintf(buf, "WM8978 Ok (0x%02X)", WM8978_SLAVE_ADDRESS);
;;;617    			printf("%s\r\n", buf);
;;;618    		}
;;;619    		else
;;;620    		{
;;;621    			sprintf(buf, "WM8978 Err (0x%02X)", WM8978_SLAVE_ADDRESS);
00016a  f04f0234          MOV      r2,#0x34
00016e  d030              BEQ      |L2.466|
000170  a1b2              ADR      r1,|L2.1084|
                  |L2.370|
000172  a801              ADD      r0,sp,#4
000174  f7fffffe          BL       __2sprintf
;;;622    			printf("%s\r\n", buf);
000178  a901              ADD      r1,sp,#4
00017a  a02a              ADR      r0,|L2.548|
00017c  f7fffffe          BL       __2printf
;;;623    		}
;;;624    
;;;625    		if (i2c_CheckDevice(BH1750_SLAVE_ADDRESS) == 0)
000180  2046              MOVS     r0,#0x46
000182  f7fffffe          BL       i2c_CheckDevice
000186  2800              CMP      r0,#0
;;;626    		{
;;;627    			sprintf(buf, "BH1750 Ok (0x%02X)", BH1750_SLAVE_ADDRESS);
;;;628    			printf("%s\r\n", buf);
;;;629    		}
;;;630    		else
;;;631    		{
;;;632    			sprintf(buf, "BH1750 Err (0x%02X)", BH1750_SLAVE_ADDRESS);
000188  f04f0246          MOV      r2,#0x46
00018c  d023              BEQ      |L2.470|
00018e  a1b0              ADR      r1,|L2.1104|
                  |L2.400|
000190  a801              ADD      r0,sp,#4
000192  f7fffffe          BL       __2sprintf
;;;633    			printf("%s\r\n", buf);
000196  a901              ADD      r1,sp,#4
000198  a022              ADR      r0,|L2.548|
00019a  f7fffffe          BL       __2printf
;;;634    		}
;;;635    	}
;;;636    
;;;637    	/* 测试SPI Flash */
;;;638    	{
;;;639    		//bsp_InitSFlash();	/* 初始化SPI硬件 */
;;;640    
;;;641    		/* 检测串行Flash OK */
;;;642    		sprintf(buf, "SPI Flash ID= = %08X, Model = %s",g_tSF.ChipID , g_tSF.ChipName);
00019e  4bb1              LDR      r3,|L2.1124|
0001a0  a1b1              ADR      r1,|L2.1128|
0001a2  a801              ADD      r0,sp,#4
0001a4  cb04              LDM      r3!,{r2}  ; g_tSF
0001a6  f7fffffe          BL       __2sprintf
;;;643    		printf("%s\r\n", buf);
0001aa  a901              ADD      r1,sp,#4
0001ac  a01d              ADR      r0,|L2.548|
0001ae  f7fffffe          BL       __2printf
;;;644    	}
;;;645    	
;;;646    	/* 检测DM9000 */
;;;647    	{
;;;648    		uint32_t id;
;;;649    		
;;;650    		id = dm9k_ReadID();
0001b2  f7fffffe          BL       dm9k_ReadID
0001b6  4601              MOV      r1,r0
;;;651    		
;;;652    		if (id == 0x0A469000)
0001b8  48b4              LDR      r0,|L2.1164|
0001ba  4281              CMP      r1,r0
0001bc  d10d              BNE      |L2.474|
;;;653    		{
;;;654    			printf("DM9000AEP OK,  ID = %8X\r\n", id);
0001be  a0b4              ADR      r0,|L2.1168|
0001c0  e00c              B        |L2.476|
                  |L2.450|
0001c2  a1ba              ADR      r1,|L2.1196|
0001c4  e799              B        |L2.250|
                  |L2.454|
0001c6  a1bf              ADR      r1,|L2.1220|
0001c8  e7a6              B        |L2.280|
                  |L2.458|
0001ca  a1c3              ADR      r1,|L2.1240|
0001cc  e7b3              B        |L2.310|
                  |L2.462|
0001ce  a1c7              ADR      r1,|L2.1260|
0001d0  e7c0              B        |L2.340|
                  |L2.466|
0001d2  a1cb              ADR      r1,|L2.1280|
0001d4  e7cd              B        |L2.370|
                  |L2.470|
0001d6  a1cf              ADR      r1,|L2.1300|
0001d8  e7da              B        |L2.400|
                  |L2.474|
;;;655    		}
;;;656    		else
;;;657    		{
;;;658    			printf("DM9000AEP Error, ID = %8X\r\n", id);
0001da  a0d3              ADR      r0,|L2.1320|
                  |L2.476|
0001dc  f7fffffe          BL       __2printf
;;;659    		}
;;;660    	}
;;;661    }
0001e0  b022              ADD      sp,sp,#0x88
0001e2  bd70              POP      {r4-r6,pc}
;;;662    
                          ENDP

                  |L2.484|
                          DCD      0x1ffff7e8
                  |L2.488|
0001e8  0d0a4350          DCB      "\r\nCPU : STM32F103ZET6, LQFP144\r\n",0
0001ec  55203a20
0001f0  53544d33
0001f4  32463130
0001f8  335a4554
0001fc  362c204c
000200  51465031
000204  34340d0a
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0
                  |L2.524|
00020c  20554944          DCB      " UID = %08X %08X %08X",0
000210  203d2025
000214  30385820
000218  25303858
00021c  20253038
000220  5800    
000222  00                DCB      0
000223  00                DCB      0
                  |L2.548|
000224  25730d0a          DCB      "%s\r\n",0
000228  00      
000229  00                DCB      0
00022a  00                DCB      0
00022b  00                DCB      0
                  |L2.556|
00022c  54465420          DCB      "TFT Driver : ",0
000230  44726976
000234  6572203a
000238  2000    
00023a  00                DCB      0
00023b  00                DCB      0
                  |L2.572|
00023c  20202025          DCB      "   %d x %d",0
000240  64207820
000244  256400  
000247  00                DCB      0
                  |L2.584|
000248  5352414d          DCB      "SRAM Model: EM681FV16BU, Test Err",0
00024c  204d6f64
000250  656c3a20
000254  454d3638
000258  31465631
00025c  3642552c
000260  20546573
000264  74204572
000268  7200    
00026a  00                DCB      0
00026b  00                DCB      0
                  |L2.620|
                          DCD      0x017e2101
                  |L2.624|
000270  4e4f5220          DCB      "NOR Flash ID = 0x%08X, Model = S29GL128P, OK",0
000274  466c6173
000278  68204944
00027c  203d2030
000280  78253038
000284  582c204d
000288  6f64656c
00028c  203d2053
000290  3239474c
000294  31323850
000298  2c204f4b
00029c  00      
00029d  00                DCB      0
00029e  00                DCB      0
00029f  00                DCB      0
                  |L2.672|
0002a0  5352414d          DCB      "SRAM Model : EM681FV16BU, Test OK",0
0002a4  204d6f64
0002a8  656c203a
0002ac  20454d36
0002b0  38314656
0002b4  31364255
0002b8  2c205465
0002bc  7374204f
0002c0  4b00    
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L2.708|
0002c4  4e4f5220          DCB      "NOR Flash ID = 0x%08X, Model = xxxx, Err",0
0002c8  466c6173
0002cc  68204944
0002d0  203d2030
0002d4  78253038
0002d8  582c204d
0002dc  6f64656c
0002e0  203d2078
0002e4  7878782c
0002e8  20457272
0002ec  00      
0002ed  00                DCB      0
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L2.752|
0002f0  4e414e44          DCB      "NAND Flash ID = 0x%04X, Type = ",0
0002f4  20466c61
0002f8  73682049
0002fc  44203d20
000300  30782530
000304  34582c20
000308  54797065
00030c  203d2000
                  |L2.784|
                          DCD      0xadf1801d
                  |L2.788|
000314  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = HY27UF081G2A, OK",0
000318  20466c61
00031c  73682049
000320  44203d20
000324  30782530
000328  34582c20
00032c  4d6f6465
000330  6c203d20
000334  48593237
000338  55463038
00033c  31473241
000340  2c204f4b
000344  00      
000345  00                DCB      0
000346  00                DCB      0
000347  00                DCB      0
                  |L2.840|
                          DCD      0xadf1001d
                  |L2.844|
00034c  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = H27U1G8F2BTR, OK",0
000350  20466c61
000354  73682049
000358  44203d20
00035c  30782530
000360  34582c20
000364  4d6f6465
000368  6c203d20
00036c  48323755
000370  31473846
000374  32425452
000378  2c204f4b
00037c  00      
00037d  00                DCB      0
00037e  00                DCB      0
00037f  00                DCB      0
                  |L2.896|
                          DCD      0xaddc9095
                  |L2.900|
000384  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = H27U4G8F2DTR, OK",0
000388  20466c61
00038c  73682049
000390  44203d20
000394  30782530
000398  34582c20
00039c  4d6f6465
0003a0  6c203d20
0003a4  48323755
0003a8  34473846
0003ac  32445452
0003b0  2c204f4b
0003b4  00      
0003b5  00                DCB      0
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L2.952|
0003b8  4e414e44          DCB      "NAND Flash ID = 0x%04X, Model = Unknow, Err",0
0003bc  20466c61
0003c0  73682049
0003c4  44203d20
0003c8  30782530
0003cc  34582c20
0003d0  4d6f6465
0003d4  6c203d20
0003d8  556e6b6e
0003dc  6f772c20
0003e0  45727200
                  |L2.996|
0003e4  41543234          DCB      "AT24C128 Err (0x%02X)",0
0003e8  43313238
0003ec  20457272
0003f0  20283078
0003f4  25303258
0003f8  2900    
0003fa  00                DCB      0
0003fb  00                DCB      0
                  |L2.1020|
0003fc  53693437          DCB      "Si4704 Err (0x%02X)",0
000400  30342045
000404  72722028
000408  30782530
00040c  32582900
                  |L2.1040|
000410  4d505536          DCB      "MPU6050 Err (0x%02X)",0
000414  30353020
000418  45727220
00041c  28307825
000420  30325829
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L2.1064|
000428  424d5031          DCB      "BMP180 Err (0x%02X)",0
00042c  38302045
000430  72722028
000434  30782530
000438  32582900
                  |L2.1084|
00043c  574d3839          DCB      "WM8978 Err (0x%02X)",0
000440  37382045
000444  72722028
000448  30782530
00044c  32582900
                  |L2.1104|
000450  42483137          DCB      "BH1750 Err (0x%02X)",0
000454  35302045
000458  72722028
00045c  30782530
000460  32582900
                  |L2.1124|
                          DCD      g_tSF
                  |L2.1128|
000468  53504920          DCB      "SPI Flash ID= = %08X, Model = %s",0
00046c  466c6173
000470  68204944
000474  3d203d20
000478  25303858
00047c  2c204d6f
000480  64656c20
000484  3d202573
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L2.1164|
                          DCD      0x0a469000
                  |L2.1168|
000490  444d3930          DCB      "DM9000AEP OK,  ID = %8X\r\n",0
000494  30304145
000498  50204f4b
00049c  2c202049
0004a0  44203d20
0004a4  2538580d
0004a8  0a00    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L2.1196|
0004ac  41543234          DCB      "AT24C128 Ok (0x%02X)",0
0004b0  43313238
0004b4  204f6b20
0004b8  28307825
0004bc  30325829
0004c0  00      
0004c1  00                DCB      0
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L2.1220|
0004c4  53693437          DCB      "Si4704 Ok (0x%02X)",0
0004c8  3034204f
0004cc  6b202830
0004d0  78253032
0004d4  582900  
0004d7  00                DCB      0
                  |L2.1240|
0004d8  4d505536          DCB      "MPU6050 Ok (0x%02X)",0
0004dc  30353020
0004e0  4f6b2028
0004e4  30782530
0004e8  32582900
                  |L2.1260|
0004ec  424d5031          DCB      "BMP180 Ok (0x%02X)",0
0004f0  3830204f
0004f4  6b202830
0004f8  78253032
0004fc  582900  
0004ff  00                DCB      0
                  |L2.1280|
000500  574d3839          DCB      "WM8978 Ok (0x%02X)",0
000504  3738204f
000508  6b202830
00050c  78253032
000510  582900  
000513  00                DCB      0
                  |L2.1300|
000514  42483137          DCB      "BH1750 Ok (0x%02X)",0
000518  3530204f
00051c  6b202830
000520  78253032
000524  582900  
000527  00                DCB      0
                  |L2.1320|
000528  444d3930          DCB      "DM9000AEP Error, ID = %8X\r\n",0
00052c  30304145
000530  50204572
000534  726f722c
000538  20494420
00053c  3d202538
000540  580d0a00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\hard_test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_hard_test_c_HardInfo____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_hard_test_c_HardInfo____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_hard_test_c_HardInfo____REVSH|
#line 128
|__asm___11_hard_test_c_HardInfo____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
