; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\memory.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\memory.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\memory.crf ..\..\User\usb_mass\memory.c]
                          THUMB

                          AREA ||i.Read_Memory||, CODE, READONLY, ALIGN=2

                  Read_Memory PROC
;;;54     */
;;;55     void Read_Memory(uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
;;;57     	static uint32_t Offset, Length;	/* 静态变量 */
;;;58     	
;;;59     	if (TransferState == TXFR_IDLE )	/* 传输第一帧时，保存偏移量 */
000002  4c2a              LDR      r4,|L1.172|
000004  4606              MOV      r6,r0                 ;56
;;;60     	{
;;;61     		Offset = Memory_Offset * Mass_Block_Size[lun];
000006  4d2a              LDR      r5,|L1.176|
000008  7820              LDRB     r0,[r4,#0]            ;59  ; TransferState
00000a  b110              CBZ      r0,|L1.18|
;;;62     		Length = Transfer_Length * Mass_Block_Size[lun];
;;;63     		TransferState = TXFR_ONGOING;
;;;64     	}
;;;65     
;;;66     	if (TransferState == TXFR_ONGOING )
00000c  2801              CMP      r0,#1
00000e  d008              BEQ      |L1.34|
000010  e02a              B        |L1.104|
                  |L1.18|
000012  f8550026          LDR      r0,[r5,r6,LSL #2]     ;61
000016  4341              MULS     r1,r0,r1              ;61
000018  4350              MULS     r0,r2,r0              ;62
00001a  e9c41003          STRD     r1,r0,[r4,#0xc]       ;62
00001e  2001              MOVS     r0,#1                 ;63
000020  7020              STRB     r0,[r4,#0]            ;63
                  |L1.34|
;;;67     	{
;;;68     		if (!Block_Read_count)
000022  6860              LDR      r0,[r4,#4]  ; Block_Read_count
000024  b370              CBZ      r0,|L1.132|
;;;69     		{
;;;70     			MAL_Read(lun, Offset, Data_Buffer, Mass_Block_Size[lun]);
;;;71     			
;;;72     			USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);
;;;73     			
;;;74     			Block_Read_count = Mass_Block_Size[lun] - BULK_MAX_PACKET_SIZE;
;;;75     			Block_offset = BULK_MAX_PACKET_SIZE;
;;;76     		}
;;;77     		else
;;;78     		{
;;;79     			USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
000026  4823              LDR      r0,|L1.180|
000028  69e1              LDR      r1,[r4,#0x1c]  ; Block_offset
00002a  2240              MOVS     r2,#0x40
00002c  4401              ADD      r1,r1,r0
00002e  2081              MOVS     r0,#0x81
000030  f7fffffe          BL       USB_SIL_Write
;;;80     			
;;;81     			Block_Read_count -= BULK_MAX_PACKET_SIZE;
000034  6860              LDR      r0,[r4,#4]  ; Block_Read_count
000036  3840              SUBS     r0,r0,#0x40
000038  6060              STR      r0,[r4,#4]  ; Block_Read_count
;;;82     			Block_offset += BULK_MAX_PACKET_SIZE;
00003a  69e0              LDR      r0,[r4,#0x1c]  ; Block_offset
00003c  3040              ADDS     r0,r0,#0x40
                  |L1.62|
00003e  61e0              STR      r0,[r4,#0x1c]  ; Block_offset
;;;83     		}
;;;84     
;;;85     	    SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
000040  2140              MOVS     r1,#0x40
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       SetEPTxCount
;;;86     	    SetEPTxStatus(ENDP1, EP_TX_VALID);
000048  2130              MOVS     r1,#0x30
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       SetEPTxStatus
;;;87     
;;;88     	    Offset += BULK_MAX_PACKET_SIZE;
000050  68e0              LDR      r0,[r4,#0xc]  ; Offset
000052  3040              ADDS     r0,r0,#0x40
;;;89     	    Length -= BULK_MAX_PACKET_SIZE;
000054  60e0              STR      r0,[r4,#0xc]  ; Offset
000056  6920              LDR      r0,[r4,#0x10]  ; Length
000058  3840              SUBS     r0,r0,#0x40
;;;90     	
;;;91     	    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
00005a  6120              STR      r0,[r4,#0x10]  ; Length
00005c  4816              LDR      r0,|L1.184|
00005e  6881              LDR      r1,[r0,#8]  ; CSW
000060  3940              SUBS     r1,r1,#0x40
;;;92     	    Led_RW_ON();
000062  6081              STR      r1,[r0,#8]  ; CSW
000064  f7fffffe          BL       Led_RW_ON
                  |L1.104|
;;;93     	}
;;;94       
;;;95     	if (Length == 0)	/* 传输完毕 */
000068  6920              LDR      r0,[r4,#0x10]  ; Length
00006a  2800              CMP      r0,#0
00006c  d11d              BNE      |L1.170|
;;;96     	{
;;;97     		Block_Read_count = 0;
00006e  6060              STR      r0,[r4,#4]  ; Block_Read_count
;;;98     		Block_offset = 0;
000070  61e0              STR      r0,[r4,#0x1c]  ; Block_offset
;;;99     		Offset = 0;
;;;100    		Bot_State = BOT_DATA_IN_LAST;
000072  4a12              LDR      r2,|L1.188|
000074  2103              MOVS     r1,#3
000076  60e0              STR      r0,[r4,#0xc]  ; Offset
000078  7011              STRB     r1,[r2,#0]
;;;101    		TransferState = TXFR_IDLE;
00007a  7020              STRB     r0,[r4,#0]
;;;102    		Led_RW_OFF();
00007c  e8bd4070          POP      {r4-r6,lr}
000080  f7ffbffe          B.W      Led_RW_OFF
                  |L1.132|
000084  f8350026          LDRH     r0,[r5,r6,LSL #2]     ;70
000088  4a0a              LDR      r2,|L1.180|
00008a  b283              UXTH     r3,r0                 ;70
00008c  4630              MOV      r0,r6                 ;70
00008e  68e1              LDR      r1,[r4,#0xc]          ;70  ; Offset
000090  f7fffffe          BL       MAL_Read
000094  2240              MOVS     r2,#0x40              ;72
000096  4907              LDR      r1,|L1.180|
000098  2081              MOVS     r0,#0x81              ;72
00009a  f7fffffe          BL       USB_SIL_Write
00009e  f8550026          LDR      r0,[r5,r6,LSL #2]     ;74
0000a2  3840              SUBS     r0,r0,#0x40           ;74
0000a4  6060              STR      r0,[r4,#4]            ;74  ; Block_Read_count
0000a6  2040              MOVS     r0,#0x40              ;75
0000a8  e7c9              B        |L1.62|
                  |L1.170|
;;;103    	}
;;;104    }
0000aa  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP

                  |L1.172|
                          DCD      ||.data||
                  |L1.176|
                          DCD      Mass_Block_Size
                  |L1.180|
                          DCD      ||.bss||
                  |L1.184|
                          DCD      ||CSW||
                  |L1.188|
                          DCD      Bot_State

                          AREA ||i.Write_Memory||, CODE, READONLY, ALIGN=2

                  Write_Memory PROC
;;;115    */
;;;116    void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;117    {
;;;118    
;;;119    	static uint32_t W_Offset, W_Length;
;;;120    	
;;;121    	uint32_t temp =  Counter + 64;
000004  4c2d              LDR      r4,|L2.188|
000006  68a3              LDR      r3,[r4,#8]  ; Counter
;;;122    	
;;;123    	if (TransferState == TXFR_IDLE )		/* 传输第一帧时，保存偏移量 */
000008  7826              LDRB     r6,[r4,#0]  ; TransferState
;;;124    	{
;;;125    		W_Offset = Memory_Offset * Mass_Block_Size[lun];
00000a  f8dfc0b4          LDR      r12,|L2.192|
00000e  2500              MOVS     r5,#0
000010  3340              ADDS     r3,r3,#0x40
000012  b116              CBZ      r6,|L2.26|
;;;126    		W_Length = Transfer_Length * Mass_Block_Size[lun];
;;;127    		TransferState = TXFR_ONGOING;
;;;128    	}
;;;129    	
;;;130    	if (TransferState == TXFR_ONGOING )
000014  2e01              CMP      r6,#1
000016  d008              BEQ      |L2.42|
000018  e03e              B        |L2.152|
                  |L2.26|
00001a  f85c6020          LDR      r6,[r12,r0,LSL #2]    ;125
00001e  4371              MULS     r1,r6,r1              ;125
000020  4356              MULS     r6,r2,r6              ;126
000022  e9c41605          STRD     r1,r6,[r4,#0x14]      ;126
000026  2101              MOVS     r1,#1                 ;127
000028  7021              STRB     r1,[r4,#0]            ;127
                  |L2.42|
;;;131    	{
;;;132    		for (Idx = 0 ; Counter < temp; Counter++)
00002a  4621              MOV      r1,r4
;;;133    		{
;;;134    			*((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
00002c  462a              MOV      r2,r5
00002e  f8df9094          LDR      r9,|L2.196|
000032  f8dfa094          LDR      r10,|L2.200|
000036  6225              STR      r5,[r4,#0x20]         ;132  ; Idx
000038  e009              B        |L2.78|
00003a  bf00              NOP      
                  |L2.60|
00003c  f8198002          LDRB     r8,[r9,r2]
000040  688f              LDR      r7,[r1,#8]  ; Counter
000042  f80a8007          STRB     r8,[r10,r7]
000046  688e              LDR      r6,[r1,#8]            ;132  ; Counter
000048  1c76              ADDS     r6,r6,#1              ;132
00004a  608e              STR      r6,[r1,#8]            ;132  ; Counter
00004c  1c52              ADDS     r2,r2,#1              ;132
                  |L2.78|
00004e  688e              LDR      r6,[r1,#8]            ;132  ; Counter
000050  429e              CMP      r6,r3                 ;132
000052  d3f3              BCC      |L2.60|
;;;135    		}
;;;136    		
;;;137    		W_Offset += Data_Len;
000054  4e1d              LDR      r6,|L2.204|
000056  620a              STR      r2,[r1,#0x20]  ; Idx
000058  694b              LDR      r3,[r1,#0x14]  ; W_Offset
00005a  8832              LDRH     r2,[r6,#0]  ; Data_Len
00005c  189f              ADDS     r7,r3,r2
;;;138    		W_Length -= Data_Len;
00005e  614f              STR      r7,[r1,#0x14]  ; W_Offset
000060  698b              LDR      r3,[r1,#0x18]  ; W_Length
000062  1a9b              SUBS     r3,r3,r2
;;;139    		
;;;140    		if (!(W_Length % Mass_Block_Size[lun]))
000064  618b              STR      r3,[r1,#0x18]  ; W_Length
000066  f85c2020          LDR      r2,[r12,r0,LSL #2]
00006a  fbb3fcf2          UDIV     r12,r3,r2
00006e  fb02331c          MLS      r3,r2,r12,r3
000072  b92b              CBNZ     r3,|L2.128|
;;;141    		{
;;;142    			Counter = 0;
000074  608d              STR      r5,[r1,#8]  ; Counter
;;;143    			MAL_Write(lun,W_Offset - Mass_Block_Size[lun], Data_Buffer, Mass_Block_Size[lun]);
000076  b293              UXTH     r3,r2
000078  1ab9              SUBS     r1,r7,r2
00007a  4a13              LDR      r2,|L2.200|
00007c  f7fffffe          BL       MAL_Write
                  |L2.128|
;;;144    		}
;;;145    		
;;;146    		CSW.dDataResidue -= Data_Len;
000080  4813              LDR      r0,|L2.208|
000082  8832              LDRH     r2,[r6,#0]  ; Data_Len
000084  6881              LDR      r1,[r0,#8]  ; CSW
000086  1a89              SUBS     r1,r1,r2
;;;147    		SetEPRxStatus(ENDP2, EP_RX_VALID); /* 使能下次传输 */   
000088  6081              STR      r1,[r0,#8]  ; CSW
00008a  f44f5140          MOV      r1,#0x3000
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       SetEPRxStatus
;;;148    		
;;;149    		Led_RW_ON();
000094  f7fffffe          BL       Led_RW_ON
                  |L2.152|
;;;150    	}
;;;151    	
;;;152    	if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))		/* 传输结束 */
000098  69a0              LDR      r0,[r4,#0x18]  ; W_Length
00009a  b118              CBZ      r0,|L2.164|
00009c  480d              LDR      r0,|L2.212|
00009e  7800              LDRB     r0,[r0,#0]  ; Bot_State
0000a0  2804              CMP      r0,#4
0000a2  d109              BNE      |L2.184|
                  |L2.164|
;;;153    	{
;;;154    		Counter = 0;
0000a4  60a5              STR      r5,[r4,#8]  ; Counter
;;;155    		Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  2000              MOVS     r0,#0
0000aa  f7fffffe          BL       Set_CSW
;;;156    		TransferState = TXFR_IDLE;
0000ae  7025              STRB     r5,[r4,#0]
;;;157    		
;;;158    		Led_RW_OFF();
0000b0  e8bd47f0          POP      {r4-r10,lr}
0000b4  f7ffbffe          B.W      Led_RW_OFF
                  |L2.184|
;;;159    	}
;;;160    }
0000b8  e8bd87f0          POP      {r4-r10,pc}
;;;161    
                          ENDP

                  |L2.188|
                          DCD      ||.data||
                  |L2.192|
                          DCD      Mass_Block_Size
                  |L2.196|
                          DCD      Bulk_Data_Buff
                  |L2.200|
                          DCD      ||.bss||
                  |L2.204|
                          DCD      Data_Len
                  |L2.208|
                          DCD      ||CSW||
                  |L2.212|
                          DCD      Bot_State

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Data_Buffer
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  TransferState
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  Block_Read_count
                          DCD      0x00000000
                  Counter
                          DCD      0x00000000
                  Offset
                          DCD      0x00000000
                  Length
                          DCD      0x00000000
                  W_Offset
                          DCD      0x00000000
                  W_Length
                          DCD      0x00000000
                  Block_offset
                          DCD      0x00000000
                  Idx
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\usb_mass\\memory.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_memory_c_efd64b70____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_memory_c_efd64b70____REVSH|
#line 128
|__asm___8_memory_c_efd64b70____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
