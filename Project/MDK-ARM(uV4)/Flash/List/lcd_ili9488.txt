; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\lcd_ili9488.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\lcd_ili9488.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\lcd_ili9488.crf ..\..\User\bsp\src\LCD_ILI9488.c]
                          THUMB

                          AREA ||i.ILI9488_ClrScr||, CODE, READONLY, ALIGN=2

                  ILI9488_ClrScr PROC
;;;398    */
;;;399    void ILI9488_ClrScr(uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
;;;401    	uint32_t i;
;;;402    	uint32_t n;
;;;403    
;;;404    	ILI9488_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000002  4d11              LDR      r5,|L1.72|
000004  4e11              LDR      r6,|L1.76|
000006  4604              MOV      r4,r0                 ;400
000008  2100              MOVS     r1,#0
00000a  882b              LDRH     r3,[r5,#0]  ; g_LcdWidth
00000c  8832              LDRH     r2,[r6,#0]  ; g_LcdHeight
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       ILI9488_SetDispWin
;;;405    
;;;406    	ILI9488_REG = 0x2C; 			/* 准备读写显存 */
000014  f04f41d8          MOV      r1,#0x6c000000
000018  202c              MOVS     r0,#0x2c
00001a  8008              STRH     r0,[r1,#0]
;;;407    
;;;408    #if 1		/* 优化代码执行速度 */
;;;409    	n = (g_LcdHeight * g_LcdWidth) / 8;
00001c  8830              LDRH     r0,[r6,#0]  ; g_LcdHeight
00001e  882a              LDRH     r2,[r5,#0]  ; g_LcdWidth
000020  4350              MULS     r0,r2,r0
000022  17c2              ASRS     r2,r0,#31
000024  eb007052          ADD      r0,r0,r2,LSR #29
000028  10c2              ASRS     r2,r0,#3
;;;410    	for (i = 0; i < n; i++)
00002a  2000              MOVS     r0,#0
00002c  e008              B        |L1.64|
                  |L1.46|
;;;411    	{
;;;412    		ILI9488_RAM = _usColor;
00002e  804c              STRH     r4,[r1,#2]
;;;413    		ILI9488_RAM = _usColor;
000030  804c              STRH     r4,[r1,#2]
;;;414    		ILI9488_RAM = _usColor;
000032  804c              STRH     r4,[r1,#2]
;;;415    		ILI9488_RAM = _usColor;
000034  804c              STRH     r4,[r1,#2]
;;;416    
;;;417    		ILI9488_RAM = _usColor;
000036  804c              STRH     r4,[r1,#2]
;;;418    		ILI9488_RAM = _usColor;
000038  804c              STRH     r4,[r1,#2]
;;;419    		ILI9488_RAM = _usColor;
00003a  804c              STRH     r4,[r1,#2]
;;;420    		ILI9488_RAM = _usColor;
00003c  804c              STRH     r4,[r1,#2]
00003e  1c40              ADDS     r0,r0,#1
                  |L1.64|
000040  4290              CMP      r0,r2                 ;410
000042  d3f4              BCC      |L1.46|
;;;421    	}
;;;422    #else
;;;423    	n = g_LcdHeight * g_LcdWidth;
;;;424    	for (i = 0; i < n; i++)
;;;425    	{
;;;426    		ILI9488_RAM = _usColor;
;;;427    	}
;;;428    #endif
;;;429    
;;;430    }
000044  bd70              POP      {r4-r6,pc}
;;;431    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      g_LcdWidth
                  |L1.76|
                          DCD      g_LcdHeight

                          AREA ||i.ILI9488_DispOff||, CODE, READONLY, ALIGN=1

                  ILI9488_DispOff PROC
;;;385    */
;;;386    void ILI9488_DispOff(void)
000000  4770              BX       lr
;;;387    {
;;;388    	;
;;;389    }
;;;390    
                          ENDP


                          AREA ||i.ILI9488_DispOn||, CODE, READONLY, ALIGN=1

                  ILI9488_DispOn PROC
;;;372    */
;;;373    void ILI9488_DispOn(void)
000000  4770              BX       lr
;;;374    {
;;;375    	;
;;;376    }
;;;377    
                          ENDP


                          AREA ||i.ILI9488_DrawBMP||, CODE, READONLY, ALIGN=2

                  ILI9488_DrawBMP PROC
;;;770    */
;;;771    void ILI9488_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;772    {
000004  461f              MOV      r7,r3
000006  4616              MOV      r6,r2
000008  4688              MOV      r8,r1
00000a  4681              MOV      r9,r0
;;;773    	uint32_t index = 0;
00000c  2500              MOVS     r5,#0
;;;774    	const uint16_t *p;
;;;775    
;;;776    	/* 设置图片的位置和大小， 即设置显示窗口 */
;;;777    	ILI9488_SetDispWin(_usX, _usY, _usHeight, _usWidth);
00000e  9c08              LDR      r4,[sp,#0x20]
000010  f7fffffe          BL       ILI9488_SetDispWin
;;;778    
;;;779    	p = _ptr;
;;;780    	for (index = 0; index < _usHeight * _usWidth; index++)
000014  437e              MULS     r6,r7,r6
000016  e006              B        |L4.38|
                  |L4.24|
;;;781    	{
;;;782    		ILI9488_PutPixel(_usX, _usY, *p++);
000018  f8342b02          LDRH     r2,[r4],#2
00001c  4641              MOV      r1,r8
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       ILI9488_PutPixel
000024  1c6d              ADDS     r5,r5,#1
                  |L4.38|
000026  42ae              CMP      r6,r5                 ;780
000028  d8f6              BHI      |L4.24|
00002a  4805              LDR      r0,|L4.64|
00002c  2100              MOVS     r1,#0                 ;780
00002e  8803              LDRH     r3,[r0,#0]            ;780  ; g_LcdWidth
000030  4804              LDR      r0,|L4.68|
000032  8802              LDRH     r2,[r0,#0]            ;780  ; g_LcdHeight
000034  e8bd47f0          POP      {r4-r10,lr}           ;780
000038  4608              MOV      r0,r1                 ;780
00003a  f7ffbffe          B.W      ILI9488_SetDispWin
;;;783    	}
;;;784    
;;;785    	/* 退出窗口绘图模式 */
;;;786    	ILI9488_QuitWinMode();
;;;787    }
;;;788    
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      g_LcdWidth
                  |L4.68|
                          DCD      g_LcdHeight

                          AREA ||i.ILI9488_DrawCircle||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawCircle PROC
;;;724    */
;;;725    void ILI9488_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;726    {
000004  4680              MOV      r8,r0
;;;727    	int32_t  D;			/* Decision Variable */
;;;728    	uint32_t  CurX;		/* 当前 X 值 */
;;;729    	uint32_t  CurY;		/* 当前 Y 值 */
;;;730    
;;;731    	D = 3 - (_usRadius << 1);
000006  2003              MOVS     r0,#3
000008  460f              MOV      r7,r1                 ;726
00000a  eba00642          SUB      r6,r0,r2,LSL #1
;;;732    	CurX = 0;
00000e  2500              MOVS     r5,#0
;;;733    	CurY = _usRadius;
000010  4614              MOV      r4,r2
000012  e053              B        |L5.188|
                  |L5.20|
;;;734    
;;;735    	while (CurX <= CurY)
;;;736    	{
;;;737    		ILI9488_PutPixel(_usX + CurX, _usY + CurY, _usColor);
000014  eb070b04          ADD      r11,r7,r4
000018  eb080905          ADD      r9,r8,r5
00001c  fa1ff18b          UXTH     r1,r11
000020  fa1ff089          UXTH     r0,r9
000024  9a03              LDR      r2,[sp,#0xc]
000026  f7fffffe          BL       ILI9488_PutPixel
;;;738    		ILI9488_PutPixel(_usX + CurX, _usY - CurY, _usColor);
00002a  eba70a04          SUB      r10,r7,r4
00002e  fa1ff18a          UXTH     r1,r10
000032  fa1ff089          UXTH     r0,r9
000036  9a03              LDR      r2,[sp,#0xc]
000038  f7fffffe          BL       ILI9488_PutPixel
;;;739    		ILI9488_PutPixel(_usX - CurX, _usY + CurY, _usColor);
00003c  eba80905          SUB      r9,r8,r5
000040  fa1ff18b          UXTH     r1,r11
000044  fa1ff089          UXTH     r0,r9
000048  9a03              LDR      r2,[sp,#0xc]
00004a  f7fffffe          BL       ILI9488_PutPixel
;;;740    		ILI9488_PutPixel(_usX - CurX, _usY - CurY, _usColor);
00004e  fa1ff18a          UXTH     r1,r10
000052  fa1ff089          UXTH     r0,r9
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       ILI9488_PutPixel
;;;741    		ILI9488_PutPixel(_usX + CurY, _usY + CurX, _usColor);
00005c  eb070b05          ADD      r11,r7,r5
000060  eb080904          ADD      r9,r8,r4
000064  fa1ff18b          UXTH     r1,r11
000068  fa1ff089          UXTH     r0,r9
00006c  9a03              LDR      r2,[sp,#0xc]
00006e  f7fffffe          BL       ILI9488_PutPixel
;;;742    		ILI9488_PutPixel(_usX + CurY, _usY - CurX, _usColor);
000072  eba70a05          SUB      r10,r7,r5
000076  fa1ff18a          UXTH     r1,r10
00007a  fa1ff089          UXTH     r0,r9
00007e  9a03              LDR      r2,[sp,#0xc]
000080  f7fffffe          BL       ILI9488_PutPixel
;;;743    		ILI9488_PutPixel(_usX - CurY, _usY + CurX, _usColor);
000084  eba80904          SUB      r9,r8,r4
000088  fa1ff18b          UXTH     r1,r11
00008c  fa1ff089          UXTH     r0,r9
000090  9a03              LDR      r2,[sp,#0xc]
000092  f7fffffe          BL       ILI9488_PutPixel
;;;744    		ILI9488_PutPixel(_usX - CurY, _usY - CurX, _usColor);
000096  fa1ff18a          UXTH     r1,r10
00009a  fa1ff089          UXTH     r0,r9
00009e  9a03              LDR      r2,[sp,#0xc]
0000a0  f7fffffe          BL       ILI9488_PutPixel
;;;745    
;;;746    		if (D < 0)
0000a4  2e00              CMP      r6,#0
0000a6  da03              BGE      |L5.176|
;;;747    		{
;;;748    			D += (CurX << 2) + 6;
0000a8  eb060685          ADD      r6,r6,r5,LSL #2
0000ac  1db6              ADDS     r6,r6,#6
0000ae  e004              B        |L5.186|
                  |L5.176|
;;;749    		}
;;;750    		else
;;;751    		{
;;;752    			D += ((CurX - CurY) << 2) + 10;
0000b0  1b28              SUBS     r0,r5,r4
0000b2  eb060680          ADD      r6,r6,r0,LSL #2
0000b6  1e64              SUBS     r4,r4,#1
0000b8  360a              ADDS     r6,r6,#0xa
                  |L5.186|
0000ba  1c6d              ADDS     r5,r5,#1
                  |L5.188|
0000bc  42a5              CMP      r5,r4                 ;735
0000be  d9a9              BLS      |L5.20|
;;;753    			CurY--;
;;;754    		}
;;;755    		CurX++;
;;;756    	}
;;;757    }
0000c0  e8bd9fff          POP      {r0-r12,pc}
;;;758    
                          ENDP


                          AREA ||i.ILI9488_DrawHColorLine||, CODE, READONLY, ALIGN=2

                  ILI9488_DrawHColorLine PROC
;;;601    */
;;;602    void ILI9488_DrawHColorLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  b570              PUSH     {r4-r6,lr}
;;;603    {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
;;;604    	uint16_t i;
;;;605    
;;;606    	ILI9488_SetCursor(_usX1, _usY1);
000006  f7fffffe          BL       ILI9488_SetCursor
;;;607    
;;;608    	/* 写显存 */
;;;609    	ILI9488_REG = 0x2C;
00000a  f04f41d8          MOV      r1,#0x6c000000
00000e  202c              MOVS     r0,#0x2c
000010  8008              STRH     r0,[r1,#0]
;;;610    	for (i = 0; i < _usWidth; i++)
000012  2000              MOVS     r0,#0
000014  e005              B        |L6.34|
;;;611    	{
;;;612    		ILI9488_RAM = *_pColor++;
000016  bf00              NOP      
                  |L6.24|
000018  f8342b02          LDRH     r2,[r4],#2
00001c  804a              STRH     r2,[r1,#2]
00001e  1c40              ADDS     r0,r0,#1
000020  b280              UXTH     r0,r0                 ;610
                  |L6.34|
000022  42a8              CMP      r0,r5                 ;610
000024  d3f8              BCC      |L6.24|
;;;613    	}
;;;614    }
000026  bd70              POP      {r4-r6,pc}
;;;615    
                          ENDP


                          AREA ||i.ILI9488_DrawHLine||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawHLine PROC
;;;575    */
;;;576    void ILI9488_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;577    {
;;;578    	uint16_t i;
;;;579    
;;;580    	ILI9488_SetDispWin(_usX1, _usY1, 1, _usX2 - _usX1 + 1);
000002  1a14              SUBS     r4,r2,r0
000004  461d              MOV      r5,r3                 ;577
000006  1c64              ADDS     r4,r4,#1
000008  b2a3              UXTH     r3,r4
00000a  2201              MOVS     r2,#1
00000c  f7fffffe          BL       ILI9488_SetDispWin
;;;581    
;;;582    	ILI9488_REG = 0x2C;
000010  f04f41d8          MOV      r1,#0x6c000000
000014  202c              MOVS     r0,#0x2c
000016  8008              STRH     r0,[r1,#0]
;;;583    
;;;584    	/* 写显存 */
;;;585    	for (i = 0; i <_usX2-_usX1 + 1; i++)
000018  2000              MOVS     r0,#0
00001a  e002              B        |L7.34|
                  |L7.28|
;;;586    	{
;;;587    		ILI9488_RAM = _usColor;
00001c  804d              STRH     r5,[r1,#2]
00001e  1c40              ADDS     r0,r0,#1
000020  b280              UXTH     r0,r0                 ;585
                  |L7.34|
000022  4284              CMP      r4,r0                 ;585
000024  dcfa              BGT      |L7.28|
;;;588    	}
;;;589    }
000026  bd70              POP      {r4-r6,pc}
;;;590    
                          ENDP


                          AREA ||i.ILI9488_DrawHTransLine||, CODE, READONLY, ALIGN=2

                  ILI9488_DrawHTransLine PROC
;;;626    */
;;;627    void ILI9488_DrawHTransLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;628    {
000004  461f              MOV      r7,r3
000006  4690              MOV      r8,r2
000008  4683              MOV      r11,r0
;;;629    	uint16_t i, j;
;;;630    	uint16_t Index;
;;;631    
;;;632    	ILI9488_SetCursor(_usX1, _usY1);
00000a  9901              LDR      r1,[sp,#4]
00000c  f7fffffe          BL       ILI9488_SetCursor
;;;633    
;;;634    	/* 写显存 */
;;;635    	ILI9488_REG = 0x2C;
000010  f04f41d8          MOV      r1,#0x6c000000
000014  202c              MOVS     r0,#0x2c
000016  8008              STRH     r0,[r1,#0]
;;;636    	for (i = 0,j = 0; i < _usWidth; i++, j++)
000018  2400              MOVS     r4,#0
00001a  4625              MOV      r5,r4
00001c  4682              MOV      r10,r0                ;635
00001e  4689              MOV      r9,r1                 ;635
000020  e013              B        |L8.74|
;;;637    	{
;;;638    		Index = *_pColor++;
000022  bf00              NOP      
                  |L8.36|
000024  f8376b02          LDRH     r6,[r7],#2
;;;639    	    if (Index)
000028  b10e              CBZ      r6,|L8.46|
;;;640            {
;;;641    			 ILI9488_RAM = Index;
00002a  4648              MOV      r0,r9
00002c  e008              B        |L8.64|
                  |L8.46|
;;;642    		}
;;;643    		else
;;;644    		{
;;;645    			ILI9488_SetCursor(_usX1 + j, _usY1);
00002e  eb0b0005          ADD      r0,r11,r5
000032  b280              UXTH     r0,r0
000034  9901              LDR      r1,[sp,#4]
000036  f7fffffe          BL       ILI9488_SetCursor
;;;646    			ILI9488_REG = 0x2C;
00003a  4648              MOV      r0,r9
00003c  f8a9a000          STRH     r10,[r9,#0]
                  |L8.64|
;;;647    			ILI9488_RAM = Index;
000040  8046              STRH     r6,[r0,#2]
000042  1c64              ADDS     r4,r4,#1
000044  1c6d              ADDS     r5,r5,#1              ;636
000046  b2a4              UXTH     r4,r4                 ;636
000048  b2ad              UXTH     r5,r5                 ;636
                  |L8.74|
00004a  4544              CMP      r4,r8                 ;636
00004c  d3ea              BCC      |L8.36|
;;;648    		}
;;;649    	}
;;;650    }
00004e  e8bd9fff          POP      {r0-r12,pc}
;;;651    
                          ENDP


                          AREA ||i.ILI9488_DrawLine||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawLine PROC
;;;486    */
;;;487    void ILI9488_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;488    {
000004  4616              MOV      r6,r2
000006  461f              MOV      r7,r3
000008  460d              MOV      r5,r1
00000a  4604              MOV      r4,r0
;;;489    	int32_t dx , dy ;
;;;490    	int32_t tx , ty ;
;;;491    	int32_t inc1 , inc2 ;
;;;492    	int32_t d , iTag ;
;;;493    	int32_t x , y ;
;;;494    
;;;495    	/* 采用 Bresenham 算法，在2点间画一条直线 */
;;;496    
;;;497    	ILI9488_PutPixel(_usX1 , _usY1 , _usColor);
00000c  9a0a              LDR      r2,[sp,#0x28]
00000e  f7fffffe          BL       ILI9488_PutPixel
;;;498    
;;;499    	/* 如果两点重合，结束后面的动作。*/
;;;500    	if ( _usX1 == _usX2 && _usY1 == _usY2 )
000012  42b4              CMP      r4,r6
000014  d101              BNE      |L9.26|
000016  42bd              CMP      r5,r7
000018  d041              BEQ      |L9.158|
                  |L9.26|
;;;501    	{
;;;502    		return;
;;;503    	}
;;;504    
;;;505    	iTag = 0 ;
00001a  f04f0800          MOV      r8,#0
;;;506    	/* dx = abs ( _usX2 - _usX1 ); */
;;;507    	if (_usX2 >= _usX1)
00001e  42a6              CMP      r6,r4
000020  d301              BCC      |L9.38|
;;;508    	{
;;;509    		dx = _usX2 - _usX1;
000022  1b31              SUBS     r1,r6,r4
000024  e000              B        |L9.40|
                  |L9.38|
;;;510    	}
;;;511    	else
;;;512    	{
;;;513    		dx = _usX1 - _usX2;
000026  1ba1              SUBS     r1,r4,r6
                  |L9.40|
;;;514    	}
;;;515    
;;;516    	/* dy = abs ( _usY2 - _usY1 ); */
;;;517    	if (_usY2 >= _usY1)
000028  42af              CMP      r7,r5
00002a  d301              BCC      |L9.48|
;;;518    	{
;;;519    		dy = _usY2 - _usY1;
00002c  1b78              SUBS     r0,r7,r5
00002e  e000              B        |L9.50|
                  |L9.48|
;;;520    	}
;;;521    	else
;;;522    	{
;;;523    		dy = _usY1 - _usY2;
000030  1be8              SUBS     r0,r5,r7
                  |L9.50|
;;;524    	}
;;;525    
;;;526    	if ( dx < dy )   /*如果dy为计长方向，则交换纵横坐标。*/
000032  4281              CMP      r1,r0
000034  da0a              BGE      |L9.76|
;;;527    	{
;;;528    		uint16_t temp;
;;;529    
;;;530    		iTag = 1 ;
;;;531    		temp = _usX1; _usX1 = _usY1; _usY1 = temp;
000036  4622              MOV      r2,r4
000038  462c              MOV      r4,r5
00003a  4615              MOV      r5,r2
;;;532    		temp = _usX2; _usX2 = _usY2; _usY2 = temp;
00003c  4632              MOV      r2,r6
00003e  463e              MOV      r6,r7
000040  4617              MOV      r7,r2
;;;533    		temp = dx; dx = dy; dy = temp;
000042  b28a              UXTH     r2,r1
000044  4601              MOV      r1,r0
000046  f04f0801          MOV      r8,#1                 ;530
00004a  4610              MOV      r0,r2
                  |L9.76|
;;;534    	}
;;;535    	tx = _usX2 > _usX1 ? 1 : -1 ;    /* 确定是增1还是减1 */
00004c  f04f32ff          MOV      r2,#0xffffffff
000050  42a6              CMP      r6,r4
000052  d901              BLS      |L9.88|
000054  2301              MOVS     r3,#1
000056  e000              B        |L9.90|
                  |L9.88|
000058  4613              MOV      r3,r2
                  |L9.90|
00005a  469a              MOV      r10,r3
;;;536    	ty = _usY2 > _usY1 ? 1 : -1 ;
00005c  42af              CMP      r7,r5
00005e  d900              BLS      |L9.98|
000060  2201              MOVS     r2,#1
                  |L9.98|
;;;537    	x = _usX1 ;
;;;538    	y = _usY1 ;
;;;539    	inc1 = 2 * dy ;
000062  ea4f0940          LSL      r9,r0,#1
;;;540    	inc2 = 2 * ( dy - dx );
000066  1a40              SUBS     r0,r0,r1
000068  0040              LSLS     r0,r0,#1
00006a  4693              MOV      r11,r2                ;536
;;;541    	d = inc1 - dx ;
00006c  eba90701          SUB      r7,r9,r1
;;;542    	while ( x != _usX2 )     /* 循环画点 */
000070  9000              STR      r0,[sp,#0]
000072  e012              B        |L9.154|
                  |L9.116|
;;;543    	{
;;;544    		if ( d < 0 )
000074  2f00              CMP      r7,#0
000076  da01              BGE      |L9.124|
;;;545    		{
;;;546    			d += inc1 ;
000078  444f              ADD      r7,r7,r9
00007a  e002              B        |L9.130|
                  |L9.124|
;;;547    		}
;;;548    		else
;;;549    		{
;;;550    			y += ty ;
;;;551    			d += inc2 ;
00007c  9800              LDR      r0,[sp,#0]
00007e  445d              ADD      r5,r5,r11             ;550
000080  4407              ADD      r7,r7,r0
                  |L9.130|
;;;552    		}
;;;553    		if ( iTag )
000082  f1b80f00          CMP      r8,#0
000086  d002              BEQ      |L9.142|
;;;554    		{
;;;555    			ILI9488_PutPixel ( y , x , _usColor) ;
000088  b2a1              UXTH     r1,r4
00008a  b2a8              UXTH     r0,r5
00008c  e001              B        |L9.146|
                  |L9.142|
;;;556    		}
;;;557    		else
;;;558    		{
;;;559    			ILI9488_PutPixel ( x , y , _usColor) ;
00008e  b2a9              UXTH     r1,r5
000090  b2a0              UXTH     r0,r4
                  |L9.146|
000092  9a0a              LDR      r2,[sp,#0x28]
000094  f7fffffe          BL       ILI9488_PutPixel
;;;560    		}
;;;561    		x += tx ;
000098  4454              ADD      r4,r4,r10
                  |L9.154|
00009a  42b4              CMP      r4,r6                 ;542
00009c  d1ea              BNE      |L9.116|
                  |L9.158|
;;;562    	}
;;;563    }
00009e  e8bd8ff8          POP      {r3-r11,pc}
;;;564    
                          ENDP


                          AREA ||i.ILI9488_DrawRect||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawRect PROC
;;;662    */
;;;663    void ILI9488_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;664    {
;;;665    	/*
;;;666    	 ---------------->---
;;;667    	|(_usX，_usY)        |
;;;668    	V                    V  _usHeight
;;;669    	|                    |
;;;670    	 ---------------->---
;;;671    		  _usWidth
;;;672    	*/
;;;673    
;;;674    	ILI9488_DrawLine(_usX, _usY, _usX + _usWidth - 1, _usY, _usColor);	/* 顶 */
000004  18c5              ADDS     r5,r0,r3
000006  4614              MOV      r4,r2                 ;664
000008  9e08              LDR      r6,[sp,#0x20]
00000a  1e6d              SUBS     r5,r5,#1
00000c  4688              MOV      r8,r1                 ;664
00000e  4607              MOV      r7,r0                 ;664
000010  b2aa              UXTH     r2,r5
000012  460b              MOV      r3,r1
000014  9600              STR      r6,[sp,#0]
000016  f7fffffe          BL       ILI9488_DrawLine
;;;675    	ILI9488_DrawLine(_usX, _usY + _usHeight - 1, _usX + _usWidth - 1, _usY + _usHeight - 1, _usColor);	/* 底 */
00001a  eb080904          ADD      r9,r8,r4
00001e  f1a90401          SUB      r4,r9,#1
000022  b2a3              UXTH     r3,r4
000024  b2aa              UXTH     r2,r5
000026  b2a1              UXTH     r1,r4
000028  4638              MOV      r0,r7
00002a  9600              STR      r6,[sp,#0]
00002c  f7fffffe          BL       ILI9488_DrawLine
;;;676    
;;;677    	ILI9488_DrawLine(_usX, _usY, _usX, _usY + _usHeight - 1, _usColor);	/* 左 */
000030  463a              MOV      r2,r7
000032  b2a3              UXTH     r3,r4
000034  4641              MOV      r1,r8
000036  4610              MOV      r0,r2
000038  9600              STR      r6,[sp,#0]
00003a  f7fffffe          BL       ILI9488_DrawLine
;;;678    	ILI9488_DrawLine(_usX + _usWidth - 1, _usY, _usX + _usWidth - 1, _usY + _usHeight, _usColor);	/* 右 */
00003e  fa1ff389          UXTH     r3,r9
000042  b2aa              UXTH     r2,r5
000044  b2a8              UXTH     r0,r5
000046  4641              MOV      r1,r8
000048  9600              STR      r6,[sp,#0]
00004a  f7fffffe          BL       ILI9488_DrawLine
;;;679    }
00004e  e8bd83f8          POP      {r3-r9,pc}
;;;680    
                          ENDP


                          AREA ||i.ILI9488_FillRect||, CODE, READONLY, ALIGN=1

                  ILI9488_FillRect PROC
;;;691    */
;;;692    void ILI9488_FillRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;693    {
000002  461d              MOV      r5,r3
000004  4614              MOV      r4,r2
;;;694    	uint32_t i;
;;;695    
;;;696    	/*
;;;697    	 ---------------->---
;;;698    	|(_usX，_usY)        |
;;;699    	V                    V  _usHeight
;;;700    	|                    |
;;;701    	 ---------------->---
;;;702    		  _usWidth
;;;703    	*/
;;;704    
;;;705    	ILI9488_SetDispWin(_usX, _usY, _usHeight, _usWidth);
000006  9e04              LDR      r6,[sp,#0x10]
000008  f7fffffe          BL       ILI9488_SetDispWin
;;;706    
;;;707    	ILI9488_REG = 0x2C;
00000c  f04f41d8          MOV      r1,#0x6c000000
000010  202c              MOVS     r0,#0x2c
000012  8008              STRH     r0,[r1,#0]
;;;708    	for (i = 0; i < _usHeight * _usWidth; i++)
000014  2000              MOVS     r0,#0
000016  436c              MULS     r4,r5,r4
000018  e001              B        |L11.30|
                  |L11.26|
;;;709    	{
;;;710    		ILI9488_RAM = _usColor;
00001a  804e              STRH     r6,[r1,#2]
00001c  1c40              ADDS     r0,r0,#1
                  |L11.30|
00001e  4284              CMP      r4,r0                 ;708
000020  d8fb              BHI      |L11.26|
;;;711    	}
;;;712    }
000022  bd70              POP      {r4-r6,pc}
;;;713    
                          ENDP


                          AREA ||i.ILI9488_GetPixel||, CODE, READONLY, ALIGN=1

                  ILI9488_GetPixel PROC
;;;460    */
;;;461    uint16_t ILI9488_GetPixel(uint16_t _usX, uint16_t _usY)
000000  b510              PUSH     {r4,lr}
;;;462    {
;;;463    	uint16_t R = 0, G = 0, B = 0 ;
;;;464    
;;;465    	ILI9488_SetCursor(_usX, _usY);	/* 设置光标位置 */
000002  f7fffffe          BL       ILI9488_SetCursor
;;;466    
;;;467    	ILI9488_REG = 0x2E;
000006  f04f40d8          MOV      r0,#0x6c000000
00000a  212e              MOVS     r1,#0x2e
00000c  8001              STRH     r1,[r0,#0]
;;;468    	R = ILI9488_RAM; 	/* 第1个哑读，丢弃 */
00000e  8841              LDRH     r1,[r0,#2]
;;;469    	R = ILI9488_RAM;
000010  8842              LDRH     r2,[r0,#2]
;;;470    	B = ILI9488_RAM;
000012  8841              LDRH     r1,[r0,#2]
;;;471    	G = ILI9488_RAM;
000014  8840              LDRH     r0,[r0,#2]
;;;472    
;;;473        return (((R >> 11) << 11) | ((G >> 10 ) << 5) | (B >> 11));
000016  f36f020a          BFC      r2,#0,#11
00001a  0a80              LSRS     r0,r0,#10
00001c  ea421040          ORR      r0,r2,r0,LSL #5
000020  ea4020d1          ORR      r0,r0,r1,LSR #11
;;;474    }
000024  bd10              POP      {r4,pc}
;;;475    
                          ENDP


                          AREA ||i.ILI9488_InitHard||, CODE, READONLY, ALIGN=2

                  ILI9488_InitHard PROC
;;;42     */
;;;43     void ILI9488_InitHard(void)
000000  b510              PUSH     {r4,lr}
;;;44     {
;;;45     	uint32_t id;
;;;46     
;;;47     	id = ILI9488_ReadID();
000002  f7fffffe          BL       ILI9488_ReadID
;;;48     
;;;49     	if (id == 0x548066)
000006  f5a001a9          SUB      r1,r0,#0x548000
00000a  3966              SUBS     r1,r1,#0x66
00000c  d125              BNE      |L13.90|
;;;50     	{
;;;51     		Init_9488();	/* 初始化5420和4001屏硬件 */
00000e  f7fffffe          BL       Init_9488
;;;52     
;;;53     		//ILI9488_WriteCmd(0x23);
;;;54     		//ILI9488_WriteCmd(0x22);
;;;55     
;;;56     		s_RGBChgEn = 0;
000012  4912              LDR      r1,|L13.92|
000014  2000              MOVS     r0,#0
000016  7008              STRB     r0,[r1,#0]
;;;57     
;;;58     		ILI9488_PutPixel(1,1, 0x12);
000018  2101              MOVS     r1,#1
00001a  2212              MOVS     r2,#0x12
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       ILI9488_PutPixel
;;;59     		g_ChipID = ILI9488_GetPixel(1,1);
000022  2101              MOVS     r1,#1
000024  4608              MOV      r0,r1
000026  f7fffffe          BL       ILI9488_GetPixel
00002a  4c0d              LDR      r4,|L13.96|
;;;60     
;;;61     		ILI9488_PutPixel(1,1, 0x34);
00002c  2101              MOVS     r1,#1
00002e  2234              MOVS     r2,#0x34
000030  8020              STRH     r0,[r4,#0]            ;59
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       ILI9488_PutPixel
;;;62     		g_ChipID = ILI9488_GetPixel(1,1);
000038  2101              MOVS     r1,#1
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       ILI9488_GetPixel
000040  8020              STRH     r0,[r4,#0]
;;;63     
;;;64     		ILI9488_PutPixel(1,1, 0x56);
000042  2101              MOVS     r1,#1
000044  2256              MOVS     r2,#0x56
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       ILI9488_PutPixel
;;;65     		g_ChipID = ILI9488_GetPixel(1,1);
00004c  2101              MOVS     r1,#1
00004e  4608              MOV      r0,r1
000050  f7fffffe          BL       ILI9488_GetPixel
;;;66     
;;;67     		g_ChipID = IC_9488;
000054  f2494088          MOV      r0,#0x9488
000058  8020              STRH     r0,[r4,#0]
                  |L13.90|
;;;68     	}
;;;69     }
00005a  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L13.92|
                          DCD      ||.data||
                  |L13.96|
                          DCD      g_ChipID

                          AREA ||i.ILI9488_PutPixel||, CODE, READONLY, ALIGN=1

                  ILI9488_PutPixel PROC
;;;441    */
;;;442    void ILI9488_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b510              PUSH     {r4,lr}
;;;443    {
000002  4614              MOV      r4,r2
;;;444    	ILI9488_SetCursor(_usX, _usY);	/* 设置光标位置 */
000004  f7fffffe          BL       ILI9488_SetCursor
;;;445    
;;;446    	/* 写显存 */
;;;447    	ILI9488_REG = 0x2C;
000008  f04f40d8          MOV      r0,#0x6c000000
00000c  212c              MOVS     r1,#0x2c
00000e  8001              STRH     r1,[r0,#0]
;;;448    	ILI9488_RAM = _usColor;
000010  8044              STRH     r4,[r0,#2]
;;;449    }
000012  bd10              POP      {r4,pc}
;;;450    
                          ENDP


                          AREA ||i.ILI9488_ReadID||, CODE, READONLY, ALIGN=1

                  ILI9488_ReadID PROC
;;;351    */
;;;352    uint32_t ILI9488_ReadID(void)
000000  f04f40d8          MOV      r0,#0x6c000000
;;;353    {
;;;354    	uint8_t buf[4];
;;;355    
;;;356    	ILI9488_REG = 0x04;
000004  2104              MOVS     r1,#4
000006  8001              STRH     r1,[r0,#0]
;;;357    	buf[0] = ILI9488_RAM;
000008  8841              LDRH     r1,[r0,#2]
;;;358    	buf[1] = ILI9488_RAM;
00000a  8841              LDRH     r1,[r0,#2]
00000c  060a              LSLS     r2,r1,#24
;;;359    	buf[2] = ILI9488_RAM;
00000e  8841              LDRH     r1,[r0,#2]
;;;360    	buf[3] = ILI9488_RAM;
000010  8840              LDRH     r0,[r0,#2]
000012  b2c9              UXTB     r1,r1                 ;359
;;;361    
;;;362    	return (buf[1] << 16) + (buf[2] << 8) + buf[3];
000014  0a12              LSRS     r2,r2,#8
000016  b2c0              UXTB     r0,r0                 ;360
000018  eb022101          ADD      r1,r2,r1,LSL #8
00001c  4408              ADD      r0,r0,r1
;;;363    }
00001e  4770              BX       lr
;;;364    
                          ENDP


                          AREA ||i.ILI9488_SetCursor||, CODE, READONLY, ALIGN=1

                  ILI9488_SetCursor PROC
;;;315    */
;;;316    static void ILI9488_SetCursor(uint16_t _usX, uint16_t _usY)
000000  b510              PUSH     {r4,lr}
000002  f04f42d8          MOV      r2,#0x6c000000
;;;317    {
;;;318    	ILI9488_WriteCmd(0X2A); 		/* 设置X坐标 */
000006  232a              MOVS     r3,#0x2a
000008  8013              STRH     r3,[r2,#0]
;;;319    	ILI9488_WriteParam(_usX >> 8);	/* 先高8位，然后低8位 */
00000a  0a03              LSRS     r3,r0,#8
00000c  8053              STRH     r3,[r2,#2]
;;;320    	ILI9488_WriteParam(_usX);		/* 设置起始点和结束点*/
00000e  b2c4              UXTB     r4,r0
000010  8054              STRH     r4,[r2,#2]
000012  8053              STRH     r3,[r2,#2]
;;;321    	ILI9488_WriteParam(_usX >> 8);	/* 先高8位，然后低8位 */
;;;322    	ILI9488_WriteParam(_usX);		/* 设置起始点和结束点*/
000014  b2c0              UXTB     r0,r0
000016  8050              STRH     r0,[r2,#2]
;;;323    
;;;324        ILI9488_WriteCmd(0X2B); 		/* 设置Y坐标*/
000018  202b              MOVS     r0,#0x2b
00001a  8010              STRH     r0,[r2,#0]
;;;325    	ILI9488_WriteParam(_usY >> 8);
00001c  0a08              LSRS     r0,r1,#8
00001e  8050              STRH     r0,[r2,#2]
;;;326    	ILI9488_WriteParam(_usY);
000020  b2cb              UXTB     r3,r1
000022  8053              STRH     r3,[r2,#2]
000024  8050              STRH     r0,[r2,#2]
;;;327    	ILI9488_WriteParam(_usY >> 8);
;;;328    	ILI9488_WriteParam(_usY);
000026  b2c8              UXTB     r0,r1
000028  8050              STRH     r0,[r2,#2]
;;;329    }
00002a  bd10              POP      {r4,pc}
;;;330    
                          ENDP


                          AREA ||i.ILI9488_SetDirection||, CODE, READONLY, ALIGN=2

                  ILI9488_SetDirection PROC
;;;78     */
;;;79     void ILI9488_SetDirection(uint8_t _ucDir)
000000  b530              PUSH     {r4,r5,lr}
;;;80     {
;;;81     	
;;;82     	/*
;;;83     		Memory Access Control (36h)
;;;84     		This command defines read/write scanning direction of the frame memory.
;;;85     
;;;86     		These 3 bits control the direction from the MPU to memory write/read.
;;;87     
;;;88     		Bit  Symbol  Name  Description
;;;89     		D7   MY  Row Address Order
;;;90     		D6   MX  Column Address Order
;;;91     		D5   MV  Row/Column Exchange
;;;92     		D4   ML  Vertical Refresh Order  LCD vertical refresh direction control. 、
;;;93     
;;;94     		D3   BGR RGB-BGR Order   Color selector switch control
;;;95     		     (0 = RGB color filter panel, 1 = BGR color filter panel )
;;;96     		D2   MH  Horizontal Refresh ORDER  LCD horizontal refreshing direction control.
;;;97     		D1   X   Reserved  Reserved
;;;98     		D0   X   Reserved  Reserved
;;;99     	*/
;;;100    	ILI9488_WriteCmd(0x36);
000002  2236              MOVS     r2,#0x36
000004  0651              LSLS     r1,r2,#25
000006  800a              STRH     r2,[r1,#0]
;;;101    	/* 0 表示竖屏(排线在下)，1表示竖屏(排线在上), 2表示横屏(排线在左边)  3表示横屏 (排线在右边) */
;;;102    	if (_ucDir == 0)
;;;103    	{
;;;104    		ILI9488_WriteParam(0xA8);	/* 横屏(排线在左边) */
;;;105    		g_LcdHeight = 320;
000008  4b0d              LDR      r3,|L17.64|
;;;106    		g_LcdWidth = 480;
00000a  4d0e              LDR      r5,|L17.68|
00000c  f44f72a0          MOV      r2,#0x140             ;105
000010  f44f74f0          MOV      r4,#0x1e0
000014  b150              CBZ      r0,|L17.44|
;;;107    	}
;;;108    	else if (_ucDir == 1)
000016  2801              CMP      r0,#1
000018  d00a              BEQ      |L17.48|
;;;109    	{
;;;110    		ILI9488_WriteParam(0x68);	/* 横屏 (排线在右边) */
;;;111    		g_LcdHeight = 320;
;;;112    		g_LcdWidth = 480;
;;;113    	}
;;;114    	else if (_ucDir == 2)
00001a  2802              CMP      r0,#2
00001c  d00d              BEQ      |L17.58|
;;;115    	{
;;;116    		ILI9488_WriteParam(0xC8);	/* 竖屏(排线在上) */
;;;117    		g_LcdHeight = 480;
;;;118    		g_LcdWidth = 320;
;;;119    	}
;;;120    	else if (_ucDir == 3)
00001e  2803              CMP      r0,#3
000020  d103              BNE      |L17.42|
;;;121    	{
;;;122    		ILI9488_WriteParam(0x08);	/* 竖屏(排线在下) */
000022  2008              MOVS     r0,#8
                  |L17.36|
000024  8048              STRH     r0,[r1,#2]
000026  801c              STRH     r4,[r3,#0]            ;117
000028  802a              STRH     r2,[r5,#0]            ;118
                  |L17.42|
;;;123    		g_LcdHeight = 480;
;;;124    		g_LcdWidth = 320;
;;;125    	}
;;;126    }
00002a  bd30              POP      {r4,r5,pc}
                  |L17.44|
00002c  20a8              MOVS     r0,#0xa8              ;104
00002e  e000              B        |L17.50|
                  |L17.48|
000030  2068              MOVS     r0,#0x68              ;110
                  |L17.50|
000032  8048              STRH     r0,[r1,#2]            ;110
000034  801a              STRH     r2,[r3,#0]            ;105
000036  802c              STRH     r4,[r5,#0]            ;106
000038  bd30              POP      {r4,r5,pc}
                  |L17.58|
00003a  20c8              MOVS     r0,#0xc8              ;116
00003c  e7f2              B        |L17.36|
;;;127    
                          ENDP

00003e  0000              DCW      0x0000
                  |L17.64|
                          DCD      g_LcdHeight
                  |L17.68|
                          DCD      g_LcdWidth

                          AREA ||i.ILI9488_SetDispWin||, CODE, READONLY, ALIGN=1

                  ILI9488_SetDispWin PROC
;;;292    */
;;;293    static void ILI9488_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
000000  b530              PUSH     {r4,r5,lr}
000002  f04f44d8          MOV      r4,#0x6c000000
;;;294    {
;;;295    	ILI9488_WriteCmd(0X2A); 		/* 设置X坐标 */
000006  252a              MOVS     r5,#0x2a
000008  8025              STRH     r5,[r4,#0]
;;;296    	ILI9488_WriteParam(_usX >> 8);	/* 起始点 */
00000a  0a05              LSRS     r5,r0,#8
00000c  8065              STRH     r5,[r4,#2]
;;;297    	ILI9488_WriteParam(_usX);
00000e  b2c5              UXTB     r5,r0
000010  8065              STRH     r5,[r4,#2]
;;;298    	ILI9488_WriteParam((_usX + _usWidth - 1) >> 8);	/* 结束点 */
000012  4418              ADD      r0,r0,r3
000014  1e40              SUBS     r0,r0,#1
000016  f3c02307          UBFX     r3,r0,#8,#8
00001a  8063              STRH     r3,[r4,#2]
;;;299    	ILI9488_WriteParam(_usX + _usWidth - 1);
00001c  b2c0              UXTB     r0,r0
00001e  8060              STRH     r0,[r4,#2]
;;;300    
;;;301    	ILI9488_WriteCmd(0X2B); 				  /* 设置Y坐标*/
000020  202b              MOVS     r0,#0x2b
000022  8020              STRH     r0,[r4,#0]
;;;302    	ILI9488_WriteParam(_usY >> 8);   /* 起始点 */
000024  0a08              LSRS     r0,r1,#8
000026  8060              STRH     r0,[r4,#2]
;;;303    	ILI9488_WriteParam(_usY);
000028  b2c8              UXTB     r0,r1
00002a  8060              STRH     r0,[r4,#2]
;;;304    	ILI9488_WriteParam((_usY + _usHeight - 1) >>8);		/* 结束点 */
00002c  1888              ADDS     r0,r1,r2
00002e  1e40              SUBS     r0,r0,#1
000030  f3c02107          UBFX     r1,r0,#8,#8
000034  8061              STRH     r1,[r4,#2]
;;;305    	ILI9488_WriteParam((_usY + _usHeight - 1));
000036  b2c0              UXTB     r0,r0
000038  8060              STRH     r0,[r4,#2]
;;;306    }
00003a  bd30              POP      {r4,r5,pc}
;;;307    
                          ENDP


                          AREA ||i.Init_9488||, CODE, READONLY, ALIGN=2

                  Init_9488 PROC
;;;135    */
;;;136    static void Init_9488(void)
000000  b510              PUSH     {r4,lr}
000002  f04f44d8          MOV      r4,#0x6c000000
;;;137    {
;;;138    	/* 初始化LCD，写LCD寄存器进行配置 */
;;;139    
;;;140    #if 0
;;;141    	// VCI=2.8V
;;;142    	//************* Reset LCD Driver ****************//
;;;143    	LCD_nRESET = 1;
;;;144    	Delayms(1); // Delay 1ms
;;;145    	LCD_nRESET = 0;
;;;146    	Delayms(10); // Delay 10ms // This delay time is necessary
;;;147    	LCD_nRESET = 1;
;;;148    	Delayms(120); // Delay 100 ms
;;;149    #endif
;;;150    
;;;151    	//************* Start Initial Sequence **********//
;;;152    	/* Adjust Control 3 (F7h)  */
;;;153    	ILI9488_WriteCmd(0XF7);
000006  20f7              MOVS     r0,#0xf7
000008  8020              STRH     r0,[r4,#0]
;;;154    	ILI9488_WriteParam(0xA9);
00000a  20a9              MOVS     r0,#0xa9
00000c  8060              STRH     r0,[r4,#2]
;;;155    	ILI9488_WriteParam(0x51);
00000e  2051              MOVS     r0,#0x51
000010  8060              STRH     r0,[r4,#2]
;;;156    	ILI9488_WriteParam(0x2C);
000012  202c              MOVS     r0,#0x2c
000014  8060              STRH     r0,[r4,#2]
;;;157    	ILI9488_WriteParam(0x82);	/* DSI write DCS command, use loose packet RGB 666 */
000016  2082              MOVS     r0,#0x82
000018  8060              STRH     r0,[r4,#2]
;;;158    
;;;159    	/* Power Control 1 (C0h)  */
;;;160    	ILI9488_WriteCmd(0xC0);
00001a  20c0              MOVS     r0,#0xc0
00001c  8020              STRH     r0,[r4,#0]
;;;161    	ILI9488_WriteParam(0x11);
00001e  2011              MOVS     r0,#0x11
000020  8060              STRH     r0,[r4,#2]
;;;162    	ILI9488_WriteParam(0x09);
000022  2009              MOVS     r0,#9
000024  8060              STRH     r0,[r4,#2]
;;;163    
;;;164    	/* Power Control 2 (C1h) */
;;;165    	ILI9488_WriteCmd(0xC1);
000026  20c1              MOVS     r0,#0xc1
000028  8020              STRH     r0,[r4,#0]
;;;166    	ILI9488_WriteParam(0x41);
00002a  2041              MOVS     r0,#0x41
00002c  8060              STRH     r0,[r4,#2]
;;;167    
;;;168    	/* VCOM Control (C5h)  */
;;;169    	ILI9488_WriteCmd(0XC5);
00002e  20c5              MOVS     r0,#0xc5
000030  8020              STRH     r0,[r4,#0]
;;;170    	ILI9488_WriteParam(0x00);
000032  2000              MOVS     r0,#0
000034  8060              STRH     r0,[r4,#2]
;;;171    	ILI9488_WriteParam(0x0A);
000036  200a              MOVS     r0,#0xa
000038  8060              STRH     r0,[r4,#2]
;;;172    	ILI9488_WriteParam(0x80);
00003a  2080              MOVS     r0,#0x80
00003c  8060              STRH     r0,[r4,#2]
;;;173    
;;;174    	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
;;;175    	ILI9488_WriteCmd(0xB1);
00003e  20b1              MOVS     r0,#0xb1
000040  8020              STRH     r0,[r4,#0]
;;;176    	ILI9488_WriteParam(0xB0);
000042  20b0              MOVS     r0,#0xb0
000044  8060              STRH     r0,[r4,#2]
;;;177    	ILI9488_WriteParam(0x11);
000046  2011              MOVS     r0,#0x11
000048  8060              STRH     r0,[r4,#2]
;;;178    
;;;179    	/* Display Inversion Control (B4h) */
;;;180    	ILI9488_WriteCmd(0xB4);
00004a  20b4              MOVS     r0,#0xb4
00004c  8020              STRH     r0,[r4,#0]
;;;181    	ILI9488_WriteParam(0x02);
00004e  2002              MOVS     r0,#2
000050  8060              STRH     r0,[r4,#2]
;;;182    
;;;183    	/* Display Function Control (B6h)  */
;;;184    	ILI9488_WriteCmd(0xB6);
000052  20b6              MOVS     r0,#0xb6
000054  8020              STRH     r0,[r4,#0]
;;;185    	ILI9488_WriteParam(0x02);
000056  2002              MOVS     r0,#2
000058  8060              STRH     r0,[r4,#2]
;;;186    	ILI9488_WriteParam(0x22);
00005a  2022              MOVS     r0,#0x22
00005c  8060              STRH     r0,[r4,#2]
;;;187    
;;;188    	/* Entry Mode Set (B7h)  */
;;;189    	ILI9488_WriteCmd(0xB7);
00005e  20b7              MOVS     r0,#0xb7
000060  8020              STRH     r0,[r4,#0]
;;;190    	ILI9488_WriteParam(0xc6);
000062  20c6              MOVS     r0,#0xc6
000064  8060              STRH     r0,[r4,#2]
;;;191    
;;;192    	/* HS Lanes Control (BEh) */
;;;193    	ILI9488_WriteCmd(0xBE);
000066  20be              MOVS     r0,#0xbe
000068  8020              STRH     r0,[r4,#0]
;;;194    	ILI9488_WriteParam(0x00);
00006a  2000              MOVS     r0,#0
00006c  8060              STRH     r0,[r4,#2]
;;;195    	ILI9488_WriteParam(0x04);
00006e  2004              MOVS     r0,#4
000070  8060              STRH     r0,[r4,#2]
;;;196    
;;;197    	/* Set Image Function (E9h)  */
;;;198    	ILI9488_WriteCmd(0xE9);
000072  20e9              MOVS     r0,#0xe9
000074  8020              STRH     r0,[r4,#0]
;;;199    	ILI9488_WriteParam(0x00);
000076  2000              MOVS     r0,#0
000078  8060              STRH     r0,[r4,#2]
;;;200    
;;;201    	ILI9488_SetDirection(0);	/* 横屏(排线在左边) */
00007a  f7fffffe          BL       ILI9488_SetDirection
;;;202    
;;;203    	/* Interface Pixel Format (3Ah) */
;;;204    	ILI9488_WriteCmd(0x3A);
00007e  203a              MOVS     r0,#0x3a
000080  8020              STRH     r0,[r4,#0]
;;;205    	ILI9488_WriteParam(0x55);	/* 0x55 : 16 bits/pixel  */
000082  2055              MOVS     r0,#0x55
000084  8060              STRH     r0,[r4,#2]
;;;206    
;;;207    	/* PGAMCTRL (Positive Gamma Control) (E0h) */
;;;208    	ILI9488_WriteCmd(0xE0);
000086  20e0              MOVS     r0,#0xe0
000088  8020              STRH     r0,[r4,#0]
;;;209    	ILI9488_WriteParam(0x00);
00008a  2000              MOVS     r0,#0
00008c  8060              STRH     r0,[r4,#2]
;;;210    	ILI9488_WriteParam(0x07);
00008e  2007              MOVS     r0,#7
000090  8060              STRH     r0,[r4,#2]
;;;211    	ILI9488_WriteParam(0x10);
000092  2010              MOVS     r0,#0x10
000094  8060              STRH     r0,[r4,#2]
;;;212    	ILI9488_WriteParam(0x09);
000096  2009              MOVS     r0,#9
000098  8060              STRH     r0,[r4,#2]
;;;213    	ILI9488_WriteParam(0x17);
00009a  2017              MOVS     r0,#0x17
00009c  8060              STRH     r0,[r4,#2]
;;;214    	ILI9488_WriteParam(0x0B);
00009e  200b              MOVS     r0,#0xb
0000a0  8060              STRH     r0,[r4,#2]
;;;215    	ILI9488_WriteParam(0x41);
0000a2  2041              MOVS     r0,#0x41
0000a4  8060              STRH     r0,[r4,#2]
;;;216    	ILI9488_WriteParam(0x89);
0000a6  2089              MOVS     r0,#0x89
0000a8  8060              STRH     r0,[r4,#2]
;;;217    	ILI9488_WriteParam(0x4B);
0000aa  204b              MOVS     r0,#0x4b
0000ac  8060              STRH     r0,[r4,#2]
;;;218    	ILI9488_WriteParam(0x0A);
0000ae  200a              MOVS     r0,#0xa
0000b0  8060              STRH     r0,[r4,#2]
;;;219    	ILI9488_WriteParam(0x0C);
0000b2  200c              MOVS     r0,#0xc
0000b4  8060              STRH     r0,[r4,#2]
;;;220    	ILI9488_WriteParam(0x0E);
0000b6  200e              MOVS     r0,#0xe
0000b8  8060              STRH     r0,[r4,#2]
;;;221    	ILI9488_WriteParam(0x18);
0000ba  2018              MOVS     r0,#0x18
0000bc  8060              STRH     r0,[r4,#2]
;;;222    	ILI9488_WriteParam(0x1B);
0000be  201b              MOVS     r0,#0x1b
0000c0  8060              STRH     r0,[r4,#2]
;;;223    	ILI9488_WriteParam(0x0F);
0000c2  200f              MOVS     r0,#0xf
0000c4  8060              STRH     r0,[r4,#2]
;;;224    
;;;225    	/* NGAMCTRL (Negative Gamma Control) (E1h)  */
;;;226    	ILI9488_WriteCmd(0XE1);
0000c6  20e1              MOVS     r0,#0xe1
0000c8  8020              STRH     r0,[r4,#0]
;;;227    	ILI9488_WriteParam(0x00);
0000ca  2000              MOVS     r0,#0
0000cc  8060              STRH     r0,[r4,#2]
;;;228    	ILI9488_WriteParam(0x17);
0000ce  2017              MOVS     r0,#0x17
0000d0  8060              STRH     r0,[r4,#2]
;;;229    	ILI9488_WriteParam(0x1A);
0000d2  201a              MOVS     r0,#0x1a
0000d4  8060              STRH     r0,[r4,#2]
;;;230    	ILI9488_WriteParam(0x04);
0000d6  2004              MOVS     r0,#4
0000d8  8060              STRH     r0,[r4,#2]
;;;231    	ILI9488_WriteParam(0x0E);
0000da  200e              MOVS     r0,#0xe
0000dc  8060              STRH     r0,[r4,#2]
;;;232    	ILI9488_WriteParam(0x06);
0000de  2006              MOVS     r0,#6
0000e0  8060              STRH     r0,[r4,#2]
;;;233    	ILI9488_WriteParam(0x2F);
0000e2  202f              MOVS     r0,#0x2f
0000e4  8060              STRH     r0,[r4,#2]
;;;234    	ILI9488_WriteParam(0x45);
0000e6  2045              MOVS     r0,#0x45
0000e8  8060              STRH     r0,[r4,#2]
;;;235    	ILI9488_WriteParam(0x43);
0000ea  2043              MOVS     r0,#0x43
0000ec  8060              STRH     r0,[r4,#2]
;;;236    	ILI9488_WriteParam(0x02);
0000ee  2002              MOVS     r0,#2
0000f0  8060              STRH     r0,[r4,#2]
;;;237    	ILI9488_WriteParam(0x0A);
0000f2  200a              MOVS     r0,#0xa
0000f4  8060              STRH     r0,[r4,#2]
;;;238    	ILI9488_WriteParam(0x09);
0000f6  2009              MOVS     r0,#9
0000f8  8060              STRH     r0,[r4,#2]
;;;239    	ILI9488_WriteParam(0x32);
0000fa  2032              MOVS     r0,#0x32
0000fc  8060              STRH     r0,[r4,#2]
;;;240    	ILI9488_WriteParam(0x36);
0000fe  2036              MOVS     r0,#0x36
000100  8060              STRH     r0,[r4,#2]
;;;241    	ILI9488_WriteParam(0x0F);
000102  200f              MOVS     r0,#0xf
000104  8060              STRH     r0,[r4,#2]
;;;242    
;;;243    	/* Sleep Out (11h */
;;;244    	ILI9488_WriteCmd(0x11);
000106  2011              MOVS     r0,#0x11
000108  8020              STRH     r0,[r4,#0]
;;;245    	bsp_DelayMS(120);
00010a  2078              MOVS     r0,#0x78
00010c  f7fffffe          BL       bsp_DelayMS
;;;246    	ILI9488_WriteCmd(0x29);	/* Display ON (29h) */
000110  2029              MOVS     r0,#0x29
000112  8020              STRH     r0,[r4,#0]
;;;247    
;;;248    #if 1
;;;249    	/* 设置显示窗口 */
;;;250    	ILI9488_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000114  4804              LDR      r0,|L19.296|
000116  2100              MOVS     r1,#0
000118  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
00011a  4804              LDR      r0,|L19.300|
00011c  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00011e  e8bd4010          POP      {r4,lr}
000122  4608              MOV      r0,r1
000124  f7ffbffe          B.W      ILI9488_SetDispWin
;;;251    #endif
;;;252    }
;;;253    
                          ENDP

                  |L19.296|
                          DCD      g_LcdWidth
                  |L19.300|
                          DCD      g_LcdHeight

                          AREA ||.data||, DATA, ALIGN=0

                  s_RGBChgEn
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\LCD_ILI9488.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_LCD_ILI9488_c_226bfcc4____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_LCD_ILI9488_c_226bfcc4____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_LCD_ILI9488_c_226bfcc4____REVSH|
#line 128
|__asm___13_LCD_ILI9488_c_226bfcc4____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
