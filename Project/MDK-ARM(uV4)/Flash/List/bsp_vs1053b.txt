; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_vs1053b.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_vs1053b.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_vs1053b.crf ..\..\User\bsp\src\bsp_vs1053b.c]
                          THUMB

                          AREA ||i.LoadUserPatch||, CODE, READONLY, ALIGN=2

                  LoadUserPatch PROC
;;;464    
;;;465    void LoadUserPatch(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;466    {
;;;467    	int i = 0;
;;;468    
;;;469    	while (i < sizeof(plugin) / sizeof(plugin[0]))
;;;470    	{
;;;471    		unsigned short addr, n, val;
;;;472    
;;;473    		addr = plugin[i++];
000004  4e13              LDR      r6,|L1.84|
000006  2400              MOVS     r4,#0                 ;467
                  |L1.8|
000008  f8367014          LDRH     r7,[r6,r4,LSL #1]
00000c  1c64              ADDS     r4,r4,#1
;;;474    		n = plugin[i++];
00000e  f8365014          LDRH     r5,[r6,r4,LSL #1]
000012  1c64              ADDS     r4,r4,#1
;;;475    		if (n & 0x8000U)
000014  0428              LSLS     r0,r5,#16
000016  d513              BPL      |L1.64|
;;;476    		{
;;;477    			/* RLE run, replicate n samples */
;;;478    			n &= 0x7FFF;
;;;479    			val = plugin[i++];
000018  f8368014          LDRH     r8,[r6,r4,LSL #1]
00001c  f3c5050e          UBFX     r5,r5,#0,#15          ;478
000020  1c64              ADDS     r4,r4,#1
;;;480    			while (n--)
000022  e003              B        |L1.44|
                  |L1.36|
;;;481    			{
;;;482    				vs1053_WriteCmd(addr, val);
000024  b2f8              UXTB     r0,r7
000026  4641              MOV      r1,r8
000028  f7fffffe          BL       vs1053_WriteCmd
                  |L1.44|
00002c  1e6d              SUBS     r5,r5,#1              ;480
00002e  b2ad              UXTH     r5,r5                 ;480
000030  d2f8              BCS      |L1.36|
000032  e008              B        |L1.70|
                  |L1.52|
;;;483    			}
;;;484    		}
;;;485    		else
;;;486    		{
;;;487    			/* Copy run, copy n samples */
;;;488    			while (n--)
;;;489    			{
;;;490    				val = plugin[i++];
000034  f8361014          LDRH     r1,[r6,r4,LSL #1]
;;;491    				vs1053_WriteCmd(addr, val);
000038  b2f8              UXTB     r0,r7
00003a  1c64              ADDS     r4,r4,#1
00003c  f7fffffe          BL       vs1053_WriteCmd
                  |L1.64|
000040  1e6d              SUBS     r5,r5,#1              ;488
000042  b2ad              UXTH     r5,r5                 ;488
000044  d2f6              BCS      |L1.52|
                  |L1.70|
000046  f5b47f17          CMP      r4,#0x25c             ;469
00004a  d9dd              BLS      |L1.8|
;;;492    			}
;;;493    		}
;;;494    	}
;;;495    	/* 等待芯片内部操作完成 */
;;;496    	if (vs1053_WaitTimeOut())
00004c  e8bd41f0          POP      {r4-r8,lr}
000050  f7ffbffe          B.W      vs1053_WaitTimeOut
;;;497    	{
;;;498    		return;
;;;499    	}
;;;500    }
;;;501    
                          ENDP

                  |L1.84|
                          DCD      ||.constdata||

                          AREA ||i.ResetDecodeTime||, CODE, READONLY, ALIGN=1

                  ResetDecodeTime PROC
;;;794    */
;;;795    void ResetDecodeTime(void)
000000  2100              MOVS     r1,#0
;;;796    {
;;;797    	vs1053_WriteCmd(SCI_DECODE_TIME, 0x0000);
000002  2004              MOVS     r0,#4
000004  f7ffbffe          B.W      vs1053_WriteCmd
;;;798    }
;;;799    
                          ENDP


                          AREA ||i.bsp_CfgSPIForVS1053B||, CODE, READONLY, ALIGN=2

                  bsp_CfgSPIForVS1053B PROC
;;;203    */
;;;204    void bsp_CfgSPIForVS1053B(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	SPI_InitTypeDef  SPI_InitStructure;
;;;207    
;;;208    	/* 打开SPI时钟 */
;;;209    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000002  2101              MOVS     r1,#1
000004  b086              SUB      sp,sp,#0x18           ;205
000006  0308              LSLS     r0,r1,#12
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;210    
;;;211    	/* SPI1 配置 */
;;;212    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 选择2线全双工模式 */
00000c  2000              MOVS     r0,#0
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;213    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* CPU的SPI作为主设备 */
000012  f44f7182          MOV      r1,#0x104
000016  f8ad1002          STRH     r1,[sp,#2]
;;;214    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 8个数据 */
;;;215    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;			/* CLK引脚空闲状态电平 = 0 */
;;;216    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;		/* 数据采样在第1个边沿(上升沿) */
00001a  f8ad0008          STRH     r0,[sp,#8]
;;;217    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;  			/* 软件控制片选 */
00001e  f44f7100          MOV      r1,#0x200
000022  f8ad100a          STRH     r1,[sp,#0xa]
;;;218    
;;;219    	/*
;;;220    		由于SPI1的时钟源是84M, SPI3的时钟源是42M。为了获得更快的速度，软件上选择SPI1。
;;;221    		pdf page=23 vs1053B SPI输入时钟 4个CLKI cycles； CLKI = 12.288M
;;;222    		因此最大SPI时钟 = 12.288 / 4 = 3.072MHz
;;;223    		需要 32分频
;;;224    	*/
;;;225    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
000026  2128              MOVS     r1,#0x28
000028  f8ad100c          STRH     r1,[sp,#0xc]
00002c  f8ad0004          STRH     r0,[sp,#4]            ;214
000030  f8ad0006          STRH     r0,[sp,#6]            ;215
;;;226    
;;;227    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 最高位先传输 */
000034  f8ad000e          STRH     r0,[sp,#0xe]
;;;228    	SPI_InitStructure.SPI_CRCPolynomial = 7;
000038  2007              MOVS     r0,#7
;;;229    	SPI_Init(SPI1,&SPI_InitStructure);
00003a  4c08              LDR      r4,|L3.92|
00003c  f8ad0010          STRH     r0,[sp,#0x10]         ;228
000040  4669              MOV      r1,sp
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SPI_Init
;;;230    
;;;231    	SPI_Cmd(SPI1, DISABLE);			/* 先禁止SPI  */
000048  2100              MOVS     r1,#0
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       SPI_Cmd
;;;232    
;;;233    	SPI_Cmd(SPI1, ENABLE);			/* 使能SPI  */
000050  2101              MOVS     r1,#1
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       SPI_Cmd
;;;234    }
000058  b006              ADD      sp,sp,#0x18
00005a  bd10              POP      {r4,pc}
;;;235    
                          ENDP

                  |L3.92|
                          DCD      0x40013000

                          AREA ||i.vs1053_Init||, CODE, READONLY, ALIGN=2

                  vs1053_Init PROC
;;;130    */
;;;131    void vs1053_Init(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;132    {
;;;133    	GPIO_InitTypeDef GPIO_InitStructure;
;;;134    
;;;135    	/*
;;;136    		安富莱开发板和VS1003B的口线连接：
;;;137    		PA6/SPI1_MISO <== SO
;;;138    		PA7/SPI1_MOSI ==> SI
;;;139    		PA5/SPI1_SCK  ==> SCLK
;;;140    		PF9           ==> XCS\     (片选, 和LED4复用，访问VS1003B时，LED4会闪烁)
;;;141    		PB5           <== DREQ
;;;142    		PF8           ==> XDCS/BSYNC   (数据和命令选择)
;;;143    		
;;;144    	*/
;;;145    	/* 打开相关模块的时钟 */
;;;146    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB
000004  2101              MOVS     r1,#1
000006  208d              MOVS     r0,#0x8d
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;147    		| RCC_APB2Periph_GPIOF | RCC_APB2Periph_GPIOF
;;;148    		| RCC_APB2Periph_AFIO, ENABLE);
;;;149    
;;;150    	/* 配置PB5作为VS1003B的数据请求 */
;;;151    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
00000c  2020              MOVS     r0,#0x20
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;152    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2403              MOVS     r4,#3
000014  f88d4002          STRB     r4,[sp,#2]
;;;153    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;    /* 输入 */
000018  2004              MOVS     r0,#4
00001a  f88d0003          STRB     r0,[sp,#3]
;;;154    	GPIO_Init(GPIOB,&GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4811              LDR      r0,|L4.104|
000022  f7fffffe          BL       GPIO_Init
;;;155    
;;;156    	/* 配置PF8作为VS1003B的XDS */
;;;157    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000026  f44f7580          MOV      r5,#0x100
00002a  f8ad5000          STRH     r5,[sp,#0]
;;;158    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;159    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    /* 推挽输出 */
;;;160    	GPIO_Init(GPIOF,&GPIO_InitStructure);	
00002e  f8df803c          LDR      r8,|L4.108|
000032  f88d4002          STRB     r4,[sp,#2]            ;158
000036  2610              MOVS     r6,#0x10              ;159
000038  f88d6003          STRB     r6,[sp,#3]            ;159
00003c  4669              MOV      r1,sp
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       GPIO_Init
;;;161    
;;;162    	/* 配置PF9作为VS1003B的XCS */
;;;163    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000044  006f              LSLS     r7,r5,#1
000046  f8ad7000          STRH     r7,[sp,#0]
;;;164    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004a  f88d4002          STRB     r4,[sp,#2]
;;;165    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    /* 推挽输出 */
00004e  f88d6003          STRB     r6,[sp,#3]
;;;166    	GPIO_Init(GPIOF,&GPIO_InitStructure);	
000052  4669              MOV      r1,sp
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       GPIO_Init
;;;167    
;;;168    	VS1053_CS_1();
00005a  4804              LDR      r0,|L4.108|
00005c  3010              ADDS     r0,r0,#0x10
00005e  6007              STR      r7,[r0,#0]
;;;169    	VS1053_DS_1();
000060  6005              STR      r5,[r0,#0]
;;;170    
;;;171    #if 0
;;;172    	{
;;;173    		
;;;174    		/*　软件SPI模拟还是硬件SPI由 bsp_spi_bus.c 文件决定。 不要在这个地方配置SPI硬件 */		
;;;175    		/*　配置SPI1口线：SCK, MISO and MOSI */
;;;176    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
;;;177    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;178    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;   /* 复用推挽输出 */
;;;179    		GPIO_Init(GPIOA,&GPIO_InitStructure);
;;;180    
;;;181    
;;;182    		/* 配置SPI硬件参数用于访问MP3解码器VS1053B */
;;;183    		/* 打开SPI时钟 */
;;;184    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
;;;185    		
;;;186    		bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;187    			| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_64 | SPI_FirstBit_MSB);
;;;188    		
;;;189    		SPI_Cmd(SPI1, DISABLE);			/* 禁止SPI  */
;;;190    		SPI_Cmd(SPI1, ENABLE);			/* 使能SPI  */
;;;191    	}
;;;192    	//bsp_CfgSPIForVS1053B();	
;;;193    #endif	
;;;194    }
000062  e8bd83f8          POP      {r3-r9,pc}
;;;195    
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      0x40010c00
                  |L4.108|
                          DCD      0x40011c00

                          AREA ||i.vs1053_PreWriteData||, CODE, READONLY, ALIGN=2

                  vs1053_PreWriteData PROC
;;;359    */
;;;360    void vs1053_PreWriteData(void)
000000  4903              LDR      r1,|L5.16|
;;;361    {
;;;362    	VS1053_CS_1();
000002  f44f7000          MOV      r0,#0x200
000006  6008              STR      r0,[r1,#0]
;;;363    	VS1053_DS_0();
000008  1040              ASRS     r0,r0,#1
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;364    }
00000e  4770              BX       lr
;;;365    
                          ENDP

                  |L5.16|
                          DCD      0x40011c10

                          AREA ||i.vs1053_ReadChipID||, CODE, READONLY, ALIGN=1

                  vs1053_ReadChipID PROC
;;;417    */
;;;418    uint8_t vs1053_ReadChipID(void)
000000  b510              PUSH     {r4,lr}
;;;419    {
;;;420    	uint16_t usStatus;
;;;421    	/* pdf page 40
;;;422    		SCI STATUS 状态寄存器的 Bit7:4 表示芯片的版本
;;;423    		0 for VS1001
;;;424    		1 for VS1011
;;;425    		2 for VS1002
;;;426    		3 for VS1003
;;;427    		4 for VS1053,
;;;428    		5 for VS1033,
;;;429    		7 for VS1103.
;;;430    	*/
;;;431    	usStatus = vs1053_ReadReg(SCI_STATUS);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       vs1053_ReadReg
;;;432    
;;;433    	return ((usStatus >> 4) & 0x000F);
000008  f3c01003          UBFX     r0,r0,#4,#4
;;;434    }
00000c  bd10              POP      {r4,pc}
;;;435    
                          ENDP


                          AREA ||i.vs1053_ReadReg||, CODE, READONLY, ALIGN=1

                  vs1053_ReadReg PROC
;;;388    */
;;;389    uint16_t vs1053_ReadReg(uint8_t _ucAddr)
000000  b510              PUSH     {r4,lr}
;;;390    {
000002  4604              MOV      r4,r0
;;;391    	uint16_t usTemp;
;;;392    
;;;393    	/* 等待芯片内部操作完成 */
;;;394    	if (vs1053_WaitTimeOut())
000004  f7fffffe          BL       vs1053_WaitTimeOut
000008  2800              CMP      r0,#0
;;;395    	{
;;;396    		return 0;
;;;397    	}
;;;398    
;;;399    	vs1053_SetCS(0);
00000a  f04f0000          MOV      r0,#0
00000e  d112              BNE      |L7.54|
000010  f7fffffe          BL       vs1053_SetCS
;;;400    	
;;;401    	bsp_spiWrite0(VS_READ_COMMAND);	/* 发送vs1053读命令 */
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       bsp_spiWrite0
;;;402    	bsp_spiWrite0(_ucAddr);			/* 发送地址 */
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       bsp_spiWrite0
;;;403    	usTemp = bsp_spiRead0() << 8;	/* 读取高字节 */
000020  f7fffffe          BL       bsp_spiRead0
000024  0204              LSLS     r4,r0,#8
;;;404    	usTemp += bsp_spiRead0();		/* 读取低字节 */
000026  f7fffffe          BL       bsp_spiRead0
00002a  4420              ADD      r0,r0,r4
00002c  b284              UXTH     r4,r0
;;;405    	
;;;406    	vs1053_SetCS(1);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       vs1053_SetCS
;;;407    	return usTemp;
000034  4620              MOV      r0,r4
                  |L7.54|
;;;408    }
000036  bd10              POP      {r4,pc}
;;;409    
                          ENDP


                          AREA ||i.vs1053_ReqNewData||, CODE, READONLY, ALIGN=2

                  vs1053_ReqNewData PROC
;;;339    */
;;;340    uint8_t vs1053_ReqNewData(void)
000000  4803              LDR      r0,|L8.16|
;;;341    {
;;;342    	if (VS1053_IS_BUSY())
000002  6800              LDR      r0,[r0,#0]
000004  0680              LSLS     r0,r0,#26
000006  d401              BMI      |L8.12|
;;;343    	{
;;;344    		return 0;
000008  2000              MOVS     r0,#0
;;;345    	}
;;;346    	else
;;;347    	{
;;;348    		return 1;
;;;349    	}
;;;350    }
00000a  4770              BX       lr
                  |L8.12|
00000c  2001              MOVS     r0,#1                 ;348
00000e  4770              BX       lr
;;;351    
                          ENDP

                  |L8.16|
                          DCD      0x40010c08

                          AREA ||i.vs1053_SetBASS||, CODE, READONLY, ALIGN=1

                  vs1053_SetBASS PROC
;;;729    */
;;;730    void vs1053_SetBASS(int8_t _cHighAmp, uint16_t _usHighFreqCut, uint8_t _ucLowAmp, uint16_t _usLowFreqCut)
000000  b430              PUSH     {r4,r5}
;;;731    {
;;;732    	uint16_t usValue;
;;;733    
;;;734    	/*
;;;735    		SCI_BASS 寄存器定义:
;;;736    
;;;737    		Bit15:12  高音控制 -8 ... 7  (0是关闭)
;;;738    		Bit11:8   下限频率,单位1KHz,  1...15
;;;739    
;;;740    		Bit7:4    低音控制 0...15 (0是关闭)
;;;741    		Bit3:0    上限频率,单位10Hz, 2...15
;;;742    	*/
;;;743    
;;;744    	/* 高音增强幅度 */
;;;745    	if (_cHighAmp < -8)
000002  f06f0407          MVN      r4,#7
000006  42a0              CMP      r0,r4
000008  da01              BGE      |L9.14|
;;;746    	{
;;;747    		_cHighAmp = -8;
00000a  4620              MOV      r0,r4
00000c  e002              B        |L9.20|
                  |L9.14|
;;;748    	}
;;;749    	else if (_cHighAmp > 7)
00000e  2807              CMP      r0,#7
000010  dd00              BLE      |L9.20|
;;;750    	{
;;;751    		_cHighAmp = 7;
000012  2007              MOVS     r0,#7
                  |L9.20|
;;;752    	}
;;;753    	usValue = _cHighAmp << 12;
000014  f64f74ff          MOV      r4,#0xffff
000018  ea043400          AND      r4,r4,r0,LSL #12
;;;754    
;;;755    	/* 高音增强截止频率 */
;;;756    	if (_usHighFreqCut < 1000)
00001c  f44f707a          MOV      r0,#0x3e8
000020  4281              CMP      r1,r0
000022  d201              BCS      |L9.40|
;;;757    	{
;;;758    		_usHighFreqCut = 1000;
000024  4601              MOV      r1,r0
000026  e004              B        |L9.50|
                  |L9.40|
;;;759    	}
;;;760    	else if (_usHighFreqCut > 15000)
000028  f6432598          MOV      r5,#0x3a98
00002c  42a9              CMP      r1,r5
00002e  d900              BLS      |L9.50|
;;;761    	{
;;;762    		_usHighFreqCut = 15000;
000030  4629              MOV      r1,r5
                  |L9.50|
;;;763    	}
;;;764    	usValue  += ((_usHighFreqCut / 1000) << 8);
000032  fbb1f0f0          UDIV     r0,r1,r0
000036  eb042000          ADD      r0,r4,r0,LSL #8
00003a  b280              UXTH     r0,r0
;;;765    
;;;766    	/* 低音增强幅度 */
;;;767    	if (_ucLowAmp > 15)
00003c  2a0f              CMP      r2,#0xf
00003e  d900              BLS      |L9.66|
;;;768    	{
;;;769    		_ucLowAmp = 15;
000040  220f              MOVS     r2,#0xf
                  |L9.66|
;;;770    	}
;;;771    	usValue  += (_ucLowAmp << 4);
000042  eb001002          ADD      r0,r0,r2,LSL #4
000046  b280              UXTH     r0,r0
;;;772    
;;;773    	/* 低音增强截止频率 */
;;;774    	if (_usLowFreqCut < 20)
000048  2b14              CMP      r3,#0x14
00004a  d201              BCS      |L9.80|
;;;775    	{
;;;776    		_usLowFreqCut = 20;
00004c  2314              MOVS     r3,#0x14
00004e  e002              B        |L9.86|
                  |L9.80|
;;;777    	}
;;;778    	else if (_usLowFreqCut > 150)
000050  2b96              CMP      r3,#0x96
000052  d900              BLS      |L9.86|
;;;779    	{
;;;780    		_usLowFreqCut = 150;
000054  2396              MOVS     r3,#0x96
                  |L9.86|
;;;781    	}
;;;782    	usValue  += (_usLowFreqCut / 10);
000056  210a              MOVS     r1,#0xa
000058  fbb3f1f1          UDIV     r1,r3,r1
00005c  4408              ADD      r0,r0,r1
00005e  b281              UXTH     r1,r0
;;;783    
;;;784    	vs1053_WriteCmd(SCI_BASS, usValue);
000060  bc30              POP      {r4,r5}
000062  2002              MOVS     r0,#2
000064  f7ffbffe          B.W      vs1053_WriteCmd
;;;785    }
;;;786    
                          ENDP


                          AREA ||i.vs1053_SetCS||, CODE, READONLY, ALIGN=2

                  vs1053_SetCS PROC
;;;244    */
;;;245    static void vs1053_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247    	if (_level == 0)
;;;248    	{
;;;249    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
;;;250    
;;;251    		#ifdef SOFT_SPI		/* 软件SPI */
;;;252    			bsp_SetSpiSck(0);
;;;253    			VS1053_CS_0();
;;;254    		#endif
;;;255    
;;;256    		#ifdef HARD_SPI		/* 硬件SPI */
;;;257    			VS1053_CS_0();
000002  f44f7400          MOV      r4,#0x200
000006  b128              CBZ      r0,|L10.20|
;;;258    
;;;259    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;260    				| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_64 | SPI_FirstBit_MSB);
;;;261    		#endif
;;;262    	}
;;;263    	else
;;;264    	{
;;;265    		VS1053_CS_1();
000008  4808              LDR      r0,|L10.44|
00000a  6004              STR      r4,[r0,#0]
;;;266    
;;;267    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      bsp_SpiBusExit
                  |L10.20|
000014  f7fffffe          BL       bsp_SpiBusEnter
000018  4804              LDR      r0,|L10.44|
00001a  1d00              ADDS     r0,r0,#4              ;257
00001c  6004              STR      r4,[r0,#0]            ;257
00001e  e8bd4010          POP      {r4,lr}               ;259
000022  f44f704b          MOV      r0,#0x32c             ;259
000026  f7ffbffe          B.W      bsp_SPI_Init
;;;268    	}
;;;269    }
;;;270    
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      0x40011c10

                          AREA ||i.vs1053_SetDS||, CODE, READONLY, ALIGN=2

                  vs1053_SetDS PROC
;;;279    */
;;;280    static void vs1053_SetDS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;281    {
;;;282    	if (_level == 0)
;;;283    	{
;;;284    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
;;;285    
;;;286    		#ifdef SOFT_SPI		/* 软件SPI */
;;;287    			bsp_SetSpiSck(0);
;;;288    			VS1053_DS_0();
;;;289    		#endif
;;;290    
;;;291    		#ifdef HARD_SPI		/* 硬件SPI */
;;;292    			VS1053_DS_0();
000002  f44f7480          MOV      r4,#0x100
000006  b128              CBZ      r0,|L11.20|
;;;293    
;;;294    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;295    				| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_64 | SPI_FirstBit_MSB);
;;;296    		#endif
;;;297    	}
;;;298    	else
;;;299    	{
;;;300    		VS1053_DS_1();
000008  4808              LDR      r0,|L11.44|
00000a  6004              STR      r4,[r0,#0]
;;;301    
;;;302    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      bsp_SpiBusExit
                  |L11.20|
000014  f7fffffe          BL       bsp_SpiBusEnter
000018  4804              LDR      r0,|L11.44|
00001a  1d00              ADDS     r0,r0,#4              ;292
00001c  6004              STR      r4,[r0,#0]            ;292
00001e  e8bd4010          POP      {r4,lr}               ;294
000022  f44f704b          MOV      r0,#0x32c             ;294
000026  f7ffbffe          B.W      bsp_SPI_Init
;;;303    	}
;;;304    }
;;;305    
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      0x40011c10

                          AREA ||i.vs1053_SetVolume||, CODE, READONLY, ALIGN=1

                  vs1053_SetVolume PROC
;;;698    */
;;;699    void vs1053_SetVolume(uint8_t _ucVol)
000000  b148              CBZ      r0,|L12.22|
;;;700    {
;;;701    
;;;702    	/* 对于 VS1053， 0表示最大音量，254表示静音 */
;;;703    	if (_ucVol == 0)
;;;704    	{
;;;705    		_ucVol = 254;
;;;706    	}
;;;707    	else if (_ucVol == 255)
000002  28ff              CMP      r0,#0xff
000004  d009              BEQ      |L12.26|
;;;708    	{
;;;709    		_ucVol = 0;
;;;710    	}
;;;711    	else
;;;712    	{
;;;713    		_ucVol = 254 - _ucVol;
000006  f1c000fe          RSB      r0,r0,#0xfe
00000a  b2c0              UXTB     r0,r0
                  |L12.12|
;;;714    	}
;;;715    
;;;716    	vs1053_WriteCmd(SCI_VOL, (_ucVol << 8) | _ucVol);
00000c  ea402100          ORR      r1,r0,r0,LSL #8
000010  200b              MOVS     r0,#0xb
000012  f7ffbffe          B.W      vs1053_WriteCmd
                  |L12.22|
000016  20fe              MOVS     r0,#0xfe              ;705
000018  e7f8              B        |L12.12|
                  |L12.26|
00001a  2000              MOVS     r0,#0                 ;709
00001c  e7f6              B        |L12.12|
;;;717    }
;;;718    
                          ENDP


                          AREA ||i.vs1053_SoftReset||, CODE, READONLY, ALIGN=1

                  vs1053_SoftReset PROC
;;;628    */
;;;629    void vs1053_SoftReset(void)
000000  b570              PUSH     {r4-r6,lr}
;;;630    {
;;;631    	uint8_t retry;
;;;632    
;;;633    	/* 等待芯片内部操作完成 */
;;;634    	if (vs1053_WaitTimeOut())
000002  f7fffffe          BL       vs1053_WaitTimeOut
000006  2800              CMP      r0,#0
000008  d124              BNE      |L13.84|
;;;635    	{
;;;636    		return;
;;;637    	}
;;;638    
;;;639    	bsp_spiWrite0(0X00);//启动传输
00000a  f7fffffe          BL       bsp_spiWrite0
;;;640    	retry = 0;
00000e  2400              MOVS     r4,#0
;;;641    	while(vs1053_ReadReg(SCI_MODE) != 0x0804) // 软件复位,新模式
;;;642    	{
;;;643    		/* 等待至少1.35ms  */
;;;644    		vs1053_WriteCmd(SCI_MODE, 0x0804);// 软件复位,新模式
000010  f6400504          MOV      r5,#0x804
000014  e00b              B        |L13.46|
                  |L13.22|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       vs1053_WriteCmd
;;;645    
;;;646    		/* 等待芯片内部操作完成 */
;;;647    		if (vs1053_WaitTimeOut())
00001c  f7fffffe          BL       vs1053_WaitTimeOut
000020  2800              CMP      r0,#0
000022  d117              BNE      |L13.84|
;;;648    		{
;;;649    			return;
;;;650    		}
;;;651    
;;;652    		if (retry++>5)
000024  4620              MOV      r0,r4
000026  1c64              ADDS     r4,r4,#1
000028  b2e4              UXTB     r4,r4
00002a  2805              CMP      r0,#5
00002c  d805              BHI      |L13.58|
                  |L13.46|
00002e  2000              MOVS     r0,#0                 ;641
000030  f7fffffe          BL       vs1053_ReadReg
000034  4629              MOV      r1,r5                 ;641
000036  4288              CMP      r0,r1                 ;641
000038  d1ed              BNE      |L13.22|
                  |L13.58|
;;;653    		{
;;;654    			break;
;;;655    		}
;;;656    	}
;;;657    
;;;658    #if 0
;;;659    	vs1053_WriteCmd(SCI_CLOCKF,0x9800);
;;;660    	vs1053_WriteCmd(SCI_AUDATA,0xBB81); /* 采样率48k，立体声 */
;;;661    
;;;662    	vs1053_WriteCmd(SCI_BASS, 0x0000);	/* */
;;;663        vs1053_WriteCmd(SCI_VOL, 0x2020); 	/* 设置为最大音量,0是最大  */
;;;664    
;;;665    	ResetDecodeTime();	/* 复位解码时间	*/
;;;666    
;;;667        /* 向vs1053发送4个字节无效数据，用以启动SPI发送 */
;;;668        VS1053_DS_0();//选中数据传输
;;;669    	vs1053_WriteByte(0xFF);
;;;670    	vs1053_WriteByte(0xFF);
;;;671    	vs1053_WriteByte(0xFF);
;;;672    	vs1053_WriteByte(0xFF);
;;;673    	VS1053_DS_1();//取消数据传输
;;;674    #else
;;;675    	/* Set clock register, doubler etc. */
;;;676    	vs1053_WriteCmd(SCI_CLOCKF, 0xA000);
00003a  f44f4120          MOV      r1,#0xa000
00003e  2003              MOVS     r0,#3
000040  f7fffffe          BL       vs1053_WriteCmd
;;;677    
;;;678    	//vs1053_WriteCmd(SCI_BASS, 0x0000);	/* 低音高音增强控制， 0表示不启用 */
;;;679        //vs1053_WriteCmd(SCI_VOL, 0x2020); 	/* 设置为最大音量,0是最大  */
;;;680    
;;;681    	/* 等待芯片内部操作完成 */
;;;682    	if (vs1053_WaitTimeOut())
000044  f7fffffe          BL       vs1053_WaitTimeOut
000048  2800              CMP      r0,#0
00004a  d103              BNE      |L13.84|
;;;683    	{
;;;684    		return;
;;;685    	}
;;;686    	;
;;;687    	LoadUserPatch();
00004c  e8bd4070          POP      {r4-r6,lr}
000050  f7ffbffe          B.W      LoadUserPatch
                  |L13.84|
;;;688    #endif
;;;689    }
000054  bd70              POP      {r4-r6,pc}
;;;690    
                          ENDP


                          AREA ||i.vs1053_TestRam||, CODE, READONLY, ALIGN=1

                  vs1053_TestRam PROC
;;;509    */
;;;510    uint8_t vs1053_TestRam(void)
000000  b510              PUSH     {r4,lr}
;;;511    {
;;;512    	uint16_t usRegValue;
;;;513    
;;;514     	vs1053_WriteCmd(SCI_MODE, 0x0820);	/* 进入vs1053的测试模式 */
000002  f44f6102          MOV      r1,#0x820
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       vs1053_WriteCmd
;;;515    
;;;516    	/* 等待芯片内部操作完成 */
;;;517    	if (vs1053_WaitTimeOut())
00000c  f7fffffe          BL       vs1053_WaitTimeOut
000010  bb38              CBNZ     r0,|L14.98|
;;;518    	{
;;;519    		return 0;
;;;520    	}
;;;521    
;;;522    	vs1053_SetDS(0);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       vs1053_SetDS
;;;523    	
;;;524    	bsp_spiWrite0(0x4d);
000018  204d              MOVS     r0,#0x4d
00001a  f7fffffe          BL       bsp_spiWrite0
;;;525    	bsp_spiWrite0(0xea);
00001e  20ea              MOVS     r0,#0xea
000020  f7fffffe          BL       bsp_spiWrite0
;;;526    	bsp_spiWrite0(0x6d);
000024  206d              MOVS     r0,#0x6d
000026  f7fffffe          BL       bsp_spiWrite0
;;;527    	bsp_spiWrite0(0x54);
00002a  2054              MOVS     r0,#0x54
00002c  f7fffffe          BL       bsp_spiWrite0
;;;528    	bsp_spiWrite0(0x00);
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       bsp_spiWrite0
;;;529    	bsp_spiWrite0(0x00);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       bsp_spiWrite0
;;;530    	bsp_spiWrite0(0x00);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       bsp_spiWrite0
;;;531    	bsp_spiWrite0(0x00);
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       bsp_spiWrite0
;;;532    	
;;;533    	vs1053_SetDS(1);
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       vs1053_SetDS
;;;534    
;;;535    	/* 等待芯片内部操作完成 */
;;;536    	if (vs1053_WaitTimeOut())
00004e  f7fffffe          BL       vs1053_WaitTimeOut
000052  b930              CBNZ     r0,|L14.98|
;;;537    	{
;;;538    		return 0;
;;;539    	}
;;;540    
;;;541    	usRegValue = vs1053_ReadReg(SCI_HDAT0); /* 如果得到的值为0x807F，则表明OK */
000054  2008              MOVS     r0,#8
000056  f7fffffe          BL       vs1053_ReadReg
;;;542    
;;;543    	if (usRegValue == 0x807F)
00005a  f5a04100          SUB      r1,r0,#0x8000
00005e  397f              SUBS     r1,r1,#0x7f
000060  d001              BEQ      |L14.102|
                  |L14.98|
;;;544    	{
;;;545    		return 1;
;;;546    	}
;;;547    	else
;;;548    	{
;;;549    		return 0;
000062  2000              MOVS     r0,#0
;;;550    	}
;;;551    }
000064  bd10              POP      {r4,pc}
                  |L14.102|
000066  2001              MOVS     r0,#1                 ;545
000068  bd10              POP      {r4,pc}
;;;552    
                          ENDP


                          AREA ||i.vs1053_TestSine||, CODE, READONLY, ALIGN=1

                  vs1053_TestSine PROC
;;;560    */
;;;561    void vs1053_TestSine(void)
000000  b510              PUSH     {r4,lr}
;;;562    {
;;;563    	/*
;;;564    		正弦测试通过有序的8字节初始化，0x53 0xEF 0x6E n 0 0 0 0
;;;565    		想要退出正弦测试模式的话，发送如下序列 0x45 0x78 0x69 0x74 0 0 0 0 .
;;;566    
;;;567    		这里的n被定义为正弦测试使用，定义
;;;568    		如下：
;;;569    		n bits
;;;570    		名称位 描述
;;;571    		FsIdx 7：5 采样率索引
;;;572    		S 4：0 正弦跳过速度
;;;573    		正弦输出频率可通过这个公式计算：F=Fs×(S/128).
;;;574    		例如：正弦测试值为126 时被激活，二进制为
;;;575    		0b01111110。则FsIdx=0b011=3,所以Fs=22050Hz。
;;;576    		S=0b11110=30, 所以最终的正弦输出频率为
;;;577    		F=22050Hz×30/128=5168Hz。
;;;578    
;;;579    
;;;580    		正弦输出频率可通过这个公式计算：F = Fs×(S/128).
;;;581    	*/
;;;582    
;;;583    	vs1053_WriteCmd(0x0b,0x2020);	  	/* 设置音量	*/
000002  f2420120          MOV      r1,#0x2020
000006  200b              MOVS     r0,#0xb
000008  f7fffffe          BL       vs1053_WriteCmd
;;;584     	vs1053_WriteCmd(SCI_MODE, 0x0820);	/* 进入vs1053的测试模式	*/
00000c  f44f6102          MOV      r1,#0x820
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       vs1053_WriteCmd
;;;585    
;;;586     	/* 等待芯片内部操作完成 */
;;;587    	if (vs1053_WaitTimeOut())
000016  f7fffffe          BL       vs1053_WaitTimeOut
00001a  2800              CMP      r0,#0
00001c  d13c              BNE      |L15.152|
;;;588    	{
;;;589    		return;
;;;590    	}
;;;591    
;;;592     	/*
;;;593     		进入正弦测试状态
;;;594     		命令序列：0x53 0xef 0x6e n 0x00 0x00 0x00 0x00
;;;595     		其中n = 0x24, 设定vs1053所产生的正弦波的频率值
;;;596     	*/
;;;597    	vs1053_SetDS(0);
00001e  f7fffffe          BL       vs1053_SetDS
;;;598    	bsp_spiWrite0(0x53);
000022  2053              MOVS     r0,#0x53
000024  f7fffffe          BL       bsp_spiWrite0
;;;599    	bsp_spiWrite0(0xef);
000028  20ef              MOVS     r0,#0xef
00002a  f7fffffe          BL       bsp_spiWrite0
;;;600    	bsp_spiWrite0(0x6e);
00002e  206e              MOVS     r0,#0x6e
000030  f7fffffe          BL       bsp_spiWrite0
;;;601    	bsp_spiWrite0(0x24);	/* 0x24 or 0x44 */
000034  2024              MOVS     r0,#0x24
000036  f7fffffe          BL       bsp_spiWrite0
;;;602    	bsp_spiWrite0(0x00);
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       bsp_spiWrite0
;;;603    	bsp_spiWrite0(0x00);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       bsp_spiWrite0
;;;604    	bsp_spiWrite0(0x00);
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       bsp_spiWrite0
;;;605    	bsp_spiWrite0(0x00);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       bsp_spiWrite0
;;;606    	vs1053_SetDS(1);
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       vs1053_SetDS
;;;607    
;;;608    	/* 退出正弦测试 */
;;;609        vs1053_SetDS(0);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       vs1053_SetDS
;;;610    	bsp_spiWrite0(0x45);
00005e  2045              MOVS     r0,#0x45
000060  f7fffffe          BL       bsp_spiWrite0
;;;611    	bsp_spiWrite0(0x78);
000064  2078              MOVS     r0,#0x78
000066  f7fffffe          BL       bsp_spiWrite0
;;;612    	bsp_spiWrite0(0x69);
00006a  2069              MOVS     r0,#0x69
00006c  f7fffffe          BL       bsp_spiWrite0
;;;613    	bsp_spiWrite0(0x74);
000070  2074              MOVS     r0,#0x74
000072  f7fffffe          BL       bsp_spiWrite0
;;;614    	bsp_spiWrite0(0x00);
000076  2000              MOVS     r0,#0
000078  f7fffffe          BL       bsp_spiWrite0
;;;615    	bsp_spiWrite0(0x00);
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       bsp_spiWrite0
;;;616    	bsp_spiWrite0(0x00);
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       bsp_spiWrite0
;;;617    	bsp_spiWrite0(0x00);
000088  2000              MOVS     r0,#0
00008a  f7fffffe          BL       bsp_spiWrite0
;;;618    	vs1053_SetDS(1);
00008e  e8bd4010          POP      {r4,lr}
000092  2001              MOVS     r0,#1
000094  f7ffbffe          B.W      vs1053_SetDS
                  |L15.152|
;;;619    }
000098  bd10              POP      {r4,pc}
;;;620    
                          ENDP


                          AREA ||i.vs1053_WaitTimeOut||, CODE, READONLY, ALIGN=2

                  vs1053_WaitTimeOut PROC
;;;444    */
;;;445    uint8_t vs1053_WaitTimeOut(void)
000000  4a07              LDR      r2,|L16.32|
;;;446    {
;;;447    	uint32_t i;
;;;448    
;;;449    	for (i = 0; i < 4000000; i++)
000002  4908              LDR      r1,|L16.36|
000004  2000              MOVS     r0,#0
                  |L16.6|
;;;450    	{
;;;451    		if (!VS1053_IS_BUSY())
000006  6813              LDR      r3,[r2,#0]
000008  069b              LSLS     r3,r3,#26
00000a  d402              BMI      |L16.18|
00000c  1c40              ADDS     r0,r0,#1
00000e  4288              CMP      r0,r1                 ;449
000010  d3f9              BCC      |L16.6|
                  |L16.18|
;;;452    		{
;;;453    			break;
;;;454    		}
;;;455    	}
;;;456    
;;;457    	if (i >= 4000000)
000012  4288              CMP      r0,r1
000014  d301              BCC      |L16.26|
;;;458    	{
;;;459    		return 1;	/* 超时无应答，硬件异常 */
000016  2001              MOVS     r0,#1
;;;460    	}
;;;461    
;;;462    	return 0;	/* 正常返回 */
;;;463    }
000018  4770              BX       lr
                  |L16.26|
00001a  2000              MOVS     r0,#0                 ;462
00001c  4770              BX       lr
;;;464    
                          ENDP

00001e  0000              DCW      0x0000
                  |L16.32|
                          DCD      0x40010c08
                  |L16.36|
                          DCD      0x003d0900

                          AREA ||i.vs1053_WriteCmd||, CODE, READONLY, ALIGN=1

                  vs1053_WriteCmd PROC
;;;313    */
;;;314    void vs1053_WriteCmd(uint8_t _ucAddr, uint16_t _usData)
000000  b570              PUSH     {r4-r6,lr}
;;;315    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;316    	/* 等待芯片内部操作完成 */
;;;317    	if (vs1053_WaitTimeOut())
000006  f7fffffe          BL       vs1053_WaitTimeOut
00000a  2800              CMP      r0,#0
00000c  d112              BNE      |L17.52|
;;;318    	{
;;;319    		return;
;;;320    	}
;;;321    
;;;322    	vs1053_SetCS(0);
00000e  f7fffffe          BL       vs1053_SetCS
;;;323    
;;;324    	bsp_spiWrite0(VS_WRITE_COMMAND);	/* 发送vs1053的写命令 */
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       bsp_spiWrite0
;;;325    	bsp_spiWrite0(_ucAddr); 			/* 寄存器地址 */
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       bsp_spiWrite0
;;;326    	bsp_spiWrite0(_usData >> 8); 	/* 发送高8位 */
00001e  0a20              LSRS     r0,r4,#8
000020  f7fffffe          BL       bsp_spiWrite0
;;;327    	bsp_spiWrite0(_usData);	 		/* 发送低8位 */
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       bsp_spiWrite0
;;;328    	
;;;329    	vs1053_SetCS(1);
00002a  e8bd4070          POP      {r4-r6,lr}
00002e  2001              MOVS     r0,#1
000030  f7ffbffe          B.W      vs1053_SetCS
                  |L17.52|
;;;330    }
000034  bd70              POP      {r4-r6,pc}
;;;331    
                          ENDP


                          AREA ||i.vs1053_WriteData||, CODE, READONLY, ALIGN=1

                  vs1053_WriteData PROC
;;;373    */
;;;374    void vs1053_WriteData(uint8_t _ucData)
000000  b510              PUSH     {r4,lr}
;;;375    {
000002  4604              MOV      r4,r0
;;;376    	vs1053_SetDS(0);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       vs1053_SetDS
;;;377    	bsp_spiWrite0(_ucData);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       bsp_spiWrite0
;;;378    	vs1053_SetDS(1);
000010  e8bd4010          POP      {r4,lr}
000014  2001              MOVS     r0,#1
000016  f7ffbffe          B.W      vs1053_SetDS
;;;379    }
;;;380    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  plugin
000000  00070001          DCW      0x0007,0x0001
000004  83000006          DCW      0x8300,0x0006
000008  01f2b080          DCW      0x01f2,0xb080
00000c  00240007          DCW      0x0024,0x0007
000010  92573f00          DCW      0x9257,0x3f00
000014  00240030          DCW      0x0024,0x0030
000018  02973f00          DCW      0x0297,0x3f00
00001c  00240006          DCW      0x0024,0x0006
000020  00173f10          DCW      0x0017,0x3f10
000024  00243f00          DCW      0x0024,0x3f00
000028  00240000          DCW      0x0024,0x0000
00002c  f6d7f400          DCW      0xf6d7,0xf400
000030  55c00000          DCW      0x55c0,0x0000
000034  0817f400          DCW      0x0817,0xf400
000038  57c00000          DCW      0x57c0,0x0000
00003c  004d000a          DCW      0x004d,0x000a
000040  708f0000          DCW      0x708f,0x0000
000044  c44e280f          DCW      0xc44e,0x280f
000048  e1000006          DCW      0xe100,0x0006
00004c  20160000          DCW      0x2016,0x0000
000050  028d0014          DCW      0x028d,0x0014
000054  1b012800          DCW      0x1b01,0x2800
000058  c7950015          DCW      0xc795,0x0015
00005c  59c00000          DCW      0x59c0,0x0000
000060  fa0d0039          DCW      0xfa0d,0x0039
000064  324f0000          DCW      0x324f,0x0000
000068  d20e2920          DCW      0xd20e,0x2920
00006c  41c00000          DCW      0x41c0,0x0000
000070  0024000a          DCW      0x0024,0x000a
000074  708f0000          DCW      0x708f,0x0000
000078  c44e280a          DCW      0xc44e,0x280a
00007c  cac00000          DCW      0xcac0,0x0000
000080  028d6fc2          DCW      0x028d,0x6fc2
000084  0024000c          DCW      0x0024,0x000c
000088  09812800          DCW      0x0981,0x2800
00008c  cad50000          DCW      0xcad5,0x0000
000090  18c2290c          DCW      0x18c2,0x290c
000094  48403613          DCW      0x4840,0x3613
000098  0024290c          DCW      0x0024,0x290c
00009c  48404086          DCW      0x4840,0x4086
0000a0  184c6234          DCW      0x184c,0x6234
0000a4  00240000          DCW      0x0024,0x0000
0000a8  00242800          DCW      0x0024,0x2800
0000ac  cad50030          DCW      0xcad5,0x0030
0000b0  03173f00          DCW      0x0317,0x3f00
0000b4  0024280a          DCW      0x0024,0x280a
0000b8  71c0002c          DCW      0x71c0,0x002c
0000bc  9d403613          DCW      0x9d40,0x3613
0000c0  00243e10          DCW      0x0024,0x3e10
0000c4  b8033e14          DCW      0xb803,0x3e14
0000c8  38113e11          DCW      0x3811,0x3e11
0000cc  38053e00          DCW      0x3805,0x3e00
0000d0  38010007          DCW      0x3801,0x0007
0000d4  c3900006          DCW      0xc390,0x0006
0000d8  a0113010          DCW      0xa011,0x3010
0000dc  04443050          DCW      0x0444,0x3050
0000e0  44056458          DCW      0x4405,0x6458
0000e4  0302ff94          DCW      0x0302,0xff94
0000e8  40810003          DCW      0x4081,0x0003
0000ec  ffc548b6          DCW      0xffc5,0x48b6
0000f0  0024ff82          DCW      0x0024,0xff82
0000f4  002442b2          DCW      0x0024,0x42b2
0000f8  0042b458          DCW      0x0042,0xb458
0000fc  00034cd6          DCW      0x0003,0x4cd6
000100  9801f248          DCW      0x9801,0xf248
000104  1bc0b58a          DCW      0x1bc0,0xb58a
000108  00246de6          DCW      0x0024,0x6de6
00010c  18040006          DCW      0x1804,0x0006
000110  00103810          DCW      0x0010,0x3810
000114  9bc53800          DCW      0x9bc5,0x3800
000118  c02436f4          DCW      0xc024,0x36f4
00011c  181136f0          DCW      0x1811,0x36f0
000120  9803283e          DCW      0x9803,0x283e
000124  2d800fff          DCW      0x2d80,0x0fff
000128  ffc3003e          DCW      0xffc3,0x003e
00012c  2d4f2800          DCW      0x2d4f,0x2800
000130  e3800000          DCW      0xe380,0x0000
000134  cb4e3413          DCW      0xcb4e,0x3413
000138  00242800          DCW      0x0024,0x2800
00013c  d405f400          DCW      0xd405,0xf400
000140  45102800          DCW      0x4510,0x2800
000144  d7c06894          DCW      0xd7c0,0x6894
000148  13cc3000          DCW      0x13cc,0x3000
00014c  184c6090          DCW      0x184c,0x6090
000150  93cc38b0          DCW      0x93cc,0x38b0
000154  38123004          DCW      0x3812,0x3004
000158  40240000          DCW      0x4024,0x0000
00015c  09103183          DCW      0x0910,0x3183
000160  00243100          DCW      0x0024,0x3100
000164  40246016          DCW      0x4024,0x6016
000168  0024000c          DCW      0x0024,0x000c
00016c  80122800          DCW      0x8012,0x2800
000170  d711b884          DCW      0xd711,0xb884
000174  104c6894          DCW      0x104c,0x6894
000178  30022939          DCW      0x3002,0x2939
00017c  b0c03e10          DCW      0xb0c0,0x3e10
000180  93cc4084          DCW      0x93cc,0x4084
000184  9bd24282          DCW      0x9bd2,0x4282
000188  00240000          DCW      0x0024,0x0000
00018c  00412800          DCW      0x0041,0x2800
000190  d9c56212          DCW      0xd9c5,0x6212
000194  00240000          DCW      0x0024,0x0000
000198  00402800          DCW      0x0040,0x2800
00019c  dec5000c          DCW      0xdec5,0x000c
0001a0  83902a00          DCW      0x8390,0x2a00
0001a4  e24034c3          DCW      0xe240,0x34c3
0001a8  00243444          DCW      0x0024,0x3444
0001ac  00243073          DCW      0x0024,0x3073
0001b0  00243053          DCW      0x0024,0x3053
0001b4  00243000          DCW      0x0024,0x3000
0001b8  00246092          DCW      0x0024,0x6092
0001bc  098c0000          DCW      0x098c,0x0000
0001c0  02412800          DCW      0x0241,0x2800
0001c4  e24532a0          DCW      0xe245,0x32a0
0001c8  00246012          DCW      0x0024,0x6012
0001cc  00240000          DCW      0x0024,0x0000
0001d0  00242800          DCW      0x0024,0x2800
0001d4  e2550000          DCW      0xe255,0x0000
0001d8  00243613          DCW      0x0024,0x3613
0001dc  00243001          DCW      0x0024,0x3001
0001e0  38442920          DCW      0x3844,0x2920
0001e4  05803009          DCW      0x0580,0x3009
0001e8  3852c090          DCW      0x3852,0xc090
0001ec  9bd22800          DCW      0x9bd2,0x2800
0001f0  e2403800          DCW      0xe240,0x3800
0001f4  1bc4000c          DCW      0x1bc4,0x000c
0001f8  4113b880          DCW      0x4113,0xb880
0001fc  23803304          DCW      0x2380,0x3304
000200  40243800          DCW      0x4024,0x3800
000204  05cccc92          DCW      0x05cc,0xcc92
000208  05cc3910          DCW      0x05cc,0x3910
00020c  00243910          DCW      0x0024,0x3910
000210  4024000c          DCW      0x4024,0x000c
000214  81103910          DCW      0x8110,0x3910
000218  002439f0          DCW      0x0024,0x39f0
00021c  40243810          DCW      0x4024,0x3810
000220  002438d0          DCW      0x0024,0x38d0
000224  40243810          DCW      0x4024,0x3810
000228  002438f0          DCW      0x0024,0x38f0
00022c  402434c3          DCW      0x4024,0x34c3
000230  00243444          DCW      0x0024,0x3444
000234  00243073          DCW      0x0024,0x3073
000238  00243063          DCW      0x0024,0x3063
00023c  00243000          DCW      0x0024,0x3000
000240  00244080          DCW      0x0024,0x4080
000244  00240000          DCW      0x0024,0x0000
000248  00242839          DCW      0x0024,0x2839
00024c  53d54284          DCW      0x53d5,0x4284
000250  00243613          DCW      0x0024,0x3613
000254  00242800          DCW      0x0024,0x2800
000258  e5856898          DCW      0xe585,0x6898
00025c  b8040000          DCW      0xb804,0x0000
000260  0084293b          DCW      0x0084,0x293b
000264  1cc03613          DCW      0x1cc0,0x3613
000268  0024000c          DCW      0x0024,0x000c
00026c  81173711          DCW      0x8117,0x3711
000270  002437d1          DCW      0x0024,0x37d1
000274  40244e8a          DCW      0x4024,0x4e8a
000278  00240000          DCW      0x0024,0x0000
00027c  00152800          DCW      0x0015,0x2800
000280  e845ce9a          DCW      0xe845,0xce9a
000284  00243f11          DCW      0x0024,0x3f11
000288  00243f01          DCW      0x0024,0x3f01
00028c  4024000c          DCW      0x4024,0x000c
000290  8197408a          DCW      0x8197,0x408a
000294  9bc43f15          DCW      0x9bc4,0x3f15
000298  40242800          DCW      0x4024,0x2800
00029c  ea854284          DCW      0xea85,0x4284
0002a0  3c156590          DCW      0x3c15,0x6590
0002a4  00240000          DCW      0x0024,0x0000
0002a8  00242839          DCW      0x0024,0x2839
0002ac  53d54284          DCW      0x53d5,0x4284
0002b0  00240000          DCW      0x0024,0x0000
0002b4  00242800          DCW      0x0024,0x2800
0002b8  d2d8458a          DCW      0xd2d8,0x458a
0002bc  00242a39          DCW      0x0024,0x2a39
0002c0  53c03009          DCW      0x53c0,0x3009
0002c4  38513e14          DCW      0x3851,0x3e14
0002c8  f8123e12          DCW      0xf812,0x3e12
0002cc  b8170006          DCW      0xb817,0x0006
0002d0  a0573e11          DCW      0xa057,0x3e11
0002d4  9fd30023          DCW      0x9fd3,0x0023
0002d8  ffd23e01          DCW      0xffd2,0x3e01
0002dc  00240006          DCW      0x0024,0x0006
0002e0  00113111          DCW      0x0011,0x3111
0002e4  00246498          DCW      0x0024,0x6498
0002e8  07c6868c          DCW      0x07c6,0x868c
0002ec  24443901          DCW      0x2444,0x3901
0002f0  8e060030          DCW      0x8e06,0x0030
0002f4  05513911          DCW      0x0551,0x3911
0002f8  8e063961          DCW      0x8e06,0x3961
0002fc  9c44f400          DCW      0x9c44,0xf400
000300  44c6d46c          DCW      0x44c6,0xd46c
000304  1bc436f1          DCW      0x1bc4,0x36f1
000308  bc132800          DCW      0xbc13,0x2800
00030c  f61536f2          DCW      0xf615,0x36f2
000310  9817002b          DCW      0x9817,0x002b
000314  ffd23383          DCW      0xffd2,0x3383
000318  188c3e01          DCW      0x188c,0x3e01
00031c  8c060006          DCW      0x8c06,0x0006
000320  a097468c          DCW      0xa097,0x468c
000324  bc17f400          DCW      0xbc17,0xf400
000328  41972800          DCW      0x4197,0x2800
00032c  f3043713          DCW      0xf304,0x3713
000330  00242800          DCW      0x0024,0x2800
000334  f34537e3          DCW      0xf345,0x37e3
000338  00243009          DCW      0x0024,0x3009
00033c  2c173383          DCW      0x2c17,0x3383
000340  00243009          DCW      0x0024,0x3009
000344  0c06468c          DCW      0x0c06,0x468c
000348  41970006          DCW      0x4197,0x0006
00034c  a0522800          DCW      0xa052,0x2800
000350  f5443713          DCW      0xf544,0x3713
000354  28132800          DCW      0x2813,0x2800
000358  f58537e3          DCW      0xf585,0x37e3
00035c  00243009          DCW      0x0024,0x3009
000360  2c1736f1          DCW      0x2c17,0x36f1
000364  802436f2          DCW      0x8024,0x36f2
000368  981736f4          DCW      0x9817,0x36f4
00036c  d8122100          DCW      0xd812,0x2100
000370  00003904          DCW      0x0000,0x3904
000374  5bd12a00          DCW      0x5bd1,0x2a00
000378  eb8e3e11          DCW      0xeb8e,0x3e11
00037c  78040030          DCW      0x7804,0x0030
000380  02573701          DCW      0x0257,0x3701
000384  00240013          DCW      0x0024,0x0013
000388  4d05d45b          DCW      0x4d05,0xd45b
00038c  e0e10007          DCW      0xe0e1,0x0007
000390  c7952800          DCW      0xc795,0x2800
000394  fd950fff          DCW      0xfd95,0x0fff
000398  ff453511          DCW      0xff45,0x3511
00039c  184c4488          DCW      0x184c,0x4488
0003a0  b8080006          DCW      0xb808,0x0006
0003a4  8a972800          DCW      0x8a97,0x2800
0003a8  fd453009          DCW      0xfd45,0x3009
0003ac  1c403511          DCW      0x1c40,0x3511
0003b0  1fc10000          DCW      0x1fc1,0x0000
0003b4  0020ac52          DCW      0x0020,0xac52
0003b8  14056ce2          DCW      0x1405,0x6ce2
0003bc  00240000          DCW      0x0024,0x0000
0003c0  00242800          DCW      0x0024,0x2800
0003c4  fd4168c2          DCW      0xfd41,0x68c2
0003c8  0024291a          DCW      0x0024,0x291a
0003cc  8a403e10          DCW      0x8a40,0x3e10
0003d0  00242921          DCW      0x0024,0x2921
0003d4  ca803e00          DCW      0xca80,0x3e00
0003d8  402436f3          DCW      0x4024,0x36f3
0003dc  00243009          DCW      0x0024,0x3009
0003e0  1bc836f0          DCW      0x1bc8,0x36f0
0003e4  18012808          DCW      0x1801,0x2808
0003e8  93003601          DCW      0x9300,0x3601
0003ec  58040007          DCW      0x5804,0x0007
0003f0  0001802e          DCW      0x0001,0x802e
0003f4  00060002          DCW      0x0006,0x0002
0003f8  2800f700          DCW      0x2800,0xf700
0003fc  00070001          DCW      0x0007,0x0001
000400  80500006          DCW      0x8050,0x0006
000404  00283e12          DCW      0x0028,0x3e12
000408  38002911          DCW      0x3800,0x2911
00040c  f1403e10          DCW      0xf140,0x3e10
000410  8024f400          DCW      0x8024,0xf400
000414  45953593          DCW      0x4595,0x3593
000418  002435f3          DCW      0x0024,0x35f3
00041c  00243500          DCW      0x0024,0x3500
000420  00240021          DCW      0x0024,0x0021
000424  6d82d024          DCW      0x6d82,0xd024
000428  44c00006          DCW      0x44c0,0x0006
00042c  a4022800          DCW      0xa402,0x2800
000430  1815d024          DCW      0x1815,0xd024
000434  00240000          DCW      0x0024,0x0000
000438  00002800          DCW      0x0000,0x2800
00043c  1815000b          DCW      0x1815,0x000b
000440  6d573009          DCW      0x6d57,0x3009
000444  3c0036f0          DCW      0x3c00,0x36f0
000448  802436f2          DCW      0x8024,0x36f2
00044c  18002000          DCW      0x1800,0x2000
000450  00000000          DCW      0x0000,0x0000
000454  00240007          DCW      0x0024,0x0007
000458  00018030          DCW      0x0001,0x8030
00045c  00060002          DCW      0x0006,0x0002
000460  28001400          DCW      0x2800,0x1400
000464  00070001          DCW      0x0007,0x0001
000468  80640006          DCW      0x8064,0x0006
00046c  001c3e12          DCW      0x001c,0x3e12
000470  b8173e14          DCW      0xb817,0x3e14
000474  f8123e01          DCW      0xf812,0x3e01
000478  b8110007          DCW      0xb811,0x0007
00047c  97170020          DCW      0x9717,0x0020
000480  ffd20030          DCW      0xffd2,0x0030
000484  11d13111          DCW      0x11d1,0x3111
000488  80243704          DCW      0x8024,0x3704
00048c  c0243b81          DCW      0xc024,0x3b81
000490  80243101          DCW      0x8024,0x3101
000494  80243b81          DCW      0x8024,0x3b81
000498  80243f04          DCW      0x8024,0x3f04
00049c  c0242808          DCW      0xc024,0x2808
0004a0  480036f1          DCW      0x4800,0x36f1
0004a4  98110007          DCW      0x9811,0x0007
0004a8  00018028          DCW      0x0001,0x8028
0004ac  00060002          DCW      0x0006,0x0002
0004b0  2a00190e          DCW      0x2a00,0x190e
0004b4  000a0001          DCW      0x000a,0x0001
0004b8  0300              DCW      0x0300

                          AREA ||.data||, DATA, ALIGN=0

                  vs1053ram
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  fa                DCB      0xfa

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_vs1053b.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_vs1053b_c_dece0a4d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_vs1053b_c_dece0a4d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_vs1053b_c_dece0a4d____REVSH|
#line 128
|__asm___13_bsp_vs1053b_c_dece0a4d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
