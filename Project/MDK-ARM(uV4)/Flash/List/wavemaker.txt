; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\wavemaker.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\wavemaker.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\wavemaker.crf ..\..\User\app\src\WaveMaker.c]
                          THUMB

                          AREA ||i.InitWaveMaker||, CODE, READONLY, ALIGN=2

                  InitWaveMaker PROC
;;;180    */
;;;181    void InitWaveMaker(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;182    {
;;;183    	{
;;;184    		uint32_t i;
;;;185    
;;;186    		for (i = 0; i < 32; i++)
000004  2000              MOVS     r0,#0
;;;187    		{
;;;188    			/* 调整正弦波幅度 */
;;;189    			g_Wave[i] = (g_SineWave32[i] * 8) / 10;
000006  4936              LDR      r1,|L1.224|
000008  4d36              LDR      r5,|L1.228|
00000a  b08c              SUB      sp,sp,#0x30           ;182
00000c  220a              MOVS     r2,#0xa
00000e  bf00              NOP      
                  |L1.16|
000010  f8313010          LDRH     r3,[r1,r0,LSL #1]
000014  00db              LSLS     r3,r3,#3
000016  fbb3f3f2          UDIV     r3,r3,r2
00001a  f8253010          STRH     r3,[r5,r0,LSL #1]
00001e  1c40              ADDS     r0,r0,#1
000020  2820              CMP      r0,#0x20              ;186
000022  d3f5              BCC      |L1.16|
;;;190    		}
;;;191    
;;;192    	}
;;;193    
;;;194       	/* 开启DMA, GPIO, DAC, TIM6 时钟 */
;;;195      	{
;;;196    		/* DAC Periph clock enable */
;;;197    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
000024  2101              MOVS     r1,#1
000026  0748              LSLS     r0,r1,#29
000028  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;198    		
;;;199    		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
00002c  2101              MOVS     r1,#1
00002e  2002              MOVS     r0,#2
000030  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;200    		
;;;201    	  	/* GPIOA Periph clock enable */
;;;202    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000034  2101              MOVS     r1,#1
000036  2004              MOVS     r0,#4
000038  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;203    		
;;;204    		/* TIM6 Periph clock enable */
;;;205    		//RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;206    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  2010              MOVS     r0,#0x10
000040  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;207    	}
;;;208    	
;;;209    	/* 配置GPIO.  */
;;;210    	{
;;;211    		GPIO_InitTypeDef GPIO_InitStructure;
;;;212    
;;;213    	//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;214    
;;;215    		/* 配置PA4为DAC_OUT1 */
;;;216    		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
000044  2610              MOVS     r6,#0x10
000046  f8ad6000          STRH     r6,[sp,#0]
;;;217    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00004a  2400              MOVS     r4,#0
00004c  f88d4003          STRB     r4,[sp,#3]
;;;218    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000050  4669              MOV      r1,sp
000052  4825              LDR      r0,|L1.232|
000054  f7fffffe          BL       GPIO_Init
;;;219    	}
;;;220    
;;;221    	/* TIM6 Configuration */
;;;222    	#if 1 /* 用TIM6, IAR下不产生波形 */
;;;223    	{
;;;224    	//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
;;;225    
;;;226    		TIM_PrescalerConfig(TIM6, 0, TIM_PSCReloadMode_Update);
000058  f8df8090          LDR      r8,|L1.236|
00005c  2200              MOVS     r2,#0
00005e  4611              MOV      r1,r2
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       TIM_PrescalerConfig
;;;227    
;;;228    		/* 决定DAC输出的采样频率
;;;229    		  x = 72000000 / 频率
;;;230    		*/
;;;231    		//TIM_SetAutoreload(TIM6, 562);	   /* 562 输出1KHz的正弦波 */
;;;232    		//TIM_SetAutoreload(TIM6, 22);	   /* 22 输出100KHz的正弦波 */
;;;233    		TIM_SetAutoreload(TIM6, 220);	   /* 22 输出10KHz的正弦波 */
000066  21dc              MOVS     r1,#0xdc
000068  4640              MOV      r0,r8
00006a  f7fffffe          BL       TIM_SetAutoreload
;;;234    
;;;235    		/* TIM6 TRGO selection */
;;;236    		TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
00006e  2120              MOVS     r1,#0x20
000070  4640              MOV      r0,r8
000072  f7fffffe          BL       TIM_SelectOutputTrigger
;;;237    
;;;238    	}
;;;239    	#else
;;;240    	{
;;;241    		TIM_TimeBaseInitTypeDef    TIM_TimeBaseStructure;
;;;242    	  
;;;243    		/* TIM2 Configuration */
;;;244    		/* Time base configuration */
;;;245    		TIM_TimeBaseStructInit(&TIM_TimeBaseStructure); 
;;;246    		TIM_TimeBaseStructure.TIM_Period = 0x19;          
;;;247    		TIM_TimeBaseStructure.TIM_Prescaler = 0x0;       
;;;248    		TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    
;;;249    		TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  
;;;250    		TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
;;;251    		
;;;252    		/* TIM2 TRGO selection */
;;;253    		TIM_SelectOutputTrigger(TIM2, TIM_TRGOSource_Update);	  
;;;254    	}
;;;255    	#endif
;;;256    
;;;257    	/* DAC channel1 Configuration */
;;;258    	{
;;;259    		DAC_InitTypeDef DAC_InitStructure;
;;;260    
;;;261    //		DAC_StructInit(&DAC_InitStructure);
;;;262    //		RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
;;;263    
;;;264    		DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
000076  2004              MOVS     r0,#4
000078  e9cd0400          STRD     r0,r4,[sp,#0]
;;;265    		//DAC_InitStructure.DAC_Trigger = DAC_Trigger_T2_TRGO;
;;;266    		DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
;;;267    		DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
;;;268    		DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
00007c  2002              MOVS     r0,#2
;;;269    		DAC_Init(DAC_Channel_1, &DAC_InitStructure);
00007e  e9cd4002          STRD     r4,r0,[sp,#8]
000082  4669              MOV      r1,sp
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       DAC_Init
;;;270    	}
;;;271    
;;;272    	/* Enable DAC Channel1: Once the DAC channel1 is enabled, PA.04 is
;;;273    	 automatically connected to the DAC converter. */
;;;274    	DAC_Cmd(DAC_Channel_1, ENABLE);
00008a  2101              MOVS     r1,#1
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       DAC_Cmd
;;;275    	
;;;276    	/* DMA2 channel3 configuration */
;;;277    	{
;;;278    		DMA_InitTypeDef DMA_InitStructure;
;;;279    
;;;280    //		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
;;;281    
;;;282    		DMA_DeInit(DMA2_Channel3);
000092  4f17              LDR      r7,|L1.240|
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       DMA_DeInit
;;;283    		DMA_InitStructure.DMA_PeripheralBaseAddr = DAC_DHR12R1_Address;
00009a  4816              LDR      r0,|L1.244|
;;;284    		DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&g_Wave;
;;;285    		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
;;;286    		DMA_InitStructure.DMA_BufferSize = 32;
;;;287    		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;288    		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00009c  2180              MOVS     r1,#0x80
00009e  e88d0061          STM      sp,{r0,r5,r6}         ;283
0000a2  e9cd4104          STRD     r4,r1,[sp,#0x10]
0000a6  2020              MOVS     r0,#0x20              ;286
;;;289    		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
0000a8  00c1              LSLS     r1,r0,#3
;;;290    		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
0000aa  9106              STR      r1,[sp,#0x18]
0000ac  9003              STR      r0,[sp,#0xc]          ;288
0000ae  0141              LSLS     r1,r0,#5
0000b0  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;291    		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
;;;292    		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
0000b4  0200              LSLS     r0,r0,#8
;;;293    		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;294    		DMA_Init(DMA2_Channel3, &DMA_InitStructure);
0000b6  e9cd0409          STRD     r0,r4,[sp,#0x24]
0000ba  4669              MOV      r1,sp
0000bc  4638              MOV      r0,r7
0000be  f7fffffe          BL       DMA_Init
;;;295    
;;;296    		/* Enable DMA2 Channel3 */
;;;297    		DMA_Cmd(DMA2_Channel3, ENABLE);
0000c2  2101              MOVS     r1,#1
0000c4  4638              MOV      r0,r7
0000c6  f7fffffe          BL       DMA_Cmd
;;;298    	}
;;;299    
;;;300    	/* Enable DMA for DAC Channel1 */
;;;301    	DAC_DMACmd(DAC_Channel_1, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  2000              MOVS     r0,#0
0000ce  f7fffffe          BL       DAC_DMACmd
;;;302    
;;;303    	/* TIM6 enable counter */
;;;304    	TIM_Cmd(TIM6, ENABLE);
0000d2  b00c              ADD      sp,sp,#0x30
0000d4  4640              MOV      r0,r8
0000d6  e8bd41f0          POP      {r4-r8,lr}
0000da  2101              MOVS     r1,#1
0000dc  f7ffbffe          B.W      TIM_Cmd
;;;305    	//TIM_Cmd(TIM2, ENABLE);
;;;306    
;;;307    	//ENABLE_INT();	/* 使能全局中断 */	
;;;308    }
;;;309    
                          ENDP

                  |L1.224|
                          DCD      ||area_number.7||
                  |L1.228|
                          DCD      ||.bss||
                  |L1.232|
                          DCD      0x40010800
                  |L1.236|
                          DCD      0x40001000
                  |L1.240|
                          DCD      0x40020430
                  |L1.244|
                          DCD      0x40007408

                          AREA ||i.SetupWaveType||, CODE, READONLY, ALIGN=2

                  SetupWaveType PROC
;;;318    */
;;;319    void SetupWaveType(uint8_t _type)
000000  b570              PUSH     {r4-r6,lr}
;;;320    {
;;;321    	/*
;;;322    		计算波形幅度。
;;;323    		DAC寄存器最大值 4096 对应3.3V
;;;324    
;;;325    		我们期望获得2V的幅度，系数 = 0.606
;;;326    		4096 * 0.606 = 2482
;;;327    	*/
;;;328    	TIM_Cmd(TIM6, DISABLE);
000002  4c19              LDR      r4,|L2.104|
000004  4605              MOV      r5,r0                 ;320
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       TIM_Cmd
;;;329    	switch (_type)
;;;330    	{
;;;331    		case WT_SIN:	/* 正弦波 */
;;;332    			{
;;;333    				uint32_t i;
;;;334    
;;;335    				for (i = 0; i < 128; i++)
;;;336    				{
;;;337    					/* 调整正弦波幅度 */
;;;338    					g_Wave[i] = (g_SineWave32[i] * 606) / 1000;
00000e  4917              LDR      r1,|L2.108|
000010  b115              CBZ      r5,|L2.24|
000012  2d01              CMP      r5,#1                 ;329
000014  d121              BNE      |L2.90|
000016  e010              B        |L2.58|
                  |L2.24|
000018  4815              LDR      r0,|L2.112|
00001a  2200              MOVS     r2,#0                 ;335
00001c  f44f737a          MOV      r3,#0x3e8
                  |L2.32|
000020  f8305012          LDRH     r5,[r0,r2,LSL #1]
000024  f240265e          MOV      r6,#0x25e
000028  4375              MULS     r5,r6,r5
00002a  fbb5f5f3          UDIV     r5,r5,r3
00002e  f8215012          STRH     r5,[r1,r2,LSL #1]
000032  1c52              ADDS     r2,r2,#1
000034  2a80              CMP      r2,#0x80              ;335
000036  d3f3              BCC      |L2.32|
000038  e00f              B        |L2.90|
                  |L2.58|
;;;339    				}
;;;340    
;;;341    			}
;;;342    			break;
;;;343    
;;;344    		case WT_RECT:	/* 方波 */
;;;345    			{
;;;346    				uint32_t i;
;;;347    
;;;348    				for (i = 0; i < 64; i++)
00003a  2200              MOVS     r2,#0
00003c  ea4f0002          MOV.W    r0,r2
                  |L2.64|
;;;349    				{
;;;350    					g_Wave[i] = 0;
000040  f8210012          STRH     r0,[r1,r2,LSL #1]
000044  1c52              ADDS     r2,r2,#1
000046  2a40              CMP      r2,#0x40              ;348
000048  d3fa              BCC      |L2.64|
;;;351    				}
;;;352    
;;;353    				for (i = 0; i < 64; i++)
00004a  2000              MOVS     r0,#0
;;;354    				{
;;;355    					g_Wave[i] = 2482;
00004c  f64012b2          MOV      r2,#0x9b2
                  |L2.80|
000050  f8212010          STRH     r2,[r1,r0,LSL #1]
000054  1c40              ADDS     r0,r0,#1
000056  2840              CMP      r0,#0x40              ;353
000058  d3fa              BCC      |L2.80|
                  |L2.90|
;;;356    				}
;;;357    			}
;;;358    			break;
;;;359    	}
;;;360    
;;;361    
;;;362        TIM_Cmd(TIM6, ENABLE);
00005a  4620              MOV      r0,r4
00005c  e8bd4070          POP      {r4-r6,lr}
000060  2101              MOVS     r1,#1
000062  f7ffbffe          B.W      TIM_Cmd
;;;363    }
;;;364    
                          ENDP

000066  0000              DCW      0x0000
                  |L2.104|
                          DCD      0x40001000
                  |L2.108|
                          DCD      ||.bss||
                  |L2.112|
                          DCD      ||area_number.7||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_Wave
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  g_SineWave128
000000  07ff0863          DCW      0x07ff,0x0863
000004  08c8092b          DCW      0x08c8,0x092b
000008  098e09f0          DCW      0x098e,0x09f0
00000c  0a510ab1          DCW      0x0a51,0x0ab1
000010  0b0e0b6a          DCW      0x0b0e,0x0b6a
000014  0bc40c1b          DCW      0x0bc4,0x0c1b
000018  0c700cc2          DCW      0x0c70,0x0cc2
00001c  0d120d5e          DCW      0x0d12,0x0d5e
000020  0da60dec          DCW      0x0da6,0x0dec
000024  0e2d0e6b          DCW      0x0e2d,0x0e6b
000028  0ea50edb          DCW      0x0ea5,0x0edb
00002c  0f0c0f39          DCW      0x0f0c,0x0f39
000030  0f620f86          DCW      0x0f62,0x0f86
000034  0fa60fc1          DCW      0x0fa6,0x0fc1
000038  0fd70fe8          DCW      0x0fd7,0x0fe8
00003c  0ff40ffc          DCW      0x0ff4,0x0ffc
000040  0ffe0ffc          DCW      0x0ffe,0x0ffc
000044  0ff40fe8          DCW      0x0ff4,0x0fe8
000048  0fd70fc1          DCW      0x0fd7,0x0fc1
00004c  0fa60f86          DCW      0x0fa6,0x0f86
000050  0f620f39          DCW      0x0f62,0x0f39
000054  0f0c0edb          DCW      0x0f0c,0x0edb
000058  0ea50e6b          DCW      0x0ea5,0x0e6b
00005c  0e2d0dec          DCW      0x0e2d,0x0dec
000060  0da60d5e          DCW      0x0da6,0x0d5e
000064  0d120cc2          DCW      0x0d12,0x0cc2
000068  0c700c1b          DCW      0x0c70,0x0c1b
00006c  0bc40b6a          DCW      0x0bc4,0x0b6a
000070  0b0e0ab1          DCW      0x0b0e,0x0ab1
000074  0a5109f0          DCW      0x0a51,0x09f0
000078  098e092b          DCW      0x098e,0x092b
00007c  08c80863          DCW      0x08c8,0x0863
000080  07ff079b          DCW      0x07ff,0x079b
000084  073606d3          DCW      0x0736,0x06d3
000088  0670060e          DCW      0x0670,0x060e
00008c  05ad054d          DCW      0x05ad,0x054d
000090  04f00494          DCW      0x04f0,0x0494
000094  043a03e3          DCW      0x043a,0x03e3
000098  038e033c          DCW      0x038e,0x033c
00009c  02ec02a0          DCW      0x02ec,0x02a0
0000a0  02580212          DCW      0x0258,0x0212
0000a4  01d10193          DCW      0x01d1,0x0193
0000a8  01590123          DCW      0x0159,0x0123
0000ac  00f200c5          DCW      0x00f2,0x00c5
0000b0  009c0078          DCW      0x009c,0x0078
0000b4  0058003d          DCW      0x0058,0x003d
0000b8  00270016          DCW      0x0027,0x0016
0000bc  000a0002          DCW      0x000a,0x0002
0000c0  00000002          DCW      0x0000,0x0002
0000c4  000a0016          DCW      0x000a,0x0016
0000c8  0027003d          DCW      0x0027,0x003d
0000cc  00580078          DCW      0x0058,0x0078
0000d0  009c00c5          DCW      0x009c,0x00c5
0000d4  00f20123          DCW      0x00f2,0x0123
0000d8  01590193          DCW      0x0159,0x0193
0000dc  01d10212          DCW      0x01d1,0x0212
0000e0  025802a0          DCW      0x0258,0x02a0
0000e4  02ec033c          DCW      0x02ec,0x033c
0000e8  038e03e3          DCW      0x038e,0x03e3
0000ec  043a0494          DCW      0x043a,0x0494
0000f0  04f0054d          DCW      0x04f0,0x054d
0000f4  05ad060e          DCW      0x05ad,0x060e
0000f8  067006d3          DCW      0x0670,0x06d3
0000fc  0736079b          DCW      0x0736,0x079b

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.constdata||
                  g_SineWave32
000000  07ff098f          DCW      0x07ff,0x098f
000004  0b0f0c71          DCW      0x0b0f,0x0c71
000008  0daa0ea6          DCW      0x0daa,0x0ea6
00000c  0f630fd8          DCW      0x0f63,0x0fd8
000010  0fff0fd8          DCW      0x0fff,0x0fd8
000014  0f630ea6          DCW      0x0f63,0x0ea6
000018  0da70c71          DCW      0x0da7,0x0c71
00001c  0b0f098f          DCW      0x0b0f,0x098f
000020  07ff066f          DCW      0x07ff,0x066f
000024  04ef038d          DCW      0x04ef,0x038d
000028  02570158          DCW      0x0257,0x0158
00002c  009b0026          DCW      0x009b,0x0026
000030  00000026          DCW      0x0000,0x0026
000034  009b0158          DCW      0x009b,0x0158
000038  0257038d          DCW      0x0257,0x038d
00003c  04ef066f          DCW      0x04ef,0x066f

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.constdata||
                  g_SineWave32_FangBo
000000  00000000          DCW      0x0000,0x0000
000004  00000000          DCW      0x0000,0x0000
000008  00000000          DCW      0x0000,0x0000
00000c  00000000          DCW      0x0000,0x0000
000010  00000000          DCW      0x0000,0x0000
000014  00000000          DCW      0x0000,0x0000
000018  00000000          DCW      0x0000,0x0000
00001c  00000000          DCW      0x0000,0x0000
000020  0fff0fff          DCW      0x0fff,0x0fff
000024  0fff0fff          DCW      0x0fff,0x0fff
000028  0fff0fff          DCW      0x0fff,0x0fff
00002c  0fff0fff          DCW      0x0fff,0x0fff
000030  0fff0fff          DCW      0x0fff,0x0fff
000034  0fff0fff          DCW      0x0fff,0x0fff
000038  0fff0fff          DCW      0x0fff,0x0fff
00003c  0fff0fff          DCW      0x0fff,0x0fff

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\WaveMaker.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_WaveMaker_c_4d74455f____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_WaveMaker_c_4d74455f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_WaveMaker_c_4d74455f____REVSH|
#line 128
|__asm___11_WaveMaker_c_4d74455f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
