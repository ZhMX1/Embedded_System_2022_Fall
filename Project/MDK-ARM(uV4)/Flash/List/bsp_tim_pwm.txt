; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tim_pwm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tim_pwm.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_tim_pwm.crf ..\..\User\bsp\src\bsp_tim_pwm.c]
                          THUMB

                          AREA ||i.bsp_ConfigGpioOut||, CODE, READONLY, ALIGN=1

                  bsp_ConfigGpioOut PROC
;;;234    */
;;;235    void bsp_ConfigGpioOut(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX)
000000  b538              PUSH     {r3-r5,lr}
;;;236    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;237    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;238    
;;;239    	/* 使能GPIO时钟 */
;;;240    	RCC_APB2PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000006  f7fffffe          BL       bsp_GetRCCofGPIO
00000a  2101              MOVS     r1,#1
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;241    
;;;242    	/* 配置GPIO */
;;;243    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;		/* 带入的形参 */
000010  f8ad4000          STRH     r4,[sp,#0]
;;;244    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 输出 */
000014  2010              MOVS     r0,#0x10
000016  f88d0003          STRB     r0,[sp,#3]
;;;245    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0002          STRB     r0,[sp,#2]
;;;246    	GPIO_Init(GPIOx, &GPIO_InitStructure);
000020  4669              MOV      r1,sp
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       GPIO_Init
;;;247    }
000028  bd38              POP      {r3-r5,pc}
;;;248    
                          ENDP


                          AREA ||i.bsp_ConfigTimGpio||, CODE, READONLY, ALIGN=2

                  bsp_ConfigTimGpio PROC
;;;201    */
;;;202    void bsp_ConfigTimGpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX, TIM_TypeDef* TIMx, uint8_t _ucChannel)
000000  b5f8              PUSH     {r3-r7,lr}
;;;203    {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;204    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;205    
;;;206    	/* 使能GPIO时钟 */
;;;207    	RCC_APB2PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000008  f7fffffe          BL       bsp_GetRCCofGPIO
00000c  2101              MOVS     r1,#1
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;208    
;;;209      	/* 使能TIM时钟 */
;;;210    	if ((TIMx == TIM1) || (TIMx == TIM8))
000012  4810              LDR      r0,|L2.84|
000014  4284              CMP      r4,r0
000016  d002              BEQ      |L2.30|
000018  480f              LDR      r0,|L2.88|
00001a  4284              CMP      r4,r0
00001c  d106              BNE      |L2.44|
                  |L2.30|
;;;211    	{
;;;212    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       bsp_GetRCCofTIM
000024  2101              MOVS     r1,#1
000026  f7fffffe          BL       RCC_APB2PeriphClockCmd
00002a  e005              B        |L2.56|
                  |L2.44|
;;;213    	}
;;;214    	else
;;;215    	{
;;;216    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       bsp_GetRCCofTIM
000032  2101              MOVS     r1,#1
000034  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.56|
;;;217    	}
;;;218    
;;;219    	/* 配置GPIO */
;;;220    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;
000038  f8ad5000          STRH     r5,[sp,#0]
;;;221    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;		/* 复用功能 */
00003c  2018              MOVS     r0,#0x18
00003e  f88d0003          STRB     r0,[sp,#3]
;;;222    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000042  2003              MOVS     r0,#3
000044  f88d0002          STRB     r0,[sp,#2]
;;;223    	GPIO_Init(GPIOx, &GPIO_InitStructure); 
000048  4669              MOV      r1,sp
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       GPIO_Init
;;;224    }
000050  bdf8              POP      {r3-r7,pc}
;;;225    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40012c00
                  |L2.88|
                          DCD      0x40013400

                          AREA ||i.bsp_GetRCCofGPIO||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofGPIO PROC
;;;77     */
;;;78     uint32_t bsp_GetRCCofGPIO(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;79     {
;;;80     	uint32_t rcc = 0;
;;;81     
;;;82     	if (GPIOx == GPIOA)
000002  4a12              LDR      r2,|L3.76|
000004  2000              MOVS     r0,#0                 ;80
000006  4291              CMP      r1,r2
000008  d101              BNE      |L3.14|
;;;83     	{
;;;84     		rcc = RCC_APB2Periph_GPIOA;
00000a  2004              MOVS     r0,#4
;;;85     	}
;;;86     	else if (GPIOx == GPIOB)
;;;87     	{
;;;88     		rcc = RCC_APB2Periph_GPIOB;
;;;89     	}
;;;90     	else if (GPIOx == GPIOC)
;;;91     	{
;;;92     		rcc = RCC_APB2Periph_GPIOC;
;;;93     	}
;;;94     	else if (GPIOx == GPIOD)
;;;95     	{
;;;96     		rcc = RCC_APB2Periph_GPIOD;
;;;97     	}
;;;98     	else if (GPIOx == GPIOE)
;;;99     	{
;;;100    		rcc = RCC_APB2Periph_GPIOE;
;;;101    	}
;;;102    	else if (GPIOx == GPIOF)
;;;103    	{
;;;104    		rcc = RCC_APB2Periph_GPIOF;
;;;105    	}
;;;106    	else if (GPIOx == GPIOG)
;;;107    	{
;;;108    		rcc = RCC_APB2Periph_GPIOG;
;;;109    	}
;;;110    
;;;111    	return rcc;
;;;112    }
00000c  4770              BX       lr
                  |L3.14|
00000e  4a10              LDR      r2,|L3.80|
000010  4291              CMP      r1,r2                 ;86
000012  d101              BNE      |L3.24|
000014  2008              MOVS     r0,#8                 ;88
000016  4770              BX       lr
                  |L3.24|
000018  4a0e              LDR      r2,|L3.84|
00001a  4291              CMP      r1,r2                 ;90
00001c  d101              BNE      |L3.34|
00001e  2010              MOVS     r0,#0x10              ;92
000020  4770              BX       lr
                  |L3.34|
000022  4a0d              LDR      r2,|L3.88|
000024  4291              CMP      r1,r2                 ;94
000026  d101              BNE      |L3.44|
000028  2020              MOVS     r0,#0x20              ;96
00002a  4770              BX       lr
                  |L3.44|
00002c  4a0b              LDR      r2,|L3.92|
00002e  4291              CMP      r1,r2                 ;98
000030  d101              BNE      |L3.54|
000032  2040              MOVS     r0,#0x40              ;100
000034  4770              BX       lr
                  |L3.54|
000036  4a0a              LDR      r2,|L3.96|
000038  4291              CMP      r1,r2                 ;102
00003a  d101              BNE      |L3.64|
00003c  2080              MOVS     r0,#0x80              ;104
                  |L3.62|
00003e  4770              BX       lr
                  |L3.64|
000040  4a08              LDR      r2,|L3.100|
000042  4291              CMP      r1,r2                 ;106
000044  d1fb              BNE      |L3.62|
000046  1588              ASRS     r0,r1,#22             ;108
000048  4770              BX       lr
;;;113    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0x40010800
                  |L3.80|
                          DCD      0x40010c00
                  |L3.84|
                          DCD      0x40011000
                  |L3.88|
                          DCD      0x40011400
                  |L3.92|
                          DCD      0x40011800
                  |L3.96|
                          DCD      0x40011c00
                  |L3.100|
                          DCD      0x40012000

                          AREA ||i.bsp_GetRCCofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofTIM PROC
;;;121    */
;;;122    uint32_t bsp_GetRCCofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;123    {
;;;124    	uint32_t rcc = 0;
;;;125    
;;;126    	/*
;;;127    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;128    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;129    	*/
;;;130    	if (TIMx == TIM1)
000002  4a25              LDR      r2,|L4.152|
000004  2000              MOVS     r0,#0                 ;124
000006  4291              CMP      r1,r2
000008  d101              BNE      |L4.14|
;;;131    	{
;;;132    		rcc = RCC_APB2Periph_TIM1;
00000a  14c8              ASRS     r0,r1,#19
;;;133    	}
;;;134    	else if (TIMx == TIM8)
;;;135    	{
;;;136    		rcc = RCC_APB2Periph_TIM8;
;;;137    	}
;;;138    	else if (TIMx == TIM9)
;;;139    	{
;;;140    		rcc = RCC_APB2Periph_TIM9;
;;;141    	}
;;;142    	else if (TIMx == TIM10)
;;;143    	{
;;;144    		rcc = RCC_APB2Periph_TIM10;
;;;145    	}
;;;146    	else if (TIMx == TIM11)
;;;147    	{
;;;148    		rcc = RCC_APB2Periph_TIM11;
;;;149    	}
;;;150    	/* 下面是 APB1时钟 */
;;;151    	else if (TIMx == TIM2)
;;;152    	{
;;;153    		rcc = RCC_APB1Periph_TIM2;
;;;154    	}
;;;155    	else if (TIMx == TIM3)
;;;156    	{
;;;157    		rcc = RCC_APB1Periph_TIM3;
;;;158    	}
;;;159    	else if (TIMx == TIM4)
;;;160    	{
;;;161    		rcc = RCC_APB1Periph_TIM4;
;;;162    	}
;;;163    	else if (TIMx == TIM5)
;;;164    	{
;;;165    		rcc = RCC_APB1Periph_TIM5;
;;;166    	}
;;;167    	else if (TIMx == TIM6)
;;;168    	{
;;;169    		rcc = RCC_APB1Periph_TIM6;
;;;170    	}
;;;171    	else if (TIMx == TIM7)
;;;172    	{
;;;173    		rcc = RCC_APB1Periph_TIM7;
;;;174    	}
;;;175    	else if (TIMx == TIM12)
;;;176    	{
;;;177    		rcc = RCC_APB1Periph_TIM12;
;;;178    	}
;;;179    	else if (TIMx == TIM13)
;;;180    	{
;;;181    		rcc = RCC_APB1Periph_TIM13;
;;;182    	}
;;;183    	else if (TIMx == TIM14)
;;;184    	{
;;;185    		rcc = RCC_APB1Periph_TIM14;
;;;186    	}
;;;187    
;;;188    	return rcc;
;;;189    }
00000c  4770              BX       lr
                  |L4.14|
00000e  4a23              LDR      r2,|L4.156|
000010  4291              CMP      r1,r2                 ;134
000012  d101              BNE      |L4.24|
000014  1448              ASRS     r0,r1,#17             ;136
000016  4770              BX       lr
                  |L4.24|
000018  4a21              LDR      r2,|L4.160|
00001a  4291              CMP      r1,r2                 ;138
00001c  d102              BNE      |L4.36|
00001e  f44f2000          MOV      r0,#0x80000           ;140
000022  4770              BX       lr
                  |L4.36|
000024  4a1f              LDR      r2,|L4.164|
000026  4291              CMP      r1,r2                 ;142
000028  d102              BNE      |L4.48|
00002a  f44f1080          MOV      r0,#0x100000          ;144
00002e  4770              BX       lr
                  |L4.48|
000030  4a1d              LDR      r2,|L4.168|
000032  4291              CMP      r1,r2                 ;146
000034  d102              BNE      |L4.60|
000036  f44f1000          MOV      r0,#0x200000          ;148
00003a  4770              BX       lr
                  |L4.60|
00003c  f1b14f80          CMP      r1,#0x40000000        ;151
000040  d004              BEQ      |L4.76|
000042  4a1a              LDR      r2,|L4.172|
000044  4291              CMP      r1,r2                 ;155
000046  d103              BNE      |L4.80|
000048  2002              MOVS     r0,#2                 ;157
00004a  4770              BX       lr
                  |L4.76|
00004c  2001              MOVS     r0,#1                 ;153
00004e  4770              BX       lr
                  |L4.80|
000050  4a17              LDR      r2,|L4.176|
000052  4291              CMP      r1,r2                 ;159
000054  d101              BNE      |L4.90|
000056  2004              MOVS     r0,#4                 ;161
000058  4770              BX       lr
                  |L4.90|
00005a  4a16              LDR      r2,|L4.180|
00005c  4291              CMP      r1,r2                 ;163
00005e  d101              BNE      |L4.100|
000060  2008              MOVS     r0,#8                 ;165
000062  4770              BX       lr
                  |L4.100|
000064  4a14              LDR      r2,|L4.184|
000066  4291              CMP      r1,r2                 ;167
000068  d101              BNE      |L4.110|
00006a  2010              MOVS     r0,#0x10              ;169
00006c  4770              BX       lr
                  |L4.110|
00006e  4a13              LDR      r2,|L4.188|
000070  4291              CMP      r1,r2                 ;171
000072  d101              BNE      |L4.120|
000074  2020              MOVS     r0,#0x20              ;173
000076  4770              BX       lr
                  |L4.120|
000078  4a11              LDR      r2,|L4.192|
00007a  4291              CMP      r1,r2                 ;175
00007c  d101              BNE      |L4.130|
00007e  2040              MOVS     r0,#0x40              ;177
000080  4770              BX       lr
                  |L4.130|
000082  4a10              LDR      r2,|L4.196|
000084  4291              CMP      r1,r2                 ;179
000086  d101              BNE      |L4.140|
000088  2080              MOVS     r0,#0x80              ;181
                  |L4.138|
00008a  4770              BX       lr
                  |L4.140|
00008c  4a0e              LDR      r2,|L4.200|
00008e  4291              CMP      r1,r2                 ;183
000090  d1fb              BNE      |L4.138|
000092  1588              ASRS     r0,r1,#22             ;185
000094  4770              BX       lr
;;;190    
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      0x40012c00
                  |L4.156|
                          DCD      0x40013400
                  |L4.160|
                          DCD      0x40014c00
                  |L4.164|
                          DCD      0x40015000
                  |L4.168|
                          DCD      0x40015400
                  |L4.172|
                          DCD      0x40000400
                  |L4.176|
                          DCD      0x40000800
                  |L4.180|
                          DCD      0x40000c00
                  |L4.184|
                          DCD      0x40001000
                  |L4.188|
                          DCD      0x40001400
                  |L4.192|
                          DCD      0x40001800
                  |L4.196|
                          DCD      0x40001c00
                  |L4.200|
                          DCD      0x40002000

                          AREA ||i.bsp_SetTIMOutPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM PROC
;;;258    */
;;;259    void bsp_SetTIMOutPWM(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;260    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;261    {
000004  b087              SUB      sp,sp,#0x1c
000006  4682              MOV      r10,r0
000008  e9dd5810          LDRD     r5,r8,[sp,#0x40]
00000c  461f              MOV      r7,r3
00000e  4614              MOV      r4,r2
000010  460e              MOV      r6,r1
;;;262    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;263    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;264    	uint16_t usPeriod;
;;;265    	uint16_t usPrescaler;
;;;266    	uint32_t uiTIMxCLK;
;;;267    
;;;268    	if (_ulDutyCycle == 0)
000012  ea5f0008          MOVS     r0,r8
000016  d013              BEQ      |L5.64|
;;;269    	{		
;;;270    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;271    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;272    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
;;;273    		return;
;;;274    	}
;;;275    	else if (_ulDutyCycle == 10000)
000018  f2427910          MOV      r9,#0x2710
00001c  45c8              CMP      r8,r9
00001e  d119              BNE      |L5.84|
;;;276    	{
;;;277    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000020  2100              MOVS     r1,#0
000022  4610              MOV      r0,r2
000024  f7fffffe          BL       TIM_Cmd
;;;278    
;;;279    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
000028  4631              MOV      r1,r6
00002a  4650              MOV      r0,r10
00002c  f7fffffe          BL       bsp_ConfigGpioOut
;;;280    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
000030  2201              MOVS     r2,#1
                  |L5.50|
000032  4631              MOV      r1,r6
000034  4650              MOV      r0,r10
000036  f7fffffe          BL       GPIO_WriteBit
                  |L5.58|
;;;281    		return;
;;;282    	}
;;;283    	
;;;284    
;;;285    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;286    	
;;;287        /*-----------------------------------------------------------------------
;;;288    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;289    
;;;290    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;291    		PCLK2 = HCLK / 2      (APB2Periph)
;;;292    		PCLK1 = HCLK / 4      (APB1Periph)
;;;293    
;;;294    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;295    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;296    
;;;297    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;298    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;299    
;;;300    	----------------------------------------------------------------------- */
;;;301    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;302    	{
;;;303    		/* APB2 定时器 */
;;;304    		uiTIMxCLK = SystemCoreClock;
;;;305    	}
;;;306    	else	/* APB1 定时器 */
;;;307    	{
;;;308    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;309    	}
;;;310    
;;;311    	if (_ulFreq < 100)
;;;312    	{
;;;313    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;314    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;315    	}
;;;316    	else if (_ulFreq < 3000)
;;;317    	{
;;;318    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;319    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;320    	}
;;;321    	else	/* 大于4K的频率，无需分频 */
;;;322    	{
;;;323    		usPrescaler = 0;					/* 分频比 = 1 */
;;;324    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;325    	}
;;;326    
;;;327    	/* Time base configuration */
;;;328    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;329    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;330    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;331    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;332    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;333    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;334    
;;;335    	/* PWM1 Mode configuration: Channel1 */
;;;336    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */
;;;337    	
;;;338    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;339    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;340    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;341    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;342    	
;;;343    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;	/* only for TIM1 and TIM8. */	
;;;344    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;345    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;346    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;347    	
;;;348    	if (_ucChannel == 1)
;;;349    	{
;;;350    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;351    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;352    	}
;;;353    	else if (_ucChannel == 2)
;;;354    	{
;;;355    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;356    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;357    	}
;;;358    	else if (_ucChannel == 3)
;;;359    	{
;;;360    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;361    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;362    	}
;;;363    	else if (_ucChannel == 4)
;;;364    	{
;;;365    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;366    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;367    	}
;;;368    
;;;369    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;370    
;;;371    	/* TIMx enable counter */
;;;372    	TIM_Cmd(TIMx, ENABLE);
;;;373    
;;;374    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;375    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;376    	{
;;;377    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;378    	}
;;;379    }
00003a  b007              ADD      sp,sp,#0x1c
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.64|
000040  2100              MOVS     r1,#0                 ;270
000042  4610              MOV      r0,r2                 ;270
000044  f7fffffe          BL       TIM_Cmd
000048  4631              MOV      r1,r6                 ;271
00004a  4650              MOV      r0,r10                ;271
00004c  f7fffffe          BL       bsp_ConfigGpioOut
000050  2200              MOVS     r2,#0                 ;272
000052  e7ee              B        |L5.50|
                  |L5.84|
000054  4631              MOV      r1,r6                 ;285
000056  4650              MOV      r0,r10                ;285
000058  f7fffffe          BL       bsp_ConfigTimGpio
00005c  f8dfa110          LDR      r10,|L5.368|
000060  4844              LDR      r0,|L5.372|
000062  f8dfb114          LDR      r11,|L5.376|
000066  4554              CMP      r4,r10                ;301
000068  d005              BEQ      |L5.118|
00006a  455c              CMP      r4,r11                ;301
00006c  d003              BEQ      |L5.118|
00006e  4943              LDR      r1,|L5.380|
000070  428c              CMP      r4,r1                 ;301
000072  d000              BEQ      |L5.118|
000074  4942              LDR      r1,|L5.384|
                  |L5.118|
000076  6800              LDR      r0,[r0,#0]            ;308  ; SystemCoreClock
000078  2d64              CMP      r5,#0x64              ;311
00007a  d204              BCS      |L5.134|
00007c  fbb0f0f9          UDIV     r0,r0,r9              ;314
000080  f242710f          MOV      r1,#0x270f            ;313
000084  e009              B        |L5.154|
                  |L5.134|
000086  f64031b8          MOV      r1,#0xbb8             ;316
00008a  428d              CMP      r5,r1                 ;316
00008c  d204              BCS      |L5.152|
00008e  2163              MOVS     r1,#0x63              ;318
000090  2264              MOVS     r2,#0x64              ;319
000092  fbb0f0f2          UDIV     r0,r0,r2              ;319
000096  e000              B        |L5.154|
                  |L5.152|
000098  2100              MOVS     r1,#0                 ;323
                  |L5.154|
00009a  fbb0f0f5          UDIV     r0,r0,r5              ;319
00009e  1e40              SUBS     r0,r0,#1              ;319
0000a0  b286              UXTH     r6,r0                 ;319
0000a2  2500              MOVS     r5,#0                 ;330
0000a4  f8ad1010          STRH     r1,[sp,#0x10]         ;329
0000a8  f8ad6014          STRH     r6,[sp,#0x14]         ;328
0000ac  f8ad5016          STRH     r5,[sp,#0x16]         ;330
0000b0  f8ad5012          STRH     r5,[sp,#0x12]         ;331
0000b4  f88d5018          STRB     r5,[sp,#0x18]         ;332
0000b8  a904              ADD      r1,sp,#0x10           ;333
0000ba  4620              MOV      r0,r4                 ;333
0000bc  f7fffffe          BL       TIM_TimeBaseInit
0000c0  4668              MOV      r0,sp                 ;336
0000c2  f7fffffe          BL       TIM_OCStructInit
0000c6  2060              MOVS     r0,#0x60              ;338
0000c8  f8ad0000          STRH     r0,[sp,#0]            ;338
0000cc  2001              MOVS     r0,#1                 ;339
0000ce  f8ad0002          STRH     r0,[sp,#2]            ;339
0000d2  fb08f006          MUL      r0,r8,r6              ;340
0000d6  fbb0f0f9          UDIV     r0,r0,r9              ;340
0000da  f8ad0006          STRH     r0,[sp,#6]            ;340
0000de  f8ad5008          STRH     r5,[sp,#8]            ;341
0000e2  f8ad500c          STRH     r5,[sp,#0xc]          ;345
0000e6  f8ad5004          STRH     r5,[sp,#4]            ;343
0000ea  f8ad500a          STRH     r5,[sp,#0xa]          ;344
0000ee  f8ad500e          STRH     r5,[sp,#0xe]          ;346
0000f2  2f01              CMP      r7,#1                 ;348
0000f4  d006              BEQ      |L5.260|
0000f6  2f02              CMP      r7,#2                 ;353
0000f8  d00d              BEQ      |L5.278|
0000fa  2f03              CMP      r7,#3                 ;358
0000fc  d014              BEQ      |L5.296|
0000fe  2f04              CMP      r7,#4                 ;363
000100  d01b              BEQ      |L5.314|
000102  e022              B        |L5.330|
                  |L5.260|
000104  4669              MOV      r1,sp                 ;350
000106  4620              MOV      r0,r4                 ;350
000108  f7fffffe          BL       TIM_OC1Init
00010c  2108              MOVS     r1,#8                 ;351
00010e  4620              MOV      r0,r4                 ;351
000110  f7fffffe          BL       TIM_OC1PreloadConfig
000114  e019              B        |L5.330|
                  |L5.278|
000116  4669              MOV      r1,sp                 ;355
000118  4620              MOV      r0,r4                 ;355
00011a  f7fffffe          BL       TIM_OC2Init
00011e  2108              MOVS     r1,#8                 ;356
000120  4620              MOV      r0,r4                 ;356
000122  f7fffffe          BL       TIM_OC2PreloadConfig
000126  e010              B        |L5.330|
                  |L5.296|
000128  4669              MOV      r1,sp                 ;360
00012a  4620              MOV      r0,r4                 ;360
00012c  f7fffffe          BL       TIM_OC3Init
000130  2108              MOVS     r1,#8                 ;361
000132  4620              MOV      r0,r4                 ;361
000134  f7fffffe          BL       TIM_OC3PreloadConfig
000138  e007              B        |L5.330|
                  |L5.314|
00013a  4669              MOV      r1,sp                 ;365
00013c  4620              MOV      r0,r4                 ;365
00013e  f7fffffe          BL       TIM_OC4Init
000142  2108              MOVS     r1,#8                 ;366
000144  4620              MOV      r0,r4                 ;366
000146  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L5.330|
00014a  2101              MOVS     r1,#1                 ;369
00014c  4620              MOV      r0,r4                 ;369
00014e  f7fffffe          BL       TIM_ARRPreloadConfig
000152  2101              MOVS     r1,#1                 ;372
000154  4620              MOV      r0,r4                 ;372
000156  f7fffffe          BL       TIM_Cmd
00015a  4554              CMP      r4,r10                ;375
00015c  d002              BEQ      |L5.356|
00015e  455c              CMP      r4,r11                ;375
000160  f47faf6b          BNE      |L5.58|
                  |L5.356|
000164  2101              MOVS     r1,#1                 ;377
000166  4620              MOV      r0,r4                 ;377
000168  f7fffffe          BL       TIM_CtrlPWMOutputs
00016c  e765              B        |L5.58|
;;;380    
                          ENDP

00016e  0000              DCW      0x0000
                  |L5.368|
                          DCD      0x40012c00
                  |L5.372|
                          DCD      SystemCoreClock
                  |L5.376|
                          DCD      0x40013400
                  |L5.380|
                          DCD      0x40014c00
                  |L5.384|
                          DCD      0x40015000

                          AREA ||i.bsp_SetTIMOutPWM_N||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM_N PROC
;;;390    */
;;;391    void bsp_SetTIMOutPWM_N(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;392    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;393    {
000004  b087              SUB      sp,sp,#0x1c
000006  4682              MOV      r10,r0
000008  e9dd5810          LDRD     r5,r8,[sp,#0x40]
00000c  461f              MOV      r7,r3
00000e  4614              MOV      r4,r2
000010  460e              MOV      r6,r1
;;;394    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;395    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;396    	uint16_t usPeriod;
;;;397    	uint16_t usPrescaler;
;;;398    	uint32_t uiTIMxCLK;
;;;399    
;;;400    	if (_ulDutyCycle == 0)
000012  ea5f0008          MOVS     r0,r8
000016  d013              BEQ      |L6.64|
;;;401    	{		
;;;402    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;403    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;404    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
;;;405    		return;
;;;406    	}
;;;407    	else if (_ulDutyCycle == 10000)
000018  f2427910          MOV      r9,#0x2710
00001c  45c8              CMP      r8,r9
00001e  d119              BNE      |L6.84|
;;;408    	{
;;;409    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000020  2100              MOVS     r1,#0
000022  4610              MOV      r0,r2
000024  f7fffffe          BL       TIM_Cmd
;;;410    
;;;411    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
000028  4631              MOV      r1,r6
00002a  4650              MOV      r0,r10
00002c  f7fffffe          BL       bsp_ConfigGpioOut
;;;412    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
000030  2201              MOVS     r2,#1
                  |L6.50|
000032  4631              MOV      r1,r6
000034  4650              MOV      r0,r10
000036  f7fffffe          BL       GPIO_WriteBit
                  |L6.58|
;;;413    		return;
;;;414    	}
;;;415    	
;;;416    
;;;417    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;418    	
;;;419        /*-----------------------------------------------------------------------
;;;420    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;421    
;;;422    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;423    		PCLK2 = HCLK / 2      (APB2Periph)
;;;424    		PCLK1 = HCLK / 4      (APB1Periph)
;;;425    
;;;426    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;427    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;428    
;;;429    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;430    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;431    
;;;432    	----------------------------------------------------------------------- */
;;;433    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;434    	{
;;;435    		/* APB2 定时器 */
;;;436    		uiTIMxCLK = SystemCoreClock;
;;;437    	}
;;;438    	else	/* APB1 定时器 */
;;;439    	{
;;;440    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;441    	}
;;;442    
;;;443    	if (_ulFreq < 100)
;;;444    	{
;;;445    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;446    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;447    	}
;;;448    	else if (_ulFreq < 3000)
;;;449    	{
;;;450    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;451    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;452    	}
;;;453    	else	/* 大于4K的频率，无需分频 */
;;;454    	{
;;;455    		usPrescaler = 0;					/* 分频比 = 1 */
;;;456    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;457    	}
;;;458    
;;;459    	/* Time base configuration */
;;;460    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;461    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;462    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;463    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;464    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;465    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;466    
;;;467    	/* PWM1 Mode configuration: Channel1 */
;;;468    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */
;;;469    	
;;;470    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;471    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;		/* 和 bsp_SetTIMOutPWM_N() 不同 */
;;;472    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;473    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;474    	
;;;475    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;		/* only for TIM1 and TIM8. */	
;;;476    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;477    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;478    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;479    	
;;;480    	if (_ucChannel == 1)
;;;481    	{
;;;482    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;483    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;484    	}
;;;485    	else if (_ucChannel == 2)
;;;486    	{
;;;487    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;488    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;489    	}
;;;490    	else if (_ucChannel == 3)
;;;491    	{
;;;492    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;493    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;494    	}
;;;495    	else if (_ucChannel == 4)
;;;496    	{
;;;497    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;498    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;499    	}
;;;500    
;;;501    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;502    
;;;503    	/* TIMx enable counter */
;;;504    	TIM_Cmd(TIMx, ENABLE);
;;;505    
;;;506    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;507    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;508    	{
;;;509    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;510    	}
;;;511    }
00003a  b007              ADD      sp,sp,#0x1c
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.64|
000040  2100              MOVS     r1,#0                 ;402
000042  4610              MOV      r0,r2                 ;402
000044  f7fffffe          BL       TIM_Cmd
000048  4631              MOV      r1,r6                 ;403
00004a  4650              MOV      r0,r10                ;403
00004c  f7fffffe          BL       bsp_ConfigGpioOut
000050  2200              MOVS     r2,#0                 ;404
000052  e7ee              B        |L6.50|
                  |L6.84|
000054  4631              MOV      r1,r6                 ;417
000056  4650              MOV      r0,r10                ;417
000058  f7fffffe          BL       bsp_ConfigTimGpio
00005c  f8dfa110          LDR      r10,|L6.368|
000060  4844              LDR      r0,|L6.372|
000062  f8dfb114          LDR      r11,|L6.376|
000066  4554              CMP      r4,r10                ;433
000068  d005              BEQ      |L6.118|
00006a  455c              CMP      r4,r11                ;433
00006c  d003              BEQ      |L6.118|
00006e  4943              LDR      r1,|L6.380|
000070  428c              CMP      r4,r1                 ;433
000072  d000              BEQ      |L6.118|
000074  4942              LDR      r1,|L6.384|
                  |L6.118|
000076  6800              LDR      r0,[r0,#0]            ;440  ; SystemCoreClock
000078  2d64              CMP      r5,#0x64              ;443
00007a  d204              BCS      |L6.134|
00007c  fbb0f0f9          UDIV     r0,r0,r9              ;446
000080  f242710f          MOV      r1,#0x270f            ;445
000084  e009              B        |L6.154|
                  |L6.134|
000086  f64031b8          MOV      r1,#0xbb8             ;448
00008a  428d              CMP      r5,r1                 ;448
00008c  d204              BCS      |L6.152|
00008e  2163              MOVS     r1,#0x63              ;450
000090  2264              MOVS     r2,#0x64              ;451
000092  fbb0f0f2          UDIV     r0,r0,r2              ;451
000096  e000              B        |L6.154|
                  |L6.152|
000098  2100              MOVS     r1,#0                 ;455
                  |L6.154|
00009a  fbb0f0f5          UDIV     r0,r0,r5              ;451
00009e  1e40              SUBS     r0,r0,#1              ;451
0000a0  b286              UXTH     r6,r0                 ;451
0000a2  2500              MOVS     r5,#0                 ;462
0000a4  f8ad1010          STRH     r1,[sp,#0x10]         ;461
0000a8  f8ad6014          STRH     r6,[sp,#0x14]         ;460
0000ac  f8ad5016          STRH     r5,[sp,#0x16]         ;462
0000b0  f8ad5012          STRH     r5,[sp,#0x12]         ;463
0000b4  f88d5018          STRB     r5,[sp,#0x18]         ;464
0000b8  a904              ADD      r1,sp,#0x10           ;465
0000ba  4620              MOV      r0,r4                 ;465
0000bc  f7fffffe          BL       TIM_TimeBaseInit
0000c0  4668              MOV      r0,sp                 ;468
0000c2  f7fffffe          BL       TIM_OCStructInit
0000c6  2060              MOVS     r0,#0x60              ;470
0000c8  f8ad0000          STRH     r0,[sp,#0]            ;470
0000cc  fb08f006          MUL      r0,r8,r6              ;472
0000d0  fbb0f0f9          UDIV     r0,r0,r9              ;472
0000d4  f8ad0006          STRH     r0,[sp,#6]            ;472
0000d8  2004              MOVS     r0,#4                 ;475
0000da  f8ad5008          STRH     r5,[sp,#8]            ;473
0000de  f8ad500c          STRH     r5,[sp,#0xc]          ;477
0000e2  f8ad5002          STRH     r5,[sp,#2]            ;471
0000e6  f8ad0004          STRH     r0,[sp,#4]            ;475
0000ea  f8ad500a          STRH     r5,[sp,#0xa]          ;476
0000ee  f8ad500e          STRH     r5,[sp,#0xe]          ;478
0000f2  2f01              CMP      r7,#1                 ;480
0000f4  d006              BEQ      |L6.260|
0000f6  2f02              CMP      r7,#2                 ;485
0000f8  d00d              BEQ      |L6.278|
0000fa  2f03              CMP      r7,#3                 ;490
0000fc  d014              BEQ      |L6.296|
0000fe  2f04              CMP      r7,#4                 ;495
000100  d01b              BEQ      |L6.314|
000102  e022              B        |L6.330|
                  |L6.260|
000104  4669              MOV      r1,sp                 ;482
000106  4620              MOV      r0,r4                 ;482
000108  f7fffffe          BL       TIM_OC1Init
00010c  2108              MOVS     r1,#8                 ;483
00010e  4620              MOV      r0,r4                 ;483
000110  f7fffffe          BL       TIM_OC1PreloadConfig
000114  e019              B        |L6.330|
                  |L6.278|
000116  4669              MOV      r1,sp                 ;487
000118  4620              MOV      r0,r4                 ;487
00011a  f7fffffe          BL       TIM_OC2Init
00011e  2108              MOVS     r1,#8                 ;488
000120  4620              MOV      r0,r4                 ;488
000122  f7fffffe          BL       TIM_OC2PreloadConfig
000126  e010              B        |L6.330|
                  |L6.296|
000128  4669              MOV      r1,sp                 ;492
00012a  4620              MOV      r0,r4                 ;492
00012c  f7fffffe          BL       TIM_OC3Init
000130  2108              MOVS     r1,#8                 ;493
000132  4620              MOV      r0,r4                 ;493
000134  f7fffffe          BL       TIM_OC3PreloadConfig
000138  e007              B        |L6.330|
                  |L6.314|
00013a  4669              MOV      r1,sp                 ;497
00013c  4620              MOV      r0,r4                 ;497
00013e  f7fffffe          BL       TIM_OC4Init
000142  2108              MOVS     r1,#8                 ;498
000144  4620              MOV      r0,r4                 ;498
000146  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L6.330|
00014a  2101              MOVS     r1,#1                 ;501
00014c  4620              MOV      r0,r4                 ;501
00014e  f7fffffe          BL       TIM_ARRPreloadConfig
000152  2101              MOVS     r1,#1                 ;504
000154  4620              MOV      r0,r4                 ;504
000156  f7fffffe          BL       TIM_Cmd
00015a  4554              CMP      r4,r10                ;507
00015c  d002              BEQ      |L6.356|
00015e  455c              CMP      r4,r11                ;507
000160  f47faf6b          BNE      |L6.58|
                  |L6.356|
000164  2101              MOVS     r1,#1                 ;509
000166  4620              MOV      r0,r4                 ;509
000168  f7fffffe          BL       TIM_CtrlPWMOutputs
00016c  e765              B        |L6.58|
;;;512    
                          ENDP

00016e  0000              DCW      0x0000
                  |L6.368|
                          DCD      0x40012c00
                  |L6.372|
                          DCD      SystemCoreClock
                  |L6.376|
                          DCD      0x40013400
                  |L6.380|
                          DCD      0x40014c00
                  |L6.384|
                          DCD      0x40015000

                          AREA ||i.bsp_SetTIMforInt||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMforInt PROC
;;;524    */
;;;525    void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;526    {
;;;527    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;528    	uint16_t usPeriod;
;;;529    	uint16_t usPrescaler;
;;;530    	uint32_t uiTIMxCLK;
;;;531    
;;;532      	/* 使能TIM时钟 */
;;;533    	if ((TIMx == TIM1) || (TIMx == TIM8))
000004  4d5d              LDR      r5,|L7.380|
000006  4e5e              LDR      r6,|L7.384|
000008  4698              MOV      r8,r3                 ;526
00000a  4691              MOV      r9,r2                 ;526
00000c  460f              MOV      r7,r1                 ;526
00000e  4604              MOV      r4,r0                 ;526
000010  42a8              CMP      r0,r5
000012  d001              BEQ      |L7.24|
000014  42b4              CMP      r4,r6
000016  d105              BNE      |L7.36|
                  |L7.24|
;;;534    	{
;;;535    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000018  f7fffffe          BL       bsp_GetRCCofTIM
00001c  2101              MOVS     r1,#1
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
000022  e004              B        |L7.46|
                  |L7.36|
;;;536    	}
;;;537    	else
;;;538    	{
;;;539    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000024  f7fffffe          BL       bsp_GetRCCofTIM
000028  2101              MOVS     r1,#1
00002a  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L7.46|
;;;540    	}
;;;541    
;;;542    	if (_ulFreq == 0)
;;;543    	{
;;;544    		TIM_Cmd(TIMx, DISABLE);		/* 关闭定时输出 */
;;;545    
;;;546    		/* 关闭TIM定时更新中断 (Update) */
;;;547    		{
;;;548    			NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;549    			uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
;;;550    
;;;551    			if (TIMx == TIM1)
;;;552    				irq = TIM1_UP_IRQn;
;;;553    			else if (TIMx == TIM2)
;;;554    				irq = TIM2_IRQn;
;;;555    			else if (TIMx == TIM3)
;;;556    				irq = TIM3_IRQn;
;;;557    			else if (TIMx == TIM4)
00002e  f8dfa154          LDR      r10,|L7.388|
000032  f04f0b00          MOV      r11,#0
000036  b197              CBZ      r7,|L7.94|
;;;558    				irq = TIM4_IRQn;
;;;559    			else if (TIMx == TIM5)
;;;560    				irq = TIM5_IRQn;
;;;561    			else if (TIMx == TIM6)
;;;562    				irq = TIM6_IRQn;
;;;563    			else if (TIMx == TIM7)
;;;564    				irq = TIM7_IRQn;
;;;565    			else if (TIMx == TIM8)
;;;566    				irq = TIM8_UP_IRQn;
;;;567    
;;;568    			NVIC_InitStructure.NVIC_IRQChannel = irq;
;;;569    			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
;;;570    			NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
;;;571    			NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
;;;572    			NVIC_Init(&NVIC_InitStructure);
;;;573    		}		
;;;574    		return;
;;;575    	}
;;;576    
;;;577        /*-----------------------------------------------------------------------
;;;578    		system_stm32f4xx.c 文件中 static void SetSysClockToHSE(void) 函数对时钟的配置如下：
;;;579    
;;;580    			//HCLK = SYSCLK 
;;;581    			RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
;;;582    			  
;;;583    			//PCLK2 = HCLK
;;;584    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
;;;585    			
;;;586    			//PCLK1 = HCLK
;;;587    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
;;;588    
;;;589    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;590    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;591    
;;;592    	----------------------------------------------------------------------- */
;;;593    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;594    	{
;;;595    		/* APB2 定时器 */
;;;596    		uiTIMxCLK = SystemCoreClock;
000038  4853              LDR      r0,|L7.392|
00003a  42ac              CMP      r4,r5                 ;593
00003c  d008              BEQ      |L7.80|
00003e  42b4              CMP      r4,r6                 ;593
000040  d006              BEQ      |L7.80|
000042  4952              LDR      r1,|L7.396|
000044  428c              CMP      r4,r1                 ;593
000046  d003              BEQ      |L7.80|
000048  4951              LDR      r1,|L7.400|
00004a  428c              CMP      r4,r1                 ;593
00004c  d000              BEQ      |L7.80|
00004e  4951              LDR      r1,|L7.404|
                  |L7.80|
;;;597    	}
;;;598    	else	/* APB1 定时器 .  */
;;;599    	{
;;;600    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
000050  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;601    	}
;;;602    
;;;603    	if (_ulFreq < 100)
000052  2f64              CMP      r7,#0x64
000054  d235              BCS      |L7.194|
;;;604    	{
;;;605    		usPrescaler = 10000 - 1;					/* 分频比 = 1000 */
000056  f242710f          MOV      r1,#0x270f
;;;606    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
00005a  1c4a              ADDS     r2,r1,#1
00005c  e037              B        |L7.206|
                  |L7.94|
00005e  2100              MOVS     r1,#0                 ;544
000060  4620              MOV      r0,r4                 ;544
000062  f7fffffe          BL       TIM_Cmd
000066  2000              MOVS     r0,#0                 ;549
000068  42ac              CMP      r4,r5                 ;551
00006a  d101              BNE      |L7.112|
00006c  2019              MOVS     r0,#0x19              ;552
00006e  e01f              B        |L7.176|
                  |L7.112|
000070  f1b44f80          CMP      r4,#0x40000000        ;553
000074  d004              BEQ      |L7.128|
000076  4948              LDR      r1,|L7.408|
000078  428c              CMP      r4,r1                 ;555
00007a  d103              BNE      |L7.132|
00007c  201d              MOVS     r0,#0x1d              ;556
00007e  e017              B        |L7.176|
                  |L7.128|
000080  201c              MOVS     r0,#0x1c              ;554
000082  e015              B        |L7.176|
                  |L7.132|
000084  4554              CMP      r4,r10                ;557
000086  d101              BNE      |L7.140|
000088  201e              MOVS     r0,#0x1e              ;558
00008a  e011              B        |L7.176|
                  |L7.140|
00008c  4943              LDR      r1,|L7.412|
00008e  428c              CMP      r4,r1                 ;559
000090  d101              BNE      |L7.150|
000092  2032              MOVS     r0,#0x32              ;560
000094  e00c              B        |L7.176|
                  |L7.150|
000096  4942              LDR      r1,|L7.416|
000098  428c              CMP      r4,r1                 ;561
00009a  d101              BNE      |L7.160|
00009c  2036              MOVS     r0,#0x36              ;562
00009e  e007              B        |L7.176|
                  |L7.160|
0000a0  4940              LDR      r1,|L7.420|
0000a2  428c              CMP      r4,r1                 ;563
0000a4  d101              BNE      |L7.170|
0000a6  2037              MOVS     r0,#0x37              ;564
0000a8  e002              B        |L7.176|
                  |L7.170|
0000aa  42b4              CMP      r4,r6                 ;565
0000ac  d100              BNE      |L7.176|
0000ae  202c              MOVS     r0,#0x2c              ;566
                  |L7.176|
0000b0  f88d000c          STRB     r0,[sp,#0xc]          ;568
0000b4  f88d900d          STRB     r9,[sp,#0xd]          ;569
0000b8  f88d800e          STRB     r8,[sp,#0xe]          ;570
0000bc  f88db00f          STRB     r11,[sp,#0xf]         ;571
0000c0  e056              B        |L7.368|
                  |L7.194|
;;;607    	}
;;;608    	else if (_ulFreq < 3000)
0000c2  f64031b8          MOV      r1,#0xbb8
0000c6  428f              CMP      r7,r1
0000c8  d204              BCS      |L7.212|
;;;609    	{
;;;610    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
0000ca  2163              MOVS     r1,#0x63
;;;611    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
0000cc  2264              MOVS     r2,#0x64
                  |L7.206|
0000ce  fbb0f0f2          UDIV     r0,r0,r2              ;606
0000d2  e000              B        |L7.214|
                  |L7.212|
;;;612    	}
;;;613    	else	/* 大于4K的频率，无需分频 */
;;;614    	{
;;;615    		usPrescaler = 0;					/* 分频比 = 1 */
0000d4  2100              MOVS     r1,#0
                  |L7.214|
0000d6  fbb0f0f7          UDIV     r0,r0,r7              ;611
0000da  1e40              SUBS     r0,r0,#1              ;611
0000dc  b280              UXTH     r0,r0                 ;611
;;;616    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;617    	}
;;;618    
;;;619    	/* Time base configuration */
;;;620    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
0000de  f8ad0004          STRH     r0,[sp,#4]
;;;621    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
0000e2  f8ad1000          STRH     r1,[sp,#0]
;;;622    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
0000e6  f8adb006          STRH     r11,[sp,#6]
;;;623    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
0000ea  f8adb002          STRH     r11,[sp,#2]
;;;624    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
0000ee  f88db008          STRB     r11,[sp,#8]
;;;625    
;;;626    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
0000f2  4669              MOV      r1,sp
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       TIM_TimeBaseInit
;;;627    
;;;628    	TIM_ARRPreloadConfig(TIMx, ENABLE);
0000fa  2101              MOVS     r1,#1
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       TIM_ARRPreloadConfig
;;;629    
;;;630    	/* TIM Interrupts enable */
;;;631    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
000102  2201              MOVS     r2,#1
000104  4611              MOV      r1,r2
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       TIM_ITConfig
;;;632    
;;;633    	/* TIMx enable counter */
;;;634    	TIM_Cmd(TIMx, ENABLE);
00010c  2101              MOVS     r1,#1
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       TIM_Cmd
;;;635    
;;;636    	/* 配置TIM定时更新中断 (Update) */
;;;637    	{
;;;638    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;639    		uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
000114  2000              MOVS     r0,#0
;;;640    
;;;641    		if (TIMx == TIM1)
000116  42ac              CMP      r4,r5
000118  d101              BNE      |L7.286|
;;;642    			irq = TIM1_UP_IRQn;
00011a  2019              MOVS     r0,#0x19
00011c  e01f              B        |L7.350|
                  |L7.286|
;;;643    		else if (TIMx == TIM2)
00011e  f1b44f80          CMP      r4,#0x40000000
000122  d004              BEQ      |L7.302|
;;;644    			irq = TIM2_IRQn;
;;;645    		else if (TIMx == TIM3)
000124  491c              LDR      r1,|L7.408|
000126  428c              CMP      r4,r1
000128  d103              BNE      |L7.306|
;;;646    			irq = TIM3_IRQn;
00012a  201d              MOVS     r0,#0x1d
00012c  e017              B        |L7.350|
                  |L7.302|
00012e  201c              MOVS     r0,#0x1c              ;644
000130  e015              B        |L7.350|
                  |L7.306|
;;;647    		else if (TIMx == TIM4)
000132  4554              CMP      r4,r10
000134  d101              BNE      |L7.314|
;;;648    			irq = TIM4_IRQn;
000136  201e              MOVS     r0,#0x1e
000138  e011              B        |L7.350|
                  |L7.314|
;;;649    		else if (TIMx == TIM5)
00013a  4918              LDR      r1,|L7.412|
00013c  428c              CMP      r4,r1
00013e  d101              BNE      |L7.324|
;;;650    			irq = TIM5_IRQn;
000140  2032              MOVS     r0,#0x32
000142  e00c              B        |L7.350|
                  |L7.324|
;;;651    		else if (TIMx == TIM6)
000144  4916              LDR      r1,|L7.416|
000146  428c              CMP      r4,r1
000148  d101              BNE      |L7.334|
;;;652    			irq = TIM6_IRQn;
00014a  2036              MOVS     r0,#0x36
00014c  e007              B        |L7.350|
                  |L7.334|
;;;653    		else if (TIMx == TIM7)
00014e  4915              LDR      r1,|L7.420|
000150  428c              CMP      r4,r1
000152  d101              BNE      |L7.344|
;;;654    			irq = TIM7_IRQn;
000154  2037              MOVS     r0,#0x37
000156  e002              B        |L7.350|
                  |L7.344|
;;;655    		else if (TIMx == TIM8)
000158  42b4              CMP      r4,r6
00015a  d100              BNE      |L7.350|
;;;656    			irq = TIM8_UP_IRQn;
00015c  202c              MOVS     r0,#0x2c
                  |L7.350|
;;;657    
;;;658    		NVIC_InitStructure.NVIC_IRQChannel = irq;
00015e  f88d000c          STRB     r0,[sp,#0xc]
;;;659    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
000162  f88d900d          STRB     r9,[sp,#0xd]
;;;660    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
000166  f88d800e          STRB     r8,[sp,#0xe]
;;;661    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00016a  2001              MOVS     r0,#1
00016c  f88d000f          STRB     r0,[sp,#0xf]
                  |L7.368|
;;;662    		NVIC_Init(&NVIC_InitStructure);
000170  a803              ADD      r0,sp,#0xc
000172  f7fffffe          BL       NVIC_Init
;;;663    	}
;;;664    }
000176  e8bd9fff          POP      {r0-r12,pc}
;;;665    
                          ENDP

00017a  0000              DCW      0x0000
                  |L7.380|
                          DCD      0x40012c00
                  |L7.384|
                          DCD      0x40013400
                  |L7.388|
                          DCD      0x40000800
                  |L7.392|
                          DCD      SystemCoreClock
                  |L7.396|
                          DCD      0x40014c00
                  |L7.400|
                          DCD      0x40015000
                  |L7.404|
                          DCD      0x40015400
                  |L7.408|
                          DCD      0x40000400
                  |L7.412|
                          DCD      0x40000c00
                  |L7.416|
                          DCD      0x40001000
                  |L7.420|
                          DCD      0x40001400

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_tim_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_tim_pwm_c_d7165983____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REVSH|
#line 128
|__asm___13_bsp_tim_pwm_c_d7165983____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
