; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_ps2.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_ps2.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_ps2.crf ..\..\User\bsp\src\bsp_ps2.c]
                          THUMB

                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI15_10_IRQHandler PROC
;;;1202   #ifndef EXTI15_10_ISR_MOVE_OUT		/* bsp.h 中定义此行，表示本函数移到 stam32f1xx_it.c。 避免重复定义 */
;;;1203   void EXTI15_10_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1204   {
;;;1205   	if (EXTI_GetITStatus(EXTI_Line13) != RESET)
000002  f44f5400          MOV      r4,#0x2000
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       EXTI_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d009              BEQ      |L1.36|
;;;1206   	{
;;;1207   		PS2_ISR();	/* PS2键盘中断服务程序 */
000010  f7fffffe          BL       PS2_ISR
;;;1208   		
;;;1209   		EXTI_ClearFlag(EXTI_Line13);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       EXTI_ClearFlag
;;;1210   		EXTI_ClearITPendingBit(EXTI_Line13);		/* 清除中断标志位 */
00001a  4620              MOV      r0,r4
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      EXTI_ClearITPendingBit
                  |L1.36|
;;;1211   	}
;;;1212   }
000024  bd10              POP      {r4,pc}
;;;1213   #endif
                          ENDP


                          AREA ||i.GetNameOfKey||, CODE, READONLY, ALIGN=2

                  GetNameOfKey PROC
;;;466    */
;;;467    const char * GetNameOfKey(uint32_t _code)
000000  4b07              LDR      r3,|L2.32|
;;;468    {
;;;469    	uint16_t i = 0;
000002  2100              MOVS     r1,#0
                  |L2.4|
;;;470    
;;;471    	
;;;472    	while (1)
;;;473    	{		
;;;474    		if (s_KeyNameTab[i].code == 0)
000004  f8532031          LDR      r2,[r3,r1,LSL #3]
000008  b142              CBZ      r2,|L2.28|
;;;475    		{
;;;476    			break;
;;;477    		}
;;;478    		
;;;479    		if (_code == s_KeyNameTab[i].code)
00000a  4282              CMP      r2,r0
00000c  d103              BNE      |L2.22|
;;;480    		{
;;;481    			return s_KeyNameTab[i].str;
00000e  eb0300c1          ADD      r0,r3,r1,LSL #3
000012  6840              LDR      r0,[r0,#4]
;;;482    		}
;;;483    		i++;
;;;484    	}
;;;485    	
;;;486    	return "";
;;;487    }
000014  4770              BX       lr
                  |L2.22|
000016  1c49              ADDS     r1,r1,#1
000018  b289              UXTH     r1,r1                 ;483
00001a  e7f3              B        |L2.4|
                  |L2.28|
00001c  a001              ADR      r0,|L2.36|
00001e  4770              BX       lr
;;;488    
                          ENDP

                  |L2.32|
                          DCD      ||.constdata||
                  |L2.36|
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.PS2_ClearBuf||, CODE, READONLY, ALIGN=2

                  PS2_ClearBuf PROC
;;;543    */
;;;544    void PS2_ClearBuf(void)
000000  4804              LDR      r0,|L3.20|
;;;545    {
;;;546    	/* 对按键FIFO读写指针清零 */
;;;547    	g_tPS2.Read = 0;
000002  2100              MOVS     r1,#0
000004  f8001f28          STRB     r1,[r0,#0x28]!
;;;548    	g_tPS2.Write = 0;
000008  7041              STRB     r1,[r0,#1]
;;;549    
;;;550    	g_tPS2.Len = 0;
00000a  7341              STRB     r1,[r0,#0xd]
;;;551    	g_tPS2.TxTimeOut = 0;
00000c  7381              STRB     r1,[r0,#0xe]
;;;552    	g_tPS2.RxTimeOut = 0;
00000e  73c1              STRB     r1,[r0,#0xf]
;;;553    }
000010  4770              BX       lr
;;;554    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      ||.bss||

                          AREA ||i.PS2_DecodeMouse||, CODE, READONLY, ALIGN=1

                  PS2_DecodeMouse PROC
;;;913    */
;;;914    void PS2_DecodeMouse(uint32_t _input, MOUSE_PACKET_T *_res)
000000  b530              PUSH     {r4,r5,lr}
;;;915    {
;;;916    	uint32_t data;
;;;917    
;;;918    	data = _input;
;;;919    	if ((_input & 0xFF000000) == 0)		/* 标准鼠标，3字节格式 */
000002  0e04              LSRS     r4,r0,#24
;;;920    	{
;;;921    		data <<= 8;			/* 左移1个字节, 便于统一3字节数据包和4字节数据包共用解码语句 */
;;;922    		_res->Intelli = 0;	/* 0表示标准鼠标 */
;;;923    	}
;;;924    	else
;;;925    	{
;;;926    		_res->Intelli = 1;	/* 1表示智能鼠标鼠标 */
000004  f04f0201          MOV      r2,#1
000008  f04f0300          MOV      r3,#0
00000c  d004              BEQ      |L4.24|
00000e  700a              STRB     r2,[r1,#0]
                  |L4.16|
;;;927    	}
;;;928    
;;;929    	/* 智能鼠标， 4字节格式 */
;;;930    		/*
;;;931    		        Bit7       Bit6       Bit5      Bit4     Bit3      Bit 2      Bit 1      Bit 0
;;;932    		Byte 1  Yoverflow  Xoverflow  YsignBit  XsignBit Always 1  MiddleBtn  RightBtn   LeftBtn
;;;933    		Byte 2       X Movement
;;;934    		Byte 3       Y Movement
;;;935    		Byte 4  Always 0   Always 0   5th Btn   4th Btn  Z3        Z2         Z1         Z0
;;;936    		*/
;;;937    	/* 标准鼠标，3字节格式，前3字节和智能鼠标格式相同，没有第4字节 */
;;;938    
;;;939    
;;;940    	/* Y值溢出 */
;;;941    	if (data & 0x80000000)
000010  2800              CMP      r0,#0
000012  da04              BGE      |L4.30|
;;;942    	{
;;;943    		_res->Yoverflow = 1;
000014  708a              STRB     r2,[r1,#2]
000016  e003              B        |L4.32|
                  |L4.24|
000018  0200              LSLS     r0,r0,#8              ;921
00001a  700b              STRB     r3,[r1,#0]            ;922
00001c  e7f8              B        |L4.16|
                  |L4.30|
;;;944    	}
;;;945    	else
;;;946    	{
;;;947    		_res->Yoverflow = 0;
00001e  708b              STRB     r3,[r1,#2]
                  |L4.32|
;;;948    	}
;;;949    
;;;950    	/* X值溢出 */
;;;951    	if (data & 0x40000000)
000020  0044              LSLS     r4,r0,#1
000022  d501              BPL      |L4.40|
;;;952    	{
;;;953    		_res->Xoverflow = 1;
000024  704a              STRB     r2,[r1,#1]
000026  e000              B        |L4.42|
                  |L4.40|
;;;954    	}
;;;955    	else
;;;956    	{
;;;957    		_res->Xoverflow = 0;
000028  704b              STRB     r3,[r1,#1]
                  |L4.42|
;;;958    	}
;;;959    
;;;960    	/* 鼠标X轴位移 */
;;;961    	_res->Xmove = ((data >> 16) & 0xFF);
00002a  f3c04407          UBFX     r4,r0,#16,#8
00002e  808c              STRH     r4,[r1,#4]
000030  00c5              LSLS     r5,r0,#3
;;;962    	if (data & 0x10000000)
000032  d502              BPL      |L4.58|
;;;963    	{
;;;964    		_res->Xmove |= 0xFF00;	/* 扩展符号位 */
000034  f444447f          ORR      r4,r4,#0xff00
000038  808c              STRH     r4,[r1,#4]
                  |L4.58|
;;;965    	}
;;;966    
;;;967    	/* 鼠标Y轴位移 */
;;;968    	_res->Ymove = ((data >> 8) & 0xFF);
00003a  f3c02407          UBFX     r4,r0,#8,#8
00003e  80cc              STRH     r4,[r1,#6]
000040  0085              LSLS     r5,r0,#2
;;;969    	if (data & 0x20000000)
000042  d502              BPL      |L4.74|
;;;970    	{
;;;971    		_res->Ymove |= 0xFF00;	/* 扩展符号位 */
000044  f444447f          ORR      r4,r4,#0xff00
000048  80cc              STRH     r4,[r1,#6]
                  |L4.74|
;;;972    	}
;;;973    
;;;974    	/* 鼠标中键 */
;;;975    	if (data & 0x04000000)
00004a  0144              LSLS     r4,r0,#5
00004c  d501              BPL      |L4.82|
;;;976    	{
;;;977    		_res->BtnMid = 1;
00004e  72ca              STRB     r2,[r1,#0xb]
000050  e000              B        |L4.84|
                  |L4.82|
;;;978    	}
;;;979    	else
;;;980    	{
;;;981    		_res->BtnMid = 0;
000052  72cb              STRB     r3,[r1,#0xb]
                  |L4.84|
;;;982    	}
;;;983    
;;;984    	/* 鼠标右键 */
;;;985    	if (data & 0x02000000)
000054  0184              LSLS     r4,r0,#6
000056  d501              BPL      |L4.92|
;;;986    	{
;;;987    		_res->BtnRight = 1;
000058  730a              STRB     r2,[r1,#0xc]
00005a  e000              B        |L4.94|
                  |L4.92|
;;;988    	}
;;;989    	else
;;;990    	{
;;;991    		_res->BtnRight = 0;
00005c  730b              STRB     r3,[r1,#0xc]
                  |L4.94|
;;;992    	}
;;;993    
;;;994    	/* 鼠标左键 */
;;;995    	if (data & 0x01000000)
00005e  01c4              LSLS     r4,r0,#7
000060  d501              BPL      |L4.102|
;;;996    	{
;;;997    		_res->BtnLeft = 1;
000062  728a              STRB     r2,[r1,#0xa]
000064  e000              B        |L4.104|
                  |L4.102|
;;;998    	}
;;;999    	else
;;;1000   	{
;;;1001   		_res->BtnLeft = 0;
000066  728b              STRB     r3,[r1,#0xa]
                  |L4.104|
;;;1002   	}
;;;1003   
;;;1004   	/*---------------- 下面的代码仅对智能鼠标有用 ----------------*/
;;;1005   
;;;1006   	/* 鼠标第5个键 */
;;;1007   	if (data & 0x00000020)
000068  0684              LSLS     r4,r0,#26
00006a  d501              BPL      |L4.112|
;;;1008   	{
;;;1009   		_res->Btn5 = 1;
00006c  738a              STRB     r2,[r1,#0xe]
00006e  e000              B        |L4.114|
                  |L4.112|
;;;1010   	}
;;;1011   	else
;;;1012   	{
;;;1013   		_res->Btn5 = 0;
000070  738b              STRB     r3,[r1,#0xe]
                  |L4.114|
;;;1014   	}
;;;1015   
;;;1016   	/* 鼠标第4个键 */
;;;1017   	if (data & 0x00000010)
000072  06c4              LSLS     r4,r0,#27
000074  d501              BPL      |L4.122|
;;;1018   	{
;;;1019   		_res->Btn4 = 1;
000076  734a              STRB     r2,[r1,#0xd]
000078  e000              B        |L4.124|
                  |L4.122|
;;;1020   	}
;;;1021   	else
;;;1022   	{
;;;1023   		_res->Btn4 = 0;
00007a  734b              STRB     r3,[r1,#0xd]
                  |L4.124|
;;;1024   	}
;;;1025   
;;;1026   	/*
;;;1027   		鼠标滚轮。对于有两个滚轮(1个垂直的+1个水平的)鼠标。
;;;1028   			+1 表示垂直滚轮向上滚动，-1表示垂直滚轮向下滚动；
;;;1029   			+2 表示水平滚轮向右滚动，-2表示水平滚轮向做滚动。
;;;1030   	*/
;;;1031   	_res->Zmove = (data & 0xF);
00007c  f000020f          AND      r2,r0,#0xf
000080  810a              STRH     r2,[r1,#8]
;;;1032   	if (data & 0x00000008)
000082  0700              LSLS     r0,r0,#28
000084  d503              BPL      |L4.142|
;;;1033   	{
;;;1034   		_res->Zmove |= 0xFFF0;
000086  f64f70f0          MOV      r0,#0xfff0
00008a  4302              ORRS     r2,r2,r0
00008c  810a              STRH     r2,[r1,#8]
                  |L4.142|
;;;1035   	}
;;;1036   }
00008e  bd30              POP      {r4,r5,pc}
;;;1037   
                          ENDP


                          AREA ||i.PS2_GetDevceType||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  PS2_GetDevceType PROC
;;;642    */
;;;643    uint8_t PS2_GetDevceType(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;644    {
;;;645    	uint32_t Rsp;
;;;646    	uint8_t dev;
;;;647    	uint8_t i;
;;;648    
;;;649    	/* 识别方法为：发送0xFF指令，应答FA    AA 的是键盘，应答 FA     AA 00 的是鼠标。 */
;;;650    
;;;651    	dev = PS2_UNKNOW_DEVICE;
000002  2500              MOVS     r5,#0
;;;652    
;;;653    	for (i = 0; i < 3; i++)
000004  462c              MOV      r4,r5
;;;654    	{
;;;655    		/* 主板和PS2设备同时上电时，设备内部可能正在初始化，因此需要等待 */		
;;;656    		PS2_SendCmd(0xFF);
;;;657    		ps2_printf("   Host   : %X\r\n", 0xFF);
;;;658    		if (PS2_WaitMsg(&Rsp, 20))	/* 20ms 超时 */
;;;659    		{
;;;660    			ps2_printf("   Device : %X\r\n", Rsp);			
;;;661    			if (Rsp == 0xFA)
;;;662    			{
;;;663    				if (PS2_WaitMsg(&Rsp, 1000))
000006  f44f767a          MOV      r6,#0x3e8
;;;664    				{
;;;665    					ps2_printf("   Device : %X\r\n", Rsp);
;;;666    
;;;667    					if (Rsp == 0xAA00)
00000a  f44f472a          MOV      r7,#0xaa00
                  |L5.14|
00000e  20ff              MOVS     r0,#0xff              ;656
000010  f7fffffe          BL       PS2_SendCmd
000014  21ff              MOVS     r1,#0xff              ;657
000016  a013              ADR      r0,|L5.100|
000018  f7fffffe          BL       __2printf
00001c  2114              MOVS     r1,#0x14              ;658
00001e  4668              MOV      r0,sp                 ;658
000020  f7fffffe          BL       PS2_WaitMsg
000024  b1b0              CBZ      r0,|L5.84|
000026  a014              ADR      r0,|L5.120|
000028  9900              LDR      r1,[sp,#0]            ;660
00002a  f7fffffe          BL       __2printf
00002e  9800              LDR      r0,[sp,#0]            ;661
000030  28fa              CMP      r0,#0xfa              ;661
000032  d10f              BNE      |L5.84|
000034  4631              MOV      r1,r6                 ;663
000036  4668              MOV      r0,sp                 ;663
000038  f7fffffe          BL       PS2_WaitMsg
00003c  b150              CBZ      r0,|L5.84|
00003e  a00e              ADR      r0,|L5.120|
000040  9900              LDR      r1,[sp,#0]            ;665
000042  f7fffffe          BL       __2printf
000046  9800              LDR      r0,[sp,#0]
000048  42b8              CMP      r0,r7
00004a  d101              BNE      |L5.80|
;;;668    					{
;;;669    						dev = PS2_MOUSE;	/* 鼠标 */
00004c  2501              MOVS     r5,#1
;;;670    						break;
00004e  e005              B        |L5.92|
                  |L5.80|
;;;671    					}
;;;672    					else if (Rsp == 0xAA)
000050  28aa              CMP      r0,#0xaa
000052  d005              BEQ      |L5.96|
                  |L5.84|
000054  1c64              ADDS     r4,r4,#1
000056  b2e4              UXTB     r4,r4                 ;653
000058  2c03              CMP      r4,#3                 ;653
00005a  d3d8              BCC      |L5.14|
                  |L5.92|
;;;673    					{
;;;674    						dev = PS2_KEYBOARD;	/* 键盘 */
;;;675    						break;
;;;676    					}
;;;677    				}
;;;678    			}
;;;679    		}
;;;680    	}
;;;681    	return dev;
00005c  4628              MOV      r0,r5
;;;682    }
00005e  bdf8              POP      {r3-r7,pc}
                  |L5.96|
000060  2502              MOVS     r5,#2                 ;674
000062  e7fb              B        |L5.92|
;;;683    
                          ENDP

                  |L5.100|
000064  20202048          DCB      "   Host   : %X\r\n",0
000068  6f737420
00006c  20203a20
000070  25580d0a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L5.120|
000078  20202044          DCB      "   Device : %X\r\n",0
00007c  65766963
000080  65203a20
000084  25580d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.PS2_GetMsg||, CODE, READONLY, ALIGN=2

                  PS2_GetMsg PROC
;;;515    */
;;;516    uint32_t PS2_GetMsg(void)
000000  490a              LDR      r1,|L6.44|
;;;517    {
;;;518    	uint32_t ret;
;;;519    
;;;520    	if (g_tPS2.Read == g_tPS2.Write)
000002  f8912028          LDRB     r2,[r1,#0x28]  ; g_tPS2
000006  f8910029          LDRB     r0,[r1,#0x29]  ; g_tPS2
00000a  4282              CMP      r2,r0
00000c  d101              BNE      |L6.18|
;;;521    	{
;;;522    		return PS2_NONE;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;523    	}
;;;524    	else
;;;525    	{
;;;526    		ret = g_tPS2.Buf[g_tPS2.Read];
;;;527    
;;;528    		if (++g_tPS2.Read >= KEY_FIFO_SIZE)
;;;529    		{
;;;530    			g_tPS2.Read = 0;
;;;531    		}
;;;532    		return ret;
;;;533    	}
;;;534    }
000010  4770              BX       lr
                  |L6.18|
000012  f8510022          LDR      r0,[r1,r2,LSL #2]     ;526
000016  1c52              ADDS     r2,r2,#1              ;526
000018  b2d2              UXTB     r2,r2                 ;528
00001a  f8812028          STRB     r2,[r1,#0x28]         ;528
00001e  2a0a              CMP      r2,#0xa               ;528
000020  d3f6              BCC      |L6.16|
000022  2200              MOVS     r2,#0                 ;530
000024  f8812028          STRB     r2,[r1,#0x28]         ;530
000028  4770              BX       lr
;;;535    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.PS2_HookKeyboard||, CODE, READONLY, ALIGN=2

                  PS2_HookKeyboard PROC
;;;371    */
;;;372    static uint8_t PS2_HookKeyboard(uint32_t _msg)
000000  b570              PUSH     {r4-r6,lr}
;;;373    {
;;;374    	uint8_t reput = 1;	/* 正常使用时可以设置为0. CTRL , ALT ,SHIFT 按键事件无需上报应用层处理 */
000002  2401              MOVS     r4,#1
;;;375    
;;;376    	/* 处理PS2键盘状态 */
;;;377    	switch (_msg)
000004  f24e0611          MOV      r6,#0xe011
000008  1b85              SUBS     r5,r0,r6
00000a  2200              MOVS     r2,#0
;;;378    	{
;;;379    		case KB_L_SHFT:		/* Shift 键按下 */
;;;380    		case KB_R_SHFT:
;;;381    			g_tPS2.ksShift = 1;
00000c  4934              LDR      r1,|L7.224|
00000e  4623              MOV      r3,r4                 ;374
000010  42b0              CMP      r0,r6                 ;377
000012  d035              BEQ      |L7.128|
000014  dc10              BGT      |L7.56|
000016  2858              CMP      r0,#0x58              ;377
000018  d038              BEQ      |L7.140|
00001a  dc06              BGT      |L7.42|
00001c  2811              CMP      r0,#0x11              ;377
00001e  d02f              BEQ      |L7.128|
000020  2812              CMP      r0,#0x12              ;377
000022  d021              BEQ      |L7.104|
000024  2814              CMP      r0,#0x14              ;377
000026  d148              BNE      |L7.186|
000028  e024              B        |L7.116|
                  |L7.42|
00002a  2859              CMP      r0,#0x59              ;377
00002c  d01c              BEQ      |L7.104|
00002e  2877              CMP      r0,#0x77              ;377
000030  d039              BEQ      |L7.166|
000032  287e              CMP      r0,#0x7e              ;377
000034  d141              BNE      |L7.186|
000036  e045              B        |L7.196|
                  |L7.56|
000038  f2410603          MOV      r6,#0x1003            ;377
00003c  1ba8              SUBS     r0,r5,r6              ;377
00003e  42b5              CMP      r5,r6                 ;377
000040  d01b              BEQ      |L7.122|
000042  dc09              BGT      |L7.88|
000044  2d03              CMP      r5,#3                 ;377
000046  d015              BEQ      |L7.116|
000048  f5b55f80          CMP      r5,#0x1000            ;377
00004c  d01b              BEQ      |L7.134|
00004e  f46f5080          MVN      r0,#0x1000            ;377
000052  42c5              CMN      r5,r0                 ;377
000054  d131              BNE      |L7.186|
000056  e00a              B        |L7.110|
                  |L7.88|
000058  2845              CMP      r0,#0x45              ;377
00005a  d008              BEQ      |L7.110|
00005c  4b21              LDR      r3,|L7.228|
00005e  18c0              ADDS     r0,r0,r3              ;377
000060  d011              BEQ      |L7.134|
000062  2803              CMP      r0,#3                 ;377
000064  d129              BNE      |L7.186|
000066  e008              B        |L7.122|
                  |L7.104|
000068  f881303b          STRB     r3,[r1,#0x3b]
;;;382    			break;
00006c  e025              B        |L7.186|
                  |L7.110|
;;;383    
;;;384    		case BREAK_L_SHFT:	/* Shift 键松开 */
;;;385    		case BREAK_R_SHFT:
;;;386    			g_tPS2.ksShift = 0;
00006e  f881203b          STRB     r2,[r1,#0x3b]
;;;387    			break;
000072  e022              B        |L7.186|
                  |L7.116|
;;;388    
;;;389    		case KB_L_CTRL:		/* Ctrl 键按下 */
;;;390    		case KB_R_CTRL:
;;;391    			g_tPS2.ksCtrl = 1;
000074  f881303c          STRB     r3,[r1,#0x3c]
;;;392    			break;
000078  e01f              B        |L7.186|
                  |L7.122|
;;;393    
;;;394    		case BREAK_L_CTRL:	/* Ctrl 键松开 */
;;;395    		case BREAK_R_CTRL:
;;;396    			g_tPS2.ksCtrl = 0;
00007a  f881203c          STRB     r2,[r1,#0x3c]
;;;397    			break;
00007e  e01c              B        |L7.186|
                  |L7.128|
;;;398    
;;;399    		case KB_L_ALT:		/* Alt 键按下 */
;;;400    		case KB_R_ALT:
;;;401    			g_tPS2.ksAlt = 1;
000080  f881303d          STRB     r3,[r1,#0x3d]
;;;402    			break;
000084  e019              B        |L7.186|
                  |L7.134|
;;;403    
;;;404    		case BREAK_L_ALT:	/* Alt 键松开 */
;;;405    		case BREAK_R_ALT:
;;;406    			g_tPS2.ksAlt = 0;
000086  f881203d          STRB     r2,[r1,#0x3d]
;;;407    			break;
00008a  e016              B        |L7.186|
                  |L7.140|
;;;408    
;;;409    		case KB_CAPS:		/* 大小写切换 */
;;;410    			if (g_tPS2.ksCapsLock == 0)
00008c  f891003e          LDRB     r0,[r1,#0x3e]  ; g_tPS2
000090  b130              CBZ      r0,|L7.160|
;;;411    			{
;;;412    				g_tPS2.ksCapsLock = 1;
;;;413    				//ps2_printf(" 开Caps Lock灯\r\n");
;;;414    			}
;;;415    			else
;;;416    			{
;;;417    				g_tPS2.ksCapsLock = 0;
000092  f881203e          STRB     r2,[r1,#0x3e]
;;;418    				//ps2_printf(" 关Caps Lock灯\r\n");
;;;419    			}
;;;420    			PS2_SetKeyboardLed(LED_CapsLock, g_tPS2.ksCapsLock);
000096  bf00              NOP      
                  |L7.152|
000098  f891103e          LDRB     r1,[r1,#0x3e]  ; g_tPS2
00009c  2000              MOVS     r0,#0
;;;421    			break;
00009e  e00a              B        |L7.182|
                  |L7.160|
0000a0  f881303e          STRB     r3,[r1,#0x3e]         ;412
0000a4  e7f8              B        |L7.152|
                  |L7.166|
;;;422    
;;;423    		case KB_NUM:		/* 数字小键盘使能 */
;;;424    			if (g_tPS2.KsNumLock == 0)
0000a6  f891003f          LDRB     r0,[r1,#0x3f]  ; g_tPS2
0000aa  b140              CBZ      r0,|L7.190|
;;;425    			{
;;;426    				g_tPS2.KsNumLock = 1;
;;;427    				//ps2_printf(" 开Num Lock灯\r\n");
;;;428    			}
;;;429    			else
;;;430    			{
;;;431    				g_tPS2.KsNumLock = 0;
0000ac  f881203f          STRB     r2,[r1,#0x3f]
                  |L7.176|
;;;432    				//ps2_printf(" 关Num Lock灯\r\n");
;;;433    			}
;;;434    			PS2_SetKeyboardLed(LED_NumLock, g_tPS2.KsNumLock);
0000b0  f891103f          LDRB     r1,[r1,#0x3f]  ; g_tPS2
0000b4  2001              MOVS     r0,#1
                  |L7.182|
0000b6  f7fffffe          BL       PS2_SetKeyboardLed
                  |L7.186|
;;;435    			break;
;;;436    
;;;437    		case KB_SCROLL:		/* */
;;;438    			if (g_tPS2.KsScrollLock == 0)
;;;439    			{
;;;440    				g_tPS2.KsScrollLock = 1;
;;;441    				//ps2_printf(" 开Scroll Lock灯\r\n");
;;;442    			}
;;;443    			else
;;;444    			{
;;;445    				g_tPS2.KsScrollLock = 0;
;;;446    				//ps2_printf(" 关Scroll Lock灯\r\n");
;;;447    			}
;;;448    			PS2_SetKeyboardLed(LED_ScrollLock, g_tPS2.KsScrollLock);
;;;449    			break;
;;;450    
;;;451    		default:
;;;452    			reput = 1;
;;;453    			break;
;;;454    	}
;;;455    
;;;456    	return reput;
0000ba  4620              MOV      r0,r4
;;;457    }
0000bc  bd70              POP      {r4-r6,pc}
                  |L7.190|
0000be  f881303f          STRB     r3,[r1,#0x3f]         ;426
0000c2  e7f5              B        |L7.176|
                  |L7.196|
0000c4  f8910040          LDRB     r0,[r1,#0x40]         ;438  ; g_tPS2
0000c8  b130              CBZ      r0,|L7.216|
0000ca  f8812040          STRB     r2,[r1,#0x40]         ;445
0000ce  bf00              NOP                            ;448
                  |L7.208|
0000d0  f8911040          LDRB     r1,[r1,#0x40]         ;448  ; g_tPS2
0000d4  2002              MOVS     r0,#2                 ;448
0000d6  e7ee              B        |L7.182|
                  |L7.216|
0000d8  f8813040          STRB     r3,[r1,#0x40]         ;440
0000dc  e7f8              B        |L7.208|
;;;458    
                          ENDP

0000de  0000              DCW      0x0000
                  |L7.224|
                          DCD      ||.bss||
                  |L7.228|
                          DCD      0xff200003

                          AREA ||i.PS2_ISR||, CODE, READONLY, ALIGN=2

                  PS2_ISR PROC
;;;1045   */
;;;1046   void PS2_ISR(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1047   {
;;;1048   	static uint8_t s_Byte;
;;;1049   	static uint8_t s_Pos;
;;;1050   	static uint8_t s_1Bits;
;;;1051   	uint8_t data;
;;;1052   	int32_t time;
;;;1053   	static int32_t s_last_time = 0;
;;;1054   
;;;1055   	if (g_tPS2.Sending == 0)	/* 主机接收键盘和鼠标数据的状态 */
000004  4d4e              LDR      r5,|L8.320|
;;;1056   	{
;;;1057   		if (PS2_DATA_IS_HIGH())	/* 读取 PS2_DATA 口线的电平 */
000006  484f              LDR      r0,|L8.324|
;;;1058   		{
;;;1059   			data = 1;
;;;1060   		}
;;;1061   		else
;;;1062   		{
;;;1063   			data = 0;
;;;1064   		}
;;;1065   
;;;1066   		/* 下面的代码用于超时同步. 如果2次中断的时间间隔大于2ms 则同步起始位 */
;;;1067   		time = bsp_GetRunTime();
;;;1068   		if (time - s_last_time > 2)
000008  4c4f              LDR      r4,|L8.328|
00000a  f8951038          LDRB     r1,[r5,#0x38]         ;1055  ; g_tPS2
00000e  f04f0801          MOV      r8,#1                 ;1059
000012  f04f0902          MOV      r9,#2                 ;1055
000016  f04f0a03          MOV      r10,#3                ;1055
00001a  2600              MOVS     r6,#0
00001c  b159              CBZ      r1,|L8.54|
00001e  4621              MOV      r1,r4
;;;1069   		{
;;;1070   			g_tPS2.Status = 0;
;;;1071   		}
;;;1072   		s_last_time = time;
;;;1073   
;;;1074   		/* 解码状态机 */
;;;1075   		switch (g_tPS2.Status)
;;;1076   		{
;;;1077   			case 0:			/* 起始位0 */
;;;1078   				if (data == 0)
;;;1079   				{
;;;1080   					g_tPS2.Status = 1;
;;;1081   
;;;1082   					s_Pos = 0;
;;;1083   					s_Byte = 0;
;;;1084   					s_1Bits = 0;	/* 字节中1个个数 */
;;;1085   				}
;;;1086   				break;
;;;1087   
;;;1088   			case 1:			/* 8位数据位 （bit0 先传） */
;;;1089   				s_Byte >>= 1;
;;;1090   				if (data == 1)
;;;1091   				{
;;;1092   					s_Byte += 0x80;
;;;1093   					s_1Bits++;		/* 统计1的个数 */
;;;1094   				}
;;;1095   				s_Pos++;
;;;1096   				if (s_Pos == 8)
;;;1097   				{
;;;1098   					g_tPS2.Status = 2;	/* 进入下一个状态接收校验位 */
;;;1099   				}
;;;1100   				break;
;;;1101   
;;;1102   			case 2:			/* 奇校验位 */
;;;1103   				s_1Bits += data;
;;;1104   				if (s_1Bits % 2)
;;;1105   				{
;;;1106   					g_tPS2.Status = 3;	/* 正确，进入下一个状态接收停止位 */
;;;1107   				}
;;;1108   				else
;;;1109   				{
;;;1110   					/* 校验不正确, 异常 */
;;;1111   					g_tPS2.Status = 0;
;;;1112   				}
;;;1113   				break;
;;;1114   
;;;1115   			case 3:			/* 处理停止位 */
;;;1116   				if (data == 1)
;;;1117   				{
;;;1118   					if (g_tPS2.Len < PS2_MAX_LEN)
;;;1119   					{
;;;1120   						g_tPS2.CodeBuf[g_tPS2.Len++] = s_Byte;
;;;1121   					}
;;;1122   					g_tPS2.RxTimeOut = 6;		/* 6ms 超时判断结束 */
;;;1123   				}
;;;1124   				g_tPS2.Status = 0;	/* 继续下一个bit */
;;;1125   				break;
;;;1126   		}
;;;1127   	}
;;;1128   	else		/* g_tPS2.Sending == 1, 主机发送命令的状态 */
;;;1129   	{
;;;1130   		/* 先传Bit0 */
;;;1131   		switch (g_tPS2.Status)
000020  f895302a          LDRB     r3,[r5,#0x2a]  ; g_tPS2
;;;1132   		{
;;;1133   			case 0:					/* 起始位 */
;;;1134   				g_tPS2.TxTimeOut = 0;
;;;1135   			
;;;1136   				g_tPS2.Status = 2;
;;;1137   				s_1Bits = 0;
;;;1138   				s_Pos = 0;
;;;1139   				s_Byte = g_tPS2.Cmd;
;;;1140   				break;
;;;1141   
;;;1142   			case 2:					/* 发送8个数据位 */
;;;1143   				if (s_Byte & 0x01)
;;;1144   				{
;;;1145   					PS2_DATA_1();	/* 把Data线拉高 */
000024  1582              ASRS     r2,r0,#22
000026  7889              LDRB     r1,[r1,#2]            ;1068
000028  2b06              CMP      r3,#6                 ;1131
00002a  d235              BCS      |L8.152|
00002c  e8dff003          TBB      [pc,r3]               ;1131
000030  55345e6f          DCB      0x55,0x34,0x5e,0x6f
000034  797c              DCB      0x79,0x7c
                  |L8.54|
000036  6880              LDR      r0,[r0,#8]            ;1057
000038  05c0              LSLS     r0,r0,#23             ;1057
00003a  d501              BPL      |L8.64|
00003c  2701              MOVS     r7,#1                 ;1059
00003e  e000              B        |L8.66|
                  |L8.64|
000040  2700              MOVS     r7,#0                 ;1063
                  |L8.66|
000042  f7fffffe          BL       bsp_GetRunTime
000046  6861              LDR      r1,[r4,#4]            ;1068  ; s_last_time
000048  1a41              SUBS     r1,r0,r1              ;1068
00004a  2902              CMP      r1,#2                 ;1068
00004c  dd01              BLE      |L8.82|
00004e  f885602a          STRB     r6,[r5,#0x2a]         ;1070
                  |L8.82|
000052  6060              STR      r0,[r4,#4]            ;1075  ; s_last_time
000054  f895002a          LDRB     r0,[r5,#0x2a]         ;1075  ; g_tPS2
000058  b1b8              CBZ      r0,|L8.138|
00005a  2801              CMP      r0,#1                 ;1075
00005c  d01e              BEQ      |L8.156|
00005e  2802              CMP      r0,#2                 ;1075
000060  d02e              BEQ      |L8.192|
000062  2803              CMP      r0,#3                 ;1075
000064  d118              BNE      |L8.152|
000066  b3a7              CBZ      r7,|L8.210|
000068  f8950035          LDRB     r0,[r5,#0x35]         ;1118  ; g_tPS2
00006c  280a              CMP      r0,#0xa               ;1118
00006e  d208              BCS      |L8.130|
000070  4933              LDR      r1,|L8.320|
000072  7822              LDRB     r2,[r4,#0]            ;1120  ; s_Byte
000074  312b              ADDS     r1,r1,#0x2b           ;1120
000076  5442              STRB     r2,[r0,r1]            ;1120
000078  f8950035          LDRB     r0,[r5,#0x35]         ;1120  ; g_tPS2
00007c  1c40              ADDS     r0,r0,#1              ;1120
00007e  f8850035          STRB     r0,[r5,#0x35]         ;1120
                  |L8.130|
000082  2006              MOVS     r0,#6                 ;1122
000084  f8850037          STRB     r0,[r5,#0x37]         ;1122
000088  e024              B        |L8.212|
                  |L8.138|
00008a  2f00              CMP      r7,#0                 ;1078
00008c  d104              BNE      |L8.152|
00008e  f885802a          STRB     r8,[r5,#0x2a]         ;1080
000092  7066              STRB     r6,[r4,#1]            ;1082
000094  7026              STRB     r6,[r4,#0]            ;1083
000096  70a6              STRB     r6,[r4,#2]            ;1084
                  |L8.152|
;;;1146   					s_1Bits++;		/* 统计1的个数 */
;;;1147   				}
;;;1148   				else
;;;1149   				{
;;;1150   					PS2_DATA_0();	/* 把Data线拉低 */
;;;1151   				}
;;;1152   				s_Byte >>= 1;
;;;1153   				if (++s_Pos >= 8)
;;;1154   				{
;;;1155   					g_tPS2.Status = 3;
;;;1156   				}
;;;1157   				break;
;;;1158   
;;;1159   			case 3:					/* 发送奇校验位 */
;;;1160   				if (s_1Bits % 2)
;;;1161   				{
;;;1162   					PS2_DATA_0();	/* 把Data线拉低 */
;;;1163   				}
;;;1164   				else
;;;1165   				{
;;;1166   					PS2_DATA_1();	/* 把Data线拉高 */
;;;1167   				}
;;;1168   				g_tPS2.Status = 4;
;;;1169   				break;
;;;1170   
;;;1171   			case 4:					/* 发送停止位 */
;;;1172   				PS2_DATA_1();	/* 把Data线拉高 */
;;;1173   				g_tPS2.Status = 5;
;;;1174   				break;
;;;1175   
;;;1176   			case 5:					/* 设备此时会拉低 DATA， 表示ACK应答信号 */
;;;1177   				if (PS2_DATA_IS_HIGH())	/* 读取 PS2_DATA 口线的电平 */
;;;1178   				{
;;;1179   					g_tPS2.Ack = 1;
;;;1180   				}
;;;1181   				else
;;;1182   				{
;;;1183   					g_tPS2.Ack = 0;
;;;1184   				}
;;;1185   
;;;1186   				/* 进入接收状态 */
;;;1187   				g_tPS2.Sending = 0;
;;;1188   				g_tPS2.Status = 0;
;;;1189   				break;
;;;1190   		}
;;;1191   	}
;;;1192   }
000098  e8bd87f0          POP      {r4-r10,pc}
                  |L8.156|
00009c  7820              LDRB     r0,[r4,#0]            ;1089  ; s_Byte
00009e  0840              LSRS     r0,r0,#1              ;1089
0000a0  7020              STRB     r0,[r4,#0]            ;1089
0000a2  b127              CBZ      r7,|L8.174|
0000a4  3080              ADDS     r0,r0,#0x80           ;1090
0000a6  7020              STRB     r0,[r4,#0]            ;1092
0000a8  78a0              LDRB     r0,[r4,#2]            ;1093  ; s_1Bits
0000aa  1c40              ADDS     r0,r0,#1              ;1093
0000ac  70a0              STRB     r0,[r4,#2]            ;1093
                  |L8.174|
0000ae  7860              LDRB     r0,[r4,#1]            ;1095  ; s_Pos
0000b0  1c40              ADDS     r0,r0,#1              ;1095
0000b2  b2c0              UXTB     r0,r0                 ;1095
0000b4  7060              STRB     r0,[r4,#1]            ;1095
0000b6  2808              CMP      r0,#8                 ;1096
0000b8  d1ee              BNE      |L8.152|
0000ba  f885902a          STRB     r9,[r5,#0x2a]         ;1098
0000be  e7eb              B        |L8.152|
                  |L8.192|
0000c0  78a0              LDRB     r0,[r4,#2]            ;1103  ; s_1Bits
0000c2  4438              ADD      r0,r0,r7              ;1103
0000c4  70a0              STRB     r0,[r4,#2]            ;1103
0000c6  07c0              LSLS     r0,r0,#31             ;1104
0000c8  d004              BEQ      |L8.212|
0000ca  bf00              NOP                            ;1106
                  |L8.204|
0000cc  f885a02a          STRB     r10,[r5,#0x2a]        ;1106
0000d0  e7e2              B        |L8.152|
                  |L8.210|
0000d2  e7ff              B        |L8.212|
                  |L8.212|
0000d4  f885602a          STRB     r6,[r5,#0x2a]         ;1111
0000d8  e7de              B        |L8.152|
0000da  f8056f36          STRB     r6,[r5,#0x36]!        ;1134
0000de  f8059c0c          STRB     r9,[r5,#-0xc]         ;1136
0000e2  70a6              STRB     r6,[r4,#2]            ;1137
0000e4  7066              STRB     r6,[r4,#1]            ;1138
0000e6  78e8              LDRB     r0,[r5,#3]            ;1139  ; g_tPS2
0000e8  7020              STRB     r0,[r4,#0]            ;1139
0000ea  e7d5              B        |L8.152|
0000ec  7823              LDRB     r3,[r4,#0]            ;1143  ; s_Byte
0000ee  07de              LSLS     r6,r3,#31             ;1143
0000f0  d003              BEQ      |L8.250|
0000f2  6102              STR      r2,[r0,#0x10]         ;1145
0000f4  1c49              ADDS     r1,r1,#1              ;1145
0000f6  70a1              STRB     r1,[r4,#2]            ;1146
0000f8  e000              B        |L8.252|
                  |L8.250|
0000fa  6142              STR      r2,[r0,#0x14]         ;1150
                  |L8.252|
0000fc  0858              LSRS     r0,r3,#1              ;1152
0000fe  7020              STRB     r0,[r4,#0]            ;1152
000100  7860              LDRB     r0,[r4,#1]            ;1153  ; s_Pos
000102  1c40              ADDS     r0,r0,#1              ;1153
000104  b2c0              UXTB     r0,r0                 ;1153
000106  7060              STRB     r0,[r4,#1]            ;1153
000108  2808              CMP      r0,#8                 ;1153
00010a  d2df              BCS      |L8.204|
00010c  e7c4              B        |L8.152|
00010e  07c9              LSLS     r1,r1,#31             ;1160
000110  d001              BEQ      |L8.278|
000112  6142              STR      r2,[r0,#0x14]         ;1162
000114  e000              B        |L8.280|
                  |L8.278|
000116  6102              STR      r2,[r0,#0x10]         ;1166
                  |L8.280|
000118  f05f0004          MOVS.W   r0,#4                 ;1168
                  |L8.284|
00011c  f885002a          STRB     r0,[r5,#0x2a]         ;1168
000120  e7ba              B        |L8.152|
000122  6102              STR      r2,[r0,#0x10]         ;1172
000124  2005              MOVS     r0,#5                 ;1173
000126  e7f9              B        |L8.284|
000128  6880              LDR      r0,[r0,#8]            ;1177
00012a  05c0              LSLS     r0,r0,#23             ;1177
00012c  d502              BPL      |L8.308|
00012e  f885803a          STRB     r8,[r5,#0x3a]         ;1179
000132  e001              B        |L8.312|
                  |L8.308|
000134  f885603a          STRB     r6,[r5,#0x3a]         ;1183
                  |L8.312|
000138  f8856038          STRB     r6,[r5,#0x38]         ;1187
00013c  e7ca              B        |L8.212|
;;;1193   
                          ENDP

00013e  0000              DCW      0x0000
                  |L8.320|
                          DCD      ||.bss||
                  |L8.324|
                          DCD      0x40012000
                  |L8.328|
                          DCD      ||.data||

                          AREA ||i.PS2_InitKeyboard||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  PS2_InitKeyboard PROC
;;;761    */
;;;762    uint8_t PS2_InitKeyboard(void)
000000  b570              PUSH     {r4-r6,lr}
;;;763    {
;;;764    	uint32_t Rsp;	/* 鼠标给主机的应答数据 */
;;;765    	uint16_t i;
;;;766    	uint8_t err = 0;
;;;767    
;;;768    	const uint8_t ucCmdList[] = {
000002  a122              ADR      r1,|L9.140|
000004  b086              SUB      sp,sp,#0x18           ;763
000006  e9d10100          LDRD     r0,r1,[r1,#0]
00000a  e9cd0100          STRD     r0,r1,[sp,#0]
;;;769    		0xFF,	// Reset command    ->  Mouse: FA AA 00
;;;770    
;;;771    		0xED,	// 点亮3个指示灯
;;;772    		0x07,
;;;773    
;;;774    		0xED,	// 关闭3个指示灯
;;;775    		0x00,
;;;776    	};
;;;777    
;;;778    	g_tPS2.ksShift = 0;					/* 1表示 Shift 键被按下 */
00000e  4921              LDR      r1,|L9.148|
000010  2500              MOVS     r5,#0                 ;766
;;;779    	g_tPS2.ksCtrl = 0;					/* 1表示 Ctrl 键被按下 */
;;;780    	g_tPS2.ksAlt = 0;					/* 1表示 Alt 键被按下 */
;;;781    	g_tPS2.ksCapsLock = 0;				/* 1表示 CapsLock 状态指示灯亮 */
;;;782    	g_tPS2.KsNumLock = 0;				/* 1表示 NumLock 状态指示灯亮 */
;;;783    	g_tPS2.KsScrollLock = 0;			/* 1表示 ScrollLock 状态指示灯亮 */
;;;784    
;;;785    	ps2_printf("Init Keyboard ...\r\n");
000012  a021              ADR      r0,|L9.152|
000014  f8015f3b          STRB     r5,[r1,#0x3b]!        ;778
000018  704d              STRB     r5,[r1,#1]            ;779
00001a  708d              STRB     r5,[r1,#2]            ;780
00001c  70cd              STRB     r5,[r1,#3]            ;781
00001e  710d              STRB     r5,[r1,#4]            ;782
000020  714d              STRB     r5,[r1,#5]            ;783
000022  f7fffffe          BL       __2printf
;;;786    	for (i = 0; i < sizeof(ucCmdList); i++)
000026  2400              MOVS     r4,#0
000028  466e              MOV      r6,sp                 ;768
                  |L9.42|
;;;787    	{
;;;788    		ps2_printf("Host : %02X",ucCmdList[i]);
00002a  a020              ADR      r0,|L9.172|
00002c  5d31              LDRB     r1,[r6,r4]
00002e  f7fffffe          BL       __2printf
;;;789    		PS2_SendCmd(ucCmdList[i]);
000032  5d30              LDRB     r0,[r6,r4]
000034  f7fffffe          BL       PS2_SendCmd
;;;790    		if (PS2_WaitMsg(&Rsp, 20))
000038  2114              MOVS     r1,#0x14
00003a  a802              ADD      r0,sp,#8
00003c  f7fffffe          BL       PS2_WaitMsg
000040  b1a0              CBZ      r0,|L9.108|
;;;791    		{
;;;792    			ps2_printf("   KeyBoard : %X\r\n",Rsp);
000042  a01d              ADR      r0,|L9.184|
000044  9902              LDR      r1,[sp,#8]
000046  f7fffffe          BL       __2printf
;;;793    
;;;794    			if (ucCmdList[i] == 0xFF)	/* 如果是复位指令，则等到鼠标内部自检，然后返回0xAA 00 */
00004a  5d30              LDRB     r0,[r6,r4]
00004c  28ff              CMP      r0,#0xff
00004e  d111              BNE      |L9.116|
;;;795    			{
;;;796    				ps2_printf("   KeyBoard resetting ...\r\n");
000050  a01e              ADR      r0,|L9.204|
000052  f7fffffe          BL       __2printf
;;;797    				if (PS2_WaitMsg(&Rsp, 1000))
000056  f44f717a          MOV      r1,#0x3e8
00005a  a802              ADD      r0,sp,#8
00005c  f7fffffe          BL       PS2_WaitMsg
000060  b140              CBZ      r0,|L9.116|
;;;798    				{
;;;799    					ps2_printf("   KeyBoard : %X\r\n",Rsp);
000062  a015              ADR      r0,|L9.184|
000064  9902              LDR      r1,[sp,#8]
000066  f7fffffe          BL       __2printf
00006a  e003              B        |L9.116|
                  |L9.108|
;;;800    				}
;;;801    			}
;;;802    		}
;;;803    		else
;;;804    		{
;;;805    			ps2_printf("   KeyBoard : 无应答\r\n");
00006c  a01e              ADR      r0,|L9.232|
00006e  f7fffffe          BL       __2printf
;;;806    			err = 1;
000072  2501              MOVS     r5,#1
                  |L9.116|
000074  1c64              ADDS     r4,r4,#1
000076  b2a4              UXTH     r4,r4                 ;786
000078  2c05              CMP      r4,#5                 ;786
00007a  d3d6              BCC      |L9.42|
;;;807    		}
;;;808    	}
;;;809    
;;;810    	if (err == 1)
00007c  2d01              CMP      r5,#1
00007e  d002              BEQ      |L9.134|
;;;811    	{
;;;812    		return 0;
;;;813    	}
;;;814    	return 1;
000080  2001              MOVS     r0,#1
                  |L9.130|
;;;815    }
000082  b006              ADD      sp,sp,#0x18
000084  bd70              POP      {r4-r6,pc}
                  |L9.134|
000086  2000              MOVS     r0,#0                 ;812
000088  e7fb              B        |L9.130|
;;;816    
                          ENDP

00008a  0000              DCW      0x0000
                  |L9.140|
00008c  ffed07ed          DCB      255,237,"\a",237,0
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L9.148|
                          DCD      ||.bss||
                  |L9.152|
000098  496e6974          DCB      "Init Keyboard ...\r\n",0
00009c  204b6579
0000a0  626f6172
0000a4  64202e2e
0000a8  2e0d0a00
                  |L9.172|
0000ac  486f7374          DCB      "Host : %02X",0
0000b0  203a2025
0000b4  30325800
                  |L9.184|
0000b8  2020204b          DCB      "   KeyBoard : %X\r\n",0
0000bc  6579426f
0000c0  61726420
0000c4  3a202558
0000c8  0d0a00  
0000cb  00                DCB      0
                  |L9.204|
0000cc  2020204b          DCB      "   KeyBoard resetting ...\r\n",0
0000d0  6579426f
0000d4  61726420
0000d8  72657365
0000dc  7474696e
0000e0  67202e2e
0000e4  2e0d0a00
                  |L9.232|
0000e8  2020204b          DCB      "   KeyBoard : ",206,222,211,166,180,240,"\r\n",0
0000ec  6579426f
0000f0  61726420
0000f4  3a20cede
0000f8  d3a6b4f0
0000fc  0d0a00  
0000ff  00                DCB      0

                          AREA ||i.PS2_InitMouse||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  PS2_InitMouse PROC
;;;824    */
;;;825    uint8_t PS2_InitMouse(void)
000000  b570              PUSH     {r4-r6,lr}
;;;826    {
000002  b086              SUB      sp,sp,#0x18
;;;827    	uint32_t Rsp;	/* 鼠标给主机的应答数据 */
;;;828    	uint16_t i;
;;;829    	const uint8_t ucCmdList[] = {
000004  2214              MOVS     r2,#0x14
000006  a11a              ADR      r1,|L10.112|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;830    		0xFF,	// Reset command    ->  Mouse: FA AA 00
;;;831    
;;;832    		0xF3,	// Set Sample Rate:Attempt to Enter Microsoft
;;;833    				// Mouse: FA  Acknowledge : Scrolling Mouse mode
;;;834    
;;;835    		0xC8,	// Decimal 200  ->  Mouse: FA  Acknowledge       :
;;;836    
;;;837    		0xF3,	// Set Sample Rate -> Mouse: FA  Acknowledge
;;;838    
;;;839    		0x64,	// decimal 100 -> Mouse: FA  Acknowledge       :
;;;840    		0xF3,	// Set Sample Rate -> Mouse: FA  Acknowledge       :
;;;841    		0x50,	// decimal 80 -> Mouse: FA  Acknowledge       :
;;;842    
;;;843    		0xF2,	// Read Device Type ->	Mouse: FA  Acknowledge       :
;;;844    									//  Mouse: 00  Mouse ID  Response 03 if microsoft scrolling mouse
;;;845    		0xF3,	// Set Sample Rate ->	Mouse: FA  Acknowledge
;;;846    		0x0A,	// decimal 10  -> Mouse: FA  Acknowledge
;;;847    		0xF2,	// Read Device Type  ->  Mouse: FA  Acknowledge
;;;848    				//						 Mouse: 00  Mouse ID
;;;849    
;;;850    		0xE8,	// Set resolution ->  Mouse: FA  Acknowledge
;;;851    		0x03,	// 8 Counts/mm  -> 	Mouse: FA  Acknowledge
;;;852    		0xE6,	// Set Scaling 1:1  -> Mouse: FA  Acknowledge
;;;853    		0xF3,	// Set Sample Rate  -> Mouse: FA  Acknowledge
;;;854    		0x28,	// decimal 40  ->  Mouse: FA  Acknowledge
;;;855    		0xF4,	// Enable  ->  Mouse: FA  Acknowledge
;;;856    	};
;;;857    
;;;858    	ps2_printf("Init Mouse ...\r\n");
00000e  a01d              ADR      r0,|L10.132|
000010  f7fffffe          BL       __2printf
;;;859    	for (i = 0; i < sizeof(ucCmdList); i++)
000014  2400              MOVS     r4,#0
000016  466d              MOV      r5,sp                 ;829
;;;860    	{
;;;861    		ps2_printf("Host : %02X",ucCmdList[i]);
;;;862    		PS2_SendCmd(ucCmdList[i]);
;;;863    		if (PS2_WaitMsg(&Rsp, 20))
;;;864    		{
;;;865    			ps2_printf("   Mouse : %X\r\n",Rsp);
;;;866    
;;;867    			if (ucCmdList[i] == 0xFF)	/* 如果是复位指令，则等到鼠标内部自检，然后返回0xAA 00 */
;;;868    			{
;;;869    				ps2_printf("   Mouse resetting ...\r\n");
;;;870    				if (PS2_WaitMsg(&Rsp, 1000))
000018  f44f767a          MOV      r6,#0x3e8
                  |L10.28|
00001c  5d29              LDRB     r1,[r5,r4]            ;861
00001e  a01e              ADR      r0,|L10.152|
000020  f7fffffe          BL       __2printf
000024  5d28              LDRB     r0,[r5,r4]            ;862
000026  f7fffffe          BL       PS2_SendCmd
00002a  2114              MOVS     r1,#0x14              ;863
00002c  a805              ADD      r0,sp,#0x14           ;863
00002e  f7fffffe          BL       PS2_WaitMsg
000032  b198              CBZ      r0,|L10.92|
000034  a01b              ADR      r0,|L10.164|
000036  9905              LDR      r1,[sp,#0x14]         ;865
000038  f7fffffe          BL       __2printf
00003c  5d28              LDRB     r0,[r5,r4]            ;867
00003e  28ff              CMP      r0,#0xff              ;867
000040  d10f              BNE      |L10.98|
000042  a01c              ADR      r0,|L10.180|
000044  f7fffffe          BL       __2printf
000048  4631              MOV      r1,r6
00004a  a805              ADD      r0,sp,#0x14
00004c  f7fffffe          BL       PS2_WaitMsg
000050  b138              CBZ      r0,|L10.98|
;;;871    				{
;;;872    					ps2_printf("   Mouse : %X\r\n",Rsp);
000052  a014              ADR      r0,|L10.164|
000054  9905              LDR      r1,[sp,#0x14]
000056  f7fffffe          BL       __2printf
00005a  e002              B        |L10.98|
                  |L10.92|
;;;873    				}
;;;874    			}
;;;875    		}
;;;876    		else
;;;877    		{
;;;878    			ps2_printf("   Mouse : 无应答\r\n");
00005c  a01c              ADR      r0,|L10.208|
00005e  f7fffffe          BL       __2printf
                  |L10.98|
000062  1c64              ADDS     r4,r4,#1
000064  b2a4              UXTH     r4,r4                 ;859
000066  2c11              CMP      r4,#0x11              ;859
000068  d3d8              BCC      |L10.28|
;;;879    		}
;;;880    	}
;;;881    	return 1;
;;;882    }
00006a  b006              ADD      sp,sp,#0x18
00006c  2001              MOVS     r0,#1                 ;881
00006e  bd70              POP      {r4-r6,pc}
;;;883    
                          ENDP

                  |L10.112|
000070  fff3c8f3          DCB      255,243,200,243,"d",243,"P",242,243,"\n",242,232,3,230,243
000074  64f350f2
000078  f30af2e8
00007c  03e6f3  
00007f  28f400            DCB      "(",244,0
000082  00                DCB      0
000083  00                DCB      0
                  |L10.132|
000084  496e6974          DCB      "Init Mouse ...\r\n",0
000088  204d6f75
00008c  7365202e
000090  2e2e0d0a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L10.152|
000098  486f7374          DCB      "Host : %02X",0
00009c  203a2025
0000a0  30325800
                  |L10.164|
0000a4  2020204d          DCB      "   Mouse : %X\r\n",0
0000a8  6f757365
0000ac  203a2025
0000b0  580d0a00
                  |L10.180|
0000b4  2020204d          DCB      "   Mouse resetting ...\r\n",0
0000b8  6f757365
0000bc  20726573
0000c0  65747469
0000c4  6e67202e
0000c8  2e2e0d0a
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L10.208|
0000d0  2020204d          DCB      "   Mouse : ",206,222,211,166,180,240,"\r\n",0
0000d4  6f757365
0000d8  203a20ce
0000dc  ded3a6b4
0000e0  f00d0a00

                          AREA ||i.PS2_IsMousePacket||, CODE, READONLY, ALIGN=1

                  PS2_IsMousePacket PROC
;;;891    */
;;;892    uint8_t PS2_IsMousePacket(uint32_t _input)
000000  0100              LSLS     r0,r0,#4
;;;893    {
000002  d501              BPL      |L11.8|
;;;894    	/* 鼠标发送的第1个字节 */
;;;895    	if (_input & 0x08000000)
;;;896    	{
;;;897    		return 1;
000004  2001              MOVS     r0,#1
;;;898    	}
;;;899    	else
;;;900    	{
;;;901    		return 0;
;;;902    	}
;;;903    }
000006  4770              BX       lr
                  |L11.8|
000008  2000              MOVS     r0,#0                 ;901
00000a  4770              BX       lr
;;;904    
                          ENDP


                          AREA ||i.PS2_PutMsg||, CODE, READONLY, ALIGN=2

                  PS2_PutMsg PROC
;;;497    */
;;;498    void PS2_PutMsg(uint32_t _KeyCode)
000000  4908              LDR      r1,|L12.36|
;;;499    {
;;;500    	g_tPS2.Buf[g_tPS2.Write] = _KeyCode;
000002  f8912029          LDRB     r2,[r1,#0x29]  ; g_tPS2
000006  f8410022          STR      r0,[r1,r2,LSL #2]
;;;501    
;;;502    	if (++g_tPS2.Write  >= KEY_FIFO_SIZE)
00000a  f8910029          LDRB     r0,[r1,#0x29]  ; g_tPS2
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0
000012  f8810029          STRB     r0,[r1,#0x29]
000016  280a              CMP      r0,#0xa
000018  d302              BCC      |L12.32|
;;;503    	{
;;;504    		g_tPS2.Write = 0;
00001a  2000              MOVS     r0,#0
00001c  f8810029          STRB     r0,[r1,#0x29]
                  |L12.32|
;;;505    	}
;;;506    }
000020  4770              BX       lr
;;;507    
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      ||.bss||

                          AREA ||i.PS2_SendCmd||, CODE, READONLY, ALIGN=2

                  PS2_SendCmd PROC
;;;562    */
;;;563    static void PS2_SendCmd(uint8_t _byte)
000000  b570              PUSH     {r4-r6,lr}
;;;564    {
;;;565    	/*
;;;566    		主机必须按下面的步骤发送数据到PS/2设备：
;;;567    		1)  把Clock线拉低至少100us；
;;;568    		2)  把Data线拉低；
;;;569    		3)  释放Clock线；
;;;570    		4)  等待PS/2设备把Clock线拉低；
;;;571    		5)  设置/复位Data线发送第一个数据位；
;;;572    		6)  等待PS/2设备把时钟拉高；
;;;573    		7)  等待PS/2设备把时钟拉低；
;;;574    		8)  重复5-7步发送剩下的7个数据位和校验位；
;;;575    		9)  释放Data线，即发送停止位(1)；
;;;576    		10) 等待PS/2设备把Clock线拉高； //此步可省略,因为下一步PS/2设备还是会把Data线拉低的
;;;577    		11) 等待PS/2设备把Data线拉低；
;;;578    		12) 等待PS/2设备把Clock线拉低；
;;;579    		13) 等待PS/2设备释放Clock线和Data线。
;;;580    	*/
;;;581    
;;;582    	g_tPS2.Sending = 1;
000002  4c0c              LDR      r4,|L13.52|
000004  2101              MOVS     r1,#1
;;;583    	g_tPS2.Cmd = _byte;
;;;584    	g_tPS2.Status = 0;	/*  */
;;;585    
;;;586    	PS2_CLK_0();		/* 把Clock线拉低至少100us --- 设置低后会触发CLK下降沿中断（中断服务程序应该丢弃这个事件） */
000006  4e0c              LDR      r6,|L13.56|
000008  f8841038          STRB     r1,[r4,#0x38]         ;582
00000c  f8840039          STRB     r0,[r4,#0x39]         ;583
000010  2000              MOVS     r0,#0                 ;584
000012  f8040f2a          STRB     r0,[r4,#0x2a]!        ;584
000016  034d              LSLS     r5,r1,#13
000018  6175              STR      r5,[r6,#0x14]
;;;587    	bsp_DelayUS(100);
00001a  2064              MOVS     r0,#0x64
00001c  f7fffffe          BL       bsp_DelayUS
;;;588    
;;;589    	PS2_DATA_0();		/* 把Data线拉低 */
000020  4906              LDR      r1,|L13.60|
000022  1168              ASRS     r0,r5,#5
000024  6148              STR      r0,[r1,#0x14]
;;;590    	g_tPS2.TxTimeOut = 2;		/* 避免没插PS2设备时，DATA线一直被拉低 */
000026  2002              MOVS     r0,#2
000028  7320              STRB     r0,[r4,#0xc]
;;;591    
;;;592    	bsp_DelayUS(50);
00002a  2032              MOVS     r0,#0x32
00002c  f7fffffe          BL       bsp_DelayUS
;;;593    
;;;594    	PS2_CLK_1();		/* 释放Clock线 */
000030  6135              STR      r5,[r6,#0x10]
;;;595    
;;;596    	/* 后面的过程有CLK下降沿中断服务程序完成 */
;;;597    	
;;;598    }
000032  bd70              POP      {r4-r6,pc}
;;;599    
                          ENDP

                  |L13.52|
                          DCD      ||.bss||
                  |L13.56|
                          DCD      0x40011000
                  |L13.60|
                          DCD      0x40012000

                          AREA ||i.PS2_SetKeyboardLed||, CODE, READONLY, ALIGN=2

                  PS2_SetKeyboardLed PROC
;;;692    */
;;;693    void PS2_SetKeyboardLed(uint8_t _id, uint8_t _on)
000000  4a12              LDR      r2,|L14.76|
;;;694    {
000002  b120              CBZ      r0,|L14.14|
;;;695    	/*
;;;696    		0xED (Set/Reset LEDs) 主机在本命令后跟随一个参数字节用于指示键盘上Num Lock, Caps Lock,
;;;697    		and Scroll Lock LED 的状态 这个参数字节的定义如下
;;;698    
;;;699    		bin7      bin6      bin5      bin4      bin3      bin2       bin1      bin0
;;;700    		Always 0  Always 0  Always 0  Always 0  Always 0  Caps Lock  Num Lock  Scroll Lock
;;;701    		  "Scroll Lock" - Scroll Lock LED off(0)/on(1)
;;;702    		  "Num Lock" - Num Lock LED off(0)/on(1)
;;;703    		  "Caps Lock" - Caps Lock LED off(0)/on(1)
;;;704    	*/
;;;705    	uint8_t data;
;;;706    	//uint32_t Rsp;
;;;707    
;;;708    	if (_id == LED_CapsLock)
;;;709    	{
;;;710    		g_tPS2.ksCapsLock = _on;
;;;711    	}
;;;712    	else if (_id == LED_NumLock)
000004  2801              CMP      r0,#1
000006  d005              BEQ      |L14.20|
;;;713    	{
;;;714    		g_tPS2.KsNumLock = _on;
;;;715    	}
;;;716    	else if (_id == LED_ScrollLock)
000008  2802              CMP      r0,#2
00000a  d006              BEQ      |L14.26|
00000c  e007              B        |L14.30|
                  |L14.14|
00000e  f882103e          STRB     r1,[r2,#0x3e]         ;710
000012  e004              B        |L14.30|
                  |L14.20|
000014  f882103f          STRB     r1,[r2,#0x3f]         ;714
000018  e001              B        |L14.30|
                  |L14.26|
;;;717    	{
;;;718    		g_tPS2.KsScrollLock = _on;
00001a  f8821040          STRB     r1,[r2,#0x40]
                  |L14.30|
;;;719    	}
;;;720    
;;;721    	data = 0;
;;;722    	if (g_tPS2.ksCapsLock == 1)
00001e  f892103e          LDRB     r1,[r2,#0x3e]  ; g_tPS2
000022  2000              MOVS     r0,#0                 ;721
000024  2901              CMP      r1,#1
000026  d100              BNE      |L14.42|
;;;723    	{
;;;724    		data |= (1 << 2);
000028  2004              MOVS     r0,#4
                  |L14.42|
;;;725    	}
;;;726    	if (g_tPS2.KsNumLock == 1)
00002a  f892103f          LDRB     r1,[r2,#0x3f]  ; g_tPS2
00002e  2901              CMP      r1,#1
000030  d101              BNE      |L14.54|
;;;727    	{
;;;728    		data |= (1 << 1);
000032  f0400002          ORR      r0,r0,#2
                  |L14.54|
;;;729    	}
;;;730    	if (g_tPS2.KsScrollLock == 1)
000036  f8921040          LDRB     r1,[r2,#0x40]  ; g_tPS2
00003a  2901              CMP      r1,#1
00003c  d101              BNE      |L14.66|
;;;731    	{
;;;732    		data |= (1 << 0);
00003e  f0400001          ORR      r0,r0,#1
                  |L14.66|
;;;733    	}
;;;734    
;;;735    #if 1	/* 在 systick ms中断服务程序中被执行 */	
;;;736    	g_tPS2.LedReq = 1;
000042  2101              MOVS     r1,#1
000044  f8021f41          STRB     r1,[r2,#0x41]!
;;;737    	g_tPS2.LedData = data;
000048  7050              STRB     r0,[r2,#1]
;;;738    #else	
;;;739    	ps2_printf("Host : %02X",0xED);
;;;740    	PS2_SendCmd(0xED);
;;;741    	if (PS2_WaitMsg(&Rsp, 20))
;;;742    	{
;;;743    		ps2_printf("   KeyBoard : %X\r\n",Rsp);
;;;744    	}
;;;745    
;;;746    	PS2_SendCmd(data);
;;;747    	if (PS2_WaitMsg(&Rsp, 20))
;;;748    	{
;;;749    		ps2_printf("   KeyBoard : %X\r\n",Rsp);
;;;750    	}
;;;751    #endif	
;;;752    }
00004a  4770              BX       lr
;;;753    
                          ENDP

                  |L14.76|
                          DCD      ||.bss||

                          AREA ||i.PS2_StartWork||, CODE, READONLY, ALIGN=2

                  PS2_StartWork PROC
;;;217    */
;;;218    void PS2_StartWork(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;219    {
;;;220    	EXTI_InitTypeDef   EXTI_InitStructure;
;;;221    	NVIC_InitTypeDef   NVIC_InitStructure;
;;;222    
;;;223    	/* 使能SYSCFG时钟 */
;;;224    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);  /* Enable AFIO clock */
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;225    
;;;226    	/* Connect EXTI13 Line to PC13 pin */
;;;227    	GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource13);	
00000a  210d              MOVS     r1,#0xd
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       GPIO_EXTILineConfig
;;;228    
;;;229    	/* 配置 EXTI LineXXX */
;;;230    	EXTI_InitStructure.EXTI_Line = EXTI_Line13;
;;;231    	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000012  2500              MOVS     r5,#0
000014  f88d5004          STRB     r5,[sp,#4]
;;;232    	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;		/* 下降沿(等待 DRDY 由1变0的时刻) */
000018  200c              MOVS     r0,#0xc
00001a  f88d0005          STRB     r0,[sp,#5]
00001e  f44f5400          MOV      r4,#0x2000            ;230
;;;233    	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000022  2601              MOVS     r6,#1
000024  9400              STR      r4,[sp,#0]            ;231
000026  f88d6006          STRB     r6,[sp,#6]
;;;234    	EXTI_Init(&EXTI_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       EXTI_Init
;;;235    
;;;236    	/* 设置NVIC优先级分组 */
;;;237    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
000030  f44f7040          MOV      r0,#0x300
000034  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;238    
;;;239    	/* 中断优先级配置 最低优先级 这里一定要分开的设置中断，不能够合并到一个里面设置 */
;;;240    	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
000038  2028              MOVS     r0,#0x28
00003a  f88d0008          STRB     r0,[sp,#8]
;;;241    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
00003e  2003              MOVS     r0,#3
000040  f88d0009          STRB     r0,[sp,#9]
;;;242    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
000044  f88d000a          STRB     r0,[sp,#0xa]
;;;243    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000048  f88d600b          STRB     r6,[sp,#0xb]
;;;244    	NVIC_Init(&NVIC_InitStructure);
00004c  a802              ADD      r0,sp,#8
00004e  f7fffffe          BL       NVIC_Init
;;;245    
;;;246    	PS2_CLK_1();
000052  4805              LDR      r0,|L15.104|
000054  6104              STR      r4,[r0,#0x10]
;;;247    	PS2_DATA_1();
000056  4905              LDR      r1,|L15.108|
000058  1580              ASRS     r0,r0,#22
00005a  6108              STR      r0,[r1,#0x10]
;;;248    
;;;249    	g_tPS2.Status = 0;
00005c  4804              LDR      r0,|L15.112|
00005e  f880502a          STRB     r5,[r0,#0x2a]
;;;250    
;;;251    	PS2_ClearBuf();		/* 复位FIFO，清除缓冲区 */
000062  f7fffffe          BL       PS2_ClearBuf
;;;252    }
000066  bdfe              POP      {r1-r7,pc}
;;;253    
                          ENDP

                  |L15.104|
                          DCD      0x40011000
                  |L15.108|
                          DCD      0x40012000
                  |L15.112|
                          DCD      ||.bss||

                          AREA ||i.PS2_StopWork||, CODE, READONLY, ALIGN=1

                  PS2_StopWork PROC
;;;261    */
;;;262    void PS2_StopWork(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;263    {
;;;264    	EXTI_InitTypeDef   EXTI_InitStructure;
;;;265    //	NVIC_InitTypeDef   NVIC_InitStructure;
;;;266    
;;;267    	/* 配置 EXTI LineXXX */
;;;268    	EXTI_InitStructure.EXTI_Line = EXTI_Line13;
000002  f44f5000          MOV      r0,#0x2000
;;;269    	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000006  9000              STR      r0,[sp,#0]
000008  2000              MOVS     r0,#0
00000a  f88d0004          STRB     r0,[sp,#4]
;;;270    	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;	/* 下降沿(等待 DRDY 由1变0的时刻) */
00000e  210c              MOVS     r1,#0xc
000010  f88d1005          STRB     r1,[sp,#5]
;;;271    	EXTI_InitStructure.EXTI_LineCmd = DISABLE;		/* 禁止 */
000014  f88d0006          STRB     r0,[sp,#6]
;;;272    	EXTI_Init(&EXTI_InitStructure);
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       EXTI_Init
;;;273    
;;;274    #if 0
;;;275    	/* 中断优先级配置 最低优先级 这里一定要分开的设置中断，不能够合并到一个里面设置 */
;;;276    	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
;;;277    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
;;;278    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
;;;279    	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;		/* 禁止 */
;;;280    	NVIC_Init(&NVIC_InitStructure);
;;;281    #endif
;;;282    
;;;283    	PS2_ClearBuf();
00001e  f7fffffe          BL       PS2_ClearBuf
;;;284    }
000022  bd1c              POP      {r2-r4,pc}
;;;285    
                          ENDP


                          AREA ||i.PS2_Timer||, CODE, READONLY, ALIGN=2

                  PS2_Timer PROC
;;;293    */
;;;294    void PS2_Timer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;295    {
;;;296    	if (g_tPS2.TxTimeOut > 0)
000002  4c2f              LDR      r4,|L17.192|
000004  f8940036          LDRB     r0,[r4,#0x36]  ; g_tPS2
000008  b148              CBZ      r0,|L17.30|
00000a  1e40              SUBS     r0,r0,#1              ;295
;;;297    	{
;;;298    		if (--g_tPS2.TxTimeOut == 0)
00000c  f01000ff          ANDS     r0,r0,#0xff
000010  f8840036          STRB     r0,[r4,#0x36]
000014  d103              BNE      |L17.30|
;;;299    		{
;;;300    			/* 释放 DATA线 */
;;;301    			PS2_DATA_1();
000016  492b              LDR      r1,|L17.196|
000018  f44f7080          MOV      r0,#0x100
00001c  6108              STR      r0,[r1,#0x10]
                  |L17.30|
;;;302    		}
;;;303    	}
;;;304    	if (g_tPS2.RxTimeOut > 0)
00001e  f8940037          LDRB     r0,[r4,#0x37]  ; g_tPS2
000022  2500              MOVS     r5,#0
000024  b358              CBZ      r0,|L17.126|
000026  1e40              SUBS     r0,r0,#1
;;;305    	{
;;;306    		g_tPS2.RxTimeOut--;
000028  f01000ff          ANDS     r0,r0,#0xff
00002c  f8840037          STRB     r0,[r4,#0x37]
;;;307    
;;;308    		if (g_tPS2.RxTimeOut == 0)
000030  d125              BNE      |L17.126|
;;;309    		{
;;;310    			if (g_tPS2.Len > 0)
000032  f8940035          LDRB     r0,[r4,#0x35]  ; g_tPS2
000036  b310              CBZ      r0,|L17.126|
000038  4921              LDR      r1,|L17.192|
;;;311    			{
;;;312    				uint32_t value;
;;;313    
;;;314    				if (g_tPS2.Len == 1)
00003a  2801              CMP      r0,#1
;;;315    				{
;;;316    					value = g_tPS2.CodeBuf[0];
00003c  f891602b          LDRB     r6,[r1,#0x2b]
000040  d010              BEQ      |L17.100|
;;;317    				}
;;;318    				else if (g_tPS2.Len == 2)
;;;319    				{
;;;320    					value = (g_tPS2.CodeBuf[0] << 8) + g_tPS2.CodeBuf[1];
000042  f891102c          LDRB     r1,[r1,#0x2c]
000046  2802              CMP      r0,#2                 ;318
000048  d02a              BEQ      |L17.160|
00004a  4a1d              LDR      r2,|L17.192|
;;;321    				}
;;;322    				else if (g_tPS2.Len == 3)
00004c  2803              CMP      r0,#3
;;;323    				{
;;;324    					value = (g_tPS2.CodeBuf[0] << 16) + (g_tPS2.CodeBuf[1] << 8) + g_tPS2.CodeBuf[2];
00004e  f892202d          LDRB     r2,[r2,#0x2d]
000052  d028              BEQ      |L17.166|
;;;325    				}
;;;326    				else
;;;327    				{
;;;328    					value = (g_tPS2.CodeBuf[0] << 24) + (g_tPS2.CodeBuf[1] << 16) +
000054  f894002e          LDRB     r0,[r4,#0x2e]  ; g_tPS2
000058  0409              LSLS     r1,r1,#16
00005a  eb006006          ADD      r0,r0,r6,LSL #24
00005e  eb012102          ADD      r1,r1,r2,LSL #8
000062  1846              ADDS     r6,r0,r1
                  |L17.100|
;;;329    							(g_tPS2.CodeBuf[2] << 8) + g_tPS2.CodeBuf[3];
;;;330    				}
;;;331    
;;;332    				g_tPS2.Len = 0;
000064  f8845035          STRB     r5,[r4,#0x35]
;;;333    
;;;334    				if (PS2_HookKeyboard(value))
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       PS2_HookKeyboard
00006e  b130              CBZ      r0,|L17.126|
;;;335    				{
;;;336    					if (g_tPS2.LedReq < 2)	/* 主机给键盘发送命令阶段 不将键盘的应答消息送往应用层 */
000070  f8940041          LDRB     r0,[r4,#0x41]  ; g_tPS2
000074  2802              CMP      r0,#2
000076  d202              BCS      |L17.126|
;;;337    					{					
;;;338    						PS2_PutMsg(value);	/* 将按键代码放入FIFO, 交给应用层处理 */
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       PS2_PutMsg
                  |L17.126|
;;;339    					}
;;;340    				}
;;;341    			}
;;;342    		}
;;;343    	}
;;;344    	
;;;345    	/* 给键盘发送命令，控制键盘的指示灯 */
;;;346    	if (g_tPS2.LedReq > 0)
00007e  f8940041          LDRB     r0,[r4,#0x41]  ; g_tPS2
000082  2800              CMP      r0,#0
000084  d00b              BEQ      |L17.158|
000086  1c40              ADDS     r0,r0,#1
;;;347    	{
;;;348    		g_tPS2.LedReq++;
000088  b2c0              UXTB     r0,r0
00008a  f8840041          STRB     r0,[r4,#0x41]
;;;349    		if (g_tPS2.LedReq == 2)
00008e  2802              CMP      r0,#2
000090  d00e              BEQ      |L17.176|
;;;350    		{			
;;;351    			PS2_SendCmd(0xED);				/* 发送指令第1字节 -- 修改LED状态  */
;;;352    		}
;;;353    		else if (g_tPS2.LedReq == 7)
000092  2807              CMP      r0,#7
000094  d00e              BEQ      |L17.180|
;;;354    		{
;;;355    			PS2_SendCmd(g_tPS2.LedData);	/* 延迟5ms 发送指令第2字节 -- 指示灯状态 */
;;;356    		}		
;;;357    		else if (g_tPS2.LedReq == 17)		/* 再延迟10ms, 等键盘的应答完成后退出 */
000096  2811              CMP      r0,#0x11
000098  d101              BNE      |L17.158|
;;;358    		{
;;;359    			g_tPS2.LedReq = 0;
00009a  f8845041          STRB     r5,[r4,#0x41]
                  |L17.158|
;;;360    		}
;;;361    	}
;;;362    }
00009e  bd70              POP      {r4-r6,pc}
                  |L17.160|
0000a0  eb012606          ADD      r6,r1,r6,LSL #8       ;320
0000a4  e7de              B        |L17.100|
                  |L17.166|
0000a6  0430              LSLS     r0,r6,#16             ;324
0000a8  eb002001          ADD      r0,r0,r1,LSL #8       ;324
0000ac  1886              ADDS     r6,r0,r2              ;324
0000ae  e7d9              B        |L17.100|
                  |L17.176|
0000b0  20ed              MOVS     r0,#0xed              ;351
0000b2  e001              B        |L17.184|
                  |L17.180|
0000b4  f8940042          LDRB     r0,[r4,#0x42]         ;355  ; g_tPS2
                  |L17.184|
0000b8  e8bd4070          POP      {r4-r6,lr}            ;355
0000bc  f7ffbffe          B.W      PS2_SendCmd
;;;363    
                          ENDP

                  |L17.192|
                          DCD      ||.bss||
                  |L17.196|
                          DCD      0x40012000

                          AREA ||i.PS2_WaitMsg||, CODE, READONLY, ALIGN=2

                  PS2_WaitMsg PROC
;;;608    */
;;;609    static uint8_t PS2_WaitMsg(uint32_t *_rsp, uint16_t _timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;610    {
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;611    	uint32_t read;
;;;612    	uint16_t i;
;;;613    
;;;614    	for (i = 0; i < _timeout; i++)
000008  2400              MOVS     r4,#0
;;;615    	{
;;;616    		read = PS2_GetMsg();
;;;617    		if (read != PS2_NONE)
;;;618    		{
;;;619    			*_rsp = read;
;;;620    			break;
;;;621    		}
;;;622    		bsp_DelayUS(1000);
00000a  f44f777a          MOV      r7,#0x3e8
00000e  e009              B        |L18.36|
                  |L18.16|
000010  f7fffffe          BL       PS2_GetMsg
000014  b108              CBZ      r0,|L18.26|
000016  6030              STR      r0,[r6,#0]            ;620
000018  e006              B        |L18.40|
                  |L18.26|
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       bsp_DelayUS
000020  1c64              ADDS     r4,r4,#1
000022  b2a4              UXTH     r4,r4                 ;614
                  |L18.36|
000024  42ac              CMP      r4,r5                 ;614
000026  d3f3              BCC      |L18.16|
                  |L18.40|
;;;623    	}
;;;624    
;;;625    	g_tPS2.Sending = 0;
000028  4904              LDR      r1,|L18.60|
00002a  2000              MOVS     r0,#0
;;;626    
;;;627    	if (i == _timeout)
00002c  42ac              CMP      r4,r5
00002e  f8810038          STRB     r0,[r1,#0x38]         ;625
000032  d101              BNE      |L18.56|
                  |L18.52|
;;;628    	{
;;;629    		return 0;	/* 超时未读到数据 */
;;;630    	}
;;;631    	return 1;	/* 成功读到数据 */
;;;632    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L18.56|
000038  2001              MOVS     r0,#1                 ;631
00003a  e7fb              B        |L18.52|
;;;633    
                          ENDP

                  |L18.60|
                          DCD      ||.bss||

                          AREA ||i.bsp_InitPS2||, CODE, READONLY, ALIGN=2

                  bsp_InitPS2 PROC
;;;185    */
;;;186    void bsp_InitPS2(void)
000000  b538              PUSH     {r3-r5,lr}
;;;187    {
;;;188    	GPIO_InitTypeDef GPIO_InitStructure;
;;;189    
;;;190    	/* 打开GPIO时钟 */
;;;191    	RCC_APB2PeriphClockCmd(RCC_PS2_CLK | RCC_PS2_DATA, ENABLE);
000002  2101              MOVS     r1,#1
000004  f44f7088          MOV      r0,#0x110
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;192    
;;;193    	PS2_CLK_1();
00000c  480e              LDR      r0,|L19.72|
00000e  f44f5100          MOV      r1,#0x2000
000012  6101              STR      r1,[r0,#0x10]
;;;194    	PS2_DATA_1();
000014  4d0d              LDR      r5,|L19.76|
000016  1584              ASRS     r4,r0,#22
000018  612c              STR      r4,[r5,#0x10]
;;;195    
;;;196    	/* 配置CLK 和 DATA 为输出开漏引脚 */
;;;197    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2203              MOVS     r2,#3
00001c  f88d2002          STRB     r2,[sp,#2]
;;;198    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
000020  2214              MOVS     r2,#0x14
000022  f88d2003          STRB     r2,[sp,#3]
;;;199    
;;;200    	GPIO_InitStructure.GPIO_Pin = PIN_PS2_CLK;
000026  f8ad1000          STRH     r1,[sp,#0]
;;;201    	GPIO_Init(PORT_PS2_CLK, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  f7fffffe          BL       GPIO_Init
;;;202    
;;;203    	GPIO_InitStructure.GPIO_Pin = PIN_PS2_DATA;
000030  f8ad4000          STRH     r4,[sp,#0]
;;;204    	GPIO_Init(PORT_PS2_DATA, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_Init
;;;205    	
;;;206    	g_tPS2.TxTimeOut = 0;
00003c  4904              LDR      r1,|L19.80|
00003e  2000              MOVS     r0,#0
000040  f8010f36          STRB     r0,[r1,#0x36]!
;;;207    	g_tPS2.RxTimeOut = 0;
000044  7048              STRB     r0,[r1,#1]
;;;208    }
000046  bd38              POP      {r3-r5,pc}
;;;209    
                          ENDP

                  |L19.72|
                          DCD      0x40011000
                  |L19.76|
                          DCD      0x40012000
                  |L19.80|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tPS2
                          %        68

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  s_KeyNameTab
                          DCD      0xeeeeeeee
                          DCD      ||.conststring||
                          DCD      0x0000001c
                          DCD      ||.conststring||+0x4
                          DCD      0x00000032
                          DCD      ||.conststring||+0x8
                          DCD      0x00000021
                          DCD      ||.conststring||+0xc
                          DCD      0x00000023
                          DCD      ||.conststring||+0x10
                          DCD      0x00000024
                          DCD      ||.conststring||+0x14
                          DCD      0x0000002b
                          DCD      ||.conststring||+0x18
                          DCD      0x00000034
                          DCD      ||.conststring||+0x1c
                          DCD      0x00000033
                          DCD      ||.conststring||+0x20
                          DCD      0x00000043
                          DCD      ||.conststring||+0x24
                          DCD      0x0000003b
                          DCD      ||.conststring||+0x28
                          DCD      0x00000042
                          DCD      ||.conststring||+0x2c
                          DCD      0x0000004b
                          DCD      ||.conststring||+0x30
                          DCD      0x0000003a
                          DCD      ||.conststring||+0x34
                          DCD      0x00000031
                          DCD      ||.conststring||+0x38
                          DCD      0x00000044
                          DCD      ||.conststring||+0x3c
                          DCD      0x0000004d
                          DCD      ||.conststring||+0x40
                          DCD      0x00000015
                          DCD      ||.conststring||+0x44
                          DCD      0x0000002d
                          DCD      ||.conststring||+0x48
                          DCD      0x0000001b
                          DCD      ||.conststring||+0x4c
                          DCD      0x0000002c
                          DCD      ||.conststring||+0x50
                          DCD      0x0000003c
                          DCD      ||.conststring||+0x54
                          DCD      0x0000002a
                          DCD      ||.conststring||+0x58
                          DCD      0x0000001d
                          DCD      ||.conststring||+0x5c
                          DCD      0x00000022
                          DCD      ||.conststring||+0x60
                          DCD      0x00000035
                          DCD      ||.conststring||+0x64
                          DCD      0x0000001a
                          DCD      ||.conststring||+0x68
                          DCD      0x00000045
                          DCD      ||.conststring||+0x6c
                          DCD      0x00000016
                          DCD      ||.conststring||+0x70
                          DCD      0x0000001e
                          DCD      ||.conststring||+0x74
                          DCD      0x00000026
                          DCD      ||.conststring||+0x78
                          DCD      0x00000025
                          DCD      ||.conststring||+0x7c
                          DCD      0x0000002e
                          DCD      ||.conststring||+0x80
                          DCD      0x00000036
                          DCD      ||.conststring||+0x84
                          DCD      0x0000003d
                          DCD      ||.conststring||+0x88
                          DCD      0x0000003e
                          DCD      ||.conststring||+0x8c
                          DCD      0x00000046
                          DCD      ||.conststring||+0x90
                          DCD      0x0000000e
                          DCD      ||.conststring||+0x94
                          DCD      0x0000004e
                          DCD      ||.conststring||+0x98
                          DCD      0x00000055
                          DCD      ||.conststring||+0x9c
                          DCD      0x0000005d
                          DCD      ||.conststring||+0xa0
                          DCD      0x00000066
                          DCD      ||.conststring||+0xa4
                          DCD      0x00000029
                          DCD      ||.conststring||+0xb0
                          DCD      0x0000000d
                          DCD      ||.conststring||+0xb8
                          DCD      0x00000058
                          DCD      ||.conststring||+0xbc
                          DCD      0x00000012
                          DCD      ||.conststring||+0xc4
                          DCD      0x00000014
                          DCD      ||.conststring||+0xd0
                          DCD      0x0000e01f
                          DCD      ||.conststring||+0xdc
                          DCD      0x00000011
                          DCD      ||.conststring||+0xe8
                          DCD      0x00000059
                          DCD      ||.conststring||+0xf4
                          DCD      0x0000e014
                          DCD      ||.conststring||+0x100
                          DCD      0x0000e027
                          DCD      ||.conststring||+0x10c
                          DCD      0x0000e011
                          DCD      ||.conststring||+0x118
                          DCD      0x0000e02f
                          DCD      ||.conststring||+0x124
                          DCD      0x0000005a
                          DCD      ||.conststring||+0x12c
                          DCD      0x00000076
                          DCD      ||.conststring||+0x134
                          DCD      0x00000005
                          DCD      ||.conststring||+0x138
                          DCD      0x00000006
                          DCD      ||.conststring||+0x13c
                          DCD      0x00000004
                          DCD      ||.conststring||+0x140
                          DCD      0x0000000c
                          DCD      ||.conststring||+0x144
                          DCD      0x00000003
                          DCD      ||.conststring||+0x148
                          DCD      0x0000000b
                          DCD      ||.conststring||+0x14c
                          DCD      0x00000083
                          DCD      ||.conststring||+0x150
                          DCD      0x0000000a
                          DCD      ||.conststring||+0x154
                          DCD      0x00000001
                          DCD      ||.conststring||+0x158
                          DCD      0x00000009
                          DCD      ||.conststring||+0x15c
                          DCD      0x00000078
                          DCD      ||.conststring||+0x160
                          DCD      0x00000007
                          DCD      ||.conststring||+0x164
                          DCD      0xe012e07c
                          DCD      ||.conststring||+0x168
                          DCD      0x0000007e
                          DCD      ||.conststring||+0x17c
                          DCD      0xe11477e1
                          DCD      ||.conststring||+0x188
                          DCD      0x00000054
                          DCD      ||.conststring||+0x194
                          DCD      0x0000e070
                          DCD      ||.conststring||+0x198
                          DCD      0x0000e06c
                          DCD      ||.conststring||+0x1a0
                          DCD      0x0000e07d
                          DCD      ||.conststring||+0x1a8
                          DCD      0x0000e071
                          DCD      ||.conststring||+0x1b0
                          DCD      0x0000e069
                          DCD      ||.conststring||+0x1b8
                          DCD      0x0000e07a
                          DCD      ||.conststring||+0x1bc
                          DCD      0x0000e075
                          DCD      ||.conststring||+0x1c8
                          DCD      0x0000e06b
                          DCD      ||.conststring||+0x1d4
                          DCD      0x0000e072
                          DCD      ||.conststring||+0x1e0
                          DCD      0x0000e074
                          DCD      ||.conststring||+0x1ec
                          DCD      0x00000077
                          DCD      ||.conststring||+0x1f8
                          DCD      0x0000e04a
                          DCD      ||.conststring||+0x204
                          DCD      0x0000007c
                          DCD      ||.conststring||+0x20c
                          DCD      0x0000007b
                          DCD      ||.conststring||+0x214
                          DCD      0x00000079
                          DCD      ||.conststring||+0x21c
                          DCD      0x0000e05a
                          DCD      ||.conststring||+0x224
                          DCD      0x00000071
                          DCD      ||.conststring||+0x230
                          DCD      0x00000070
                          DCD      ||.conststring||+0x238
                          DCD      0x00000069
                          DCD      ||.conststring||+0x240
                          DCD      0x00000072
                          DCD      ||.conststring||+0x248
                          DCD      0x0000007a
                          DCD      ||.conststring||+0x250
                          DCD      0x0000006b
                          DCD      ||.conststring||+0x258
                          DCD      0x00000073
                          DCD      ||.conststring||+0x260
                          DCD      0x00000074
                          DCD      ||.conststring||+0x268
                          DCD      0x0000006c
                          DCD      ||.conststring||+0x270
                          DCD      0x00000075
                          DCD      ||.conststring||+0x278
                          DCD      0x0000007d
                          DCD      ||.conststring||+0x280
                          DCD      0x0000005b
                          DCD      ||.conststring||+0x288
                          DCD      0x0000004c
                          DCD      ||.conststring||+0x28c
                          DCD      0x00000052
                          DCD      ||.conststring||+0x290
                          DCD      0x00000041
                          DCD      ||.conststring||+0x294
                          DCD      0x00000049
                          DCD      ||.conststring||+0x298
                          DCD      0x0000004a
                          DCD      ||.conststring||+0x29c
                          DCD      0x00000000
                          DCD      ||.conststring||

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  00                DCB      0
000001  00                DCB      0
000002  00                DCB      0
000003  00                DCB      0
000004  4100              DCB      "A",0
000006  00                DCB      0
000007  00                DCB      0
000008  4200              DCB      "B",0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  4300              DCB      "C",0
00000e  00                DCB      0
00000f  00                DCB      0
000010  4400              DCB      "D",0
000012  00                DCB      0
000013  00                DCB      0
000014  4500              DCB      "E",0
000016  00                DCB      0
000017  00                DCB      0
000018  4600              DCB      "F",0
00001a  00                DCB      0
00001b  00                DCB      0
00001c  4700              DCB      "G",0
00001e  00                DCB      0
00001f  00                DCB      0
000020  4800              DCB      "H",0
000022  00                DCB      0
000023  00                DCB      0
000024  4900              DCB      "I",0
000026  00                DCB      0
000027  00                DCB      0
000028  4a00              DCB      "J",0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  4b00              DCB      "K",0
00002e  00                DCB      0
00002f  00                DCB      0
000030  4c00              DCB      "L",0
000032  00                DCB      0
000033  00                DCB      0
000034  4d00              DCB      "M",0
000036  00                DCB      0
000037  00                DCB      0
000038  4e00              DCB      "N",0
00003a  00                DCB      0
00003b  00                DCB      0
00003c  4f00              DCB      "O",0
00003e  00                DCB      0
00003f  00                DCB      0
000040  5000              DCB      "P",0
000042  00                DCB      0
000043  00                DCB      0
000044  5100              DCB      "Q",0
000046  00                DCB      0
000047  00                DCB      0
000048  5200              DCB      "R",0
00004a  00                DCB      0
00004b  00                DCB      0
00004c  5300              DCB      "S",0
00004e  00                DCB      0
00004f  00                DCB      0
000050  5400              DCB      "T",0
000052  00                DCB      0
000053  00                DCB      0
000054  5500              DCB      "U",0
000056  00                DCB      0
000057  00                DCB      0
000058  5600              DCB      "V",0
00005a  00                DCB      0
00005b  00                DCB      0
00005c  5700              DCB      "W",0
00005e  00                DCB      0
00005f  00                DCB      0
000060  5800              DCB      "X",0
000062  00                DCB      0
000063  00                DCB      0
000064  5900              DCB      "Y",0
000066  00                DCB      0
000067  00                DCB      0
000068  5a00              DCB      "Z",0
00006a  00                DCB      0
00006b  00                DCB      0
00006c  3000              DCB      "0",0
00006e  00                DCB      0
00006f  00                DCB      0
000070  3100              DCB      "1",0
000072  00                DCB      0
000073  00                DCB      0
000074  3200              DCB      "2",0
000076  00                DCB      0
000077  00                DCB      0
000078  3300              DCB      "3",0
00007a  00                DCB      0
00007b  00                DCB      0
00007c  3400              DCB      "4",0
00007e  00                DCB      0
00007f  00                DCB      0
000080  3500              DCB      "5",0
000082  00                DCB      0
000083  00                DCB      0
000084  3600              DCB      "6",0
000086  00                DCB      0
000087  00                DCB      0
000088  3700              DCB      "7",0
00008a  00                DCB      0
00008b  00                DCB      0
00008c  3800              DCB      "8",0
00008e  00                DCB      0
00008f  00                DCB      0
000090  3900              DCB      "9",0
000092  00                DCB      0
000093  00                DCB      0
000094  6000              DCB      "`",0
000096  00                DCB      0
000097  00                DCB      0
000098  2d00              DCB      "-",0
00009a  00                DCB      0
00009b  00                DCB      0
00009c  3d00              DCB      "=",0
00009e  00                DCB      0
00009f  00                DCB      0
0000a0  5c00              DCB      "\\",0
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  4261636b          DCB      "Backspace",0
0000a8  73706163
0000ac  6500    
0000ae  00                DCB      0
0000af  00                DCB      0
0000b0  53706163          DCB      "Space",0
0000b4  6500    
0000b6  00                DCB      0
0000b7  00                DCB      0
0000b8  54616200          DCB      "Tab",0
0000bc  43617073          DCB      "CapsLk",0
0000c0  4c6b00  
0000c3  00                DCB      0
0000c4  53686966          DCB      "Shift Left",0
0000c8  74204c65
0000cc  667400  
0000cf  00                DCB      0
0000d0  4374726c          DCB      "Ctrl Left",0
0000d4  204c6566
0000d8  7400    
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  47554920          DCB      "GUI Left",0
0000e0  4c656674
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  416c7420          DCB      "Alt Left",0
0000ec  4c656674
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
0000f4  53686966          DCB      "Shift Right",0
0000f8  74205269
0000fc  67687400
000100  4374726c          DCB      "Ctrl Right",0
000104  20526967
000108  687400  
00010b  00                DCB      0
00010c  47756920          DCB      "Gui Right",0
000110  52696768
000114  7400    
000116  00                DCB      0
000117  00                DCB      0
000118  416c7420          DCB      "Alt Right",0
00011c  52696768
000120  7400    
000122  00                DCB      0
000123  00                DCB      0
000124  41707073          DCB      "Apps",0
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
00012c  456e7465          DCB      "Enter",0
000130  7200    
000132  00                DCB      0
000133  00                DCB      0
000134  45534300          DCB      "ESC",0
000138  463100            DCB      "F1",0
00013b  00                DCB      0
00013c  463200            DCB      "F2",0
00013f  00                DCB      0
000140  463300            DCB      "F3",0
000143  00                DCB      0
000144  463400            DCB      "F4",0
000147  00                DCB      0
000148  463500            DCB      "F5",0
00014b  00                DCB      0
00014c  463600            DCB      "F6",0
00014f  00                DCB      0
000150  463700            DCB      "F7",0
000153  00                DCB      0
000154  463800            DCB      "F8",0
000157  00                DCB      0
000158  463900            DCB      "F9",0
00015b  00                DCB      0
00015c  46313000          DCB      "F10",0
000160  46313100          DCB      "F11",0
000164  46313200          DCB      "F12",0
000168  5072696e          DCB      "Print Screen/SysRq",0
00016c  74205363
000170  7265656e
000174  2f537973
000178  527100  
00017b  00                DCB      0
00017c  5363726f          DCB      "Scroll Lock",0
000180  6c6c204c
000184  6f636b00
000188  50617573          DCB      "Pause/Break",0
00018c  652f4272
000190  65616b00
000194  5b00              DCB      "[",0
000196  00                DCB      0
000197  00                DCB      0
000198  496e7365          DCB      "Insert",0
00019c  727400  
00019f  00                DCB      0
0001a0  486f6d65          DCB      "Home",0
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
0001a8  50616765          DCB      "Page Up",0
0001ac  20557000
0001b0  44656c65          DCB      "Delete",0
0001b4  746500  
0001b7  00                DCB      0
0001b8  456e6400          DCB      "End",0
0001bc  50616765          DCB      "Page Down",0
0001c0  20446f77
0001c4  6e00    
0001c6  00                DCB      0
0001c7  00                DCB      0
0001c8  55702041          DCB      "Up Arrow",0
0001cc  72726f77
0001d0  00      
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0
0001d4  4c656674          DCB      "Left Arrow",0
0001d8  20417272
0001dc  6f7700  
0001df  00                DCB      0
0001e0  446f776e          DCB      "Down Arrow",0
0001e4  20417272
0001e8  6f7700  
0001eb  00                DCB      0
0001ec  52696768          DCB      "Right Arrow",0
0001f0  74204172
0001f4  726f7700
0001f8  4e756d20          DCB      "Num Lock",0
0001fc  4c6f636b
000200  00      
000201  00                DCB      0
000202  00                DCB      0
000203  00                DCB      0
000204  4b50202f          DCB      "KP /",0
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0
00020c  4b50202a          DCB      "KP *",0
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
000214  4b50202d          DCB      "KP -",0
000218  00      
000219  00                DCB      0
00021a  00                DCB      0
00021b  00                DCB      0
00021c  4b50202b          DCB      "KP +",0
000220  00      
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
000224  4b502045          DCB      "KP Enter",0
000228  6e746572
00022c  00      
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
000230  4b50202e          DCB      "KP .",0
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
000238  4b502030          DCB      "KP 0",0
00023c  00      
00023d  00                DCB      0
00023e  00                DCB      0
00023f  00                DCB      0
000240  4b502031          DCB      "KP 1",0
000244  00      
000245  00                DCB      0
000246  00                DCB      0
000247  00                DCB      0
000248  4b502032          DCB      "KP 2",0
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
000250  4b502033          DCB      "KP 3",0
000254  00      
000255  00                DCB      0
000256  00                DCB      0
000257  00                DCB      0
000258  4b502034          DCB      "KP 4",0
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
000260  4b502035          DCB      "KP 5",0
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
000268  4b502036          DCB      "KP 6",0
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
000270  4b502037          DCB      "KP 7",0
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
000278  4b502038          DCB      "KP 8",0
00027c  00      
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0
000280  4b502039          DCB      "KP 9",0
000284  00      
000285  00                DCB      0
000286  00                DCB      0
000287  00                DCB      0
000288  5d00              DCB      "]",0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  3b00              DCB      ";",0
00028e  00                DCB      0
00028f  00                DCB      0
000290  2700              DCB      "'",0
000292  00                DCB      0
000293  00                DCB      0
000294  2c00              DCB      ",",0
000296  00                DCB      0
000297  00                DCB      0
000298  2e00              DCB      ".",0
00029a  00                DCB      0
00029b  00                DCB      0
00029c  2f00              DCB      "/",0

                          AREA ||.data||, DATA, ALIGN=2

                  s_Byte
000000  00                DCB      0x00
                  s_Pos
000001  00                DCB      0x00
                  s_1Bits
000002  0000              DCB      0x00,0x00
                  s_last_time
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_ps2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_ps2_c_a40b8fe1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_ps2_c_a40b8fe1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_ps2_c_a40b8fe1____REVSH|
#line 128
|__asm___9_bsp_ps2_c_a40b8fe1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
