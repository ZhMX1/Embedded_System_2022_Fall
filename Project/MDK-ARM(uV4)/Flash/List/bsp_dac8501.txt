; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_dac8501.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_dac8501.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_dac8501.crf ..\..\User\bsp\src\bsp_dac8501.c]
                          THUMB

                          AREA ||i.DAC8501_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  DAC8501_CfgSpiHard PROC
;;;89     */
;;;90     void DAC8501_CfgSpiHard(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
000002  b086              SUB      sp,sp,#0x18
;;;92     	SPI_InitTypeDef  SPI_InitStructure;
;;;93     
;;;94     	/* 配置 SPI1工作模式 */
;;;95     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;96     	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00000a  f44f7182          MOV      r1,#0x104
00000e  f8ad1002          STRH     r1,[sp,#2]
;;;97     	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
;;;98     	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
;;;99     	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
000012  f8ad0008          STRH     r0,[sp,#8]
;;;100    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; 		/* 软件控制片选 */
000016  f44f7100          MOV      r1,#0x200
00001a  f8ad100a          STRH     r1,[sp,#0xa]
;;;101    
;;;102    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
00001e  2110              MOVS     r1,#0x10
000020  f8ad100c          STRH     r1,[sp,#0xc]
000024  f8ad0004          STRH     r0,[sp,#4]            ;97
000028  f8ad0006          STRH     r0,[sp,#6]            ;98
;;;103    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
00002c  f8ad000e          STRH     r0,[sp,#0xe]
;;;104    	SPI_InitStructure.SPI_CRCPolynomial = 7;
000030  2007              MOVS     r0,#7
;;;105    	SPI_Init(SPI1,&SPI_InitStructure);
000032  4c06              LDR      r4,|L1.76|
000034  f8ad0010          STRH     r0,[sp,#0x10]         ;104
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       SPI_Init
;;;106    
;;;107    	/* 使能 SPI1 */
;;;108    	SPI_Cmd(SPI1,ENABLE);
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SPI_Cmd
;;;109    }
000048  b006              ADD      sp,sp,#0x18
00004a  bd10              POP      {r4,pc}
;;;110    
                          ENDP

                  |L1.76|
                          DCD      0x40013000

                          AREA ||i.DAC8501_DacToVoltage||, CODE, READONLY, ALIGN=1

                  DAC8501_DacToVoltage PROC
;;;267    */
;;;268    int32_t DAC8501_DacToVoltage(uint16_t _dac)
000000  b508              PUSH     {r3,lr}
;;;269    {
;;;270    	int32_t y;
;;;271    
;;;272    	/* CaculTwoPoint(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t x);*/
;;;273    	y =  CaculTwoPoint(X1, Y1, X2, Y2, _dac);
000002  f24c03f8          MOV      r3,#0xc0f8
000006  9000              STR      r0,[sp,#0]
000008  f64f52e8          MOV      r2,#0xfde8
00000c  2132              MOVS     r1,#0x32
00000e  2064              MOVS     r0,#0x64
000010  f7fffffe          BL       CaculTwoPoint
;;;274    	if (y < 0)
000014  2800              CMP      r0,#0
000016  da00              BGE      |L2.26|
;;;275    	{
;;;276    		y = 0;
000018  2000              MOVS     r0,#0
                  |L2.26|
;;;277    	}
;;;278    	return y;
;;;279    }
00001a  bd08              POP      {r3,pc}
;;;280    
                          ENDP


                          AREA ||i.DAC8501_SetCS1||, CODE, READONLY, ALIGN=2

                  DAC8501_SetCS1 PROC
;;;118    */
;;;119    void DAC8501_SetCS1(uint8_t _level)
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
;;;121    	if (_level == 0)
;;;122    	{
;;;123    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
;;;124    
;;;125    		#ifdef SOFT_SPI		/* 软件SPI */
;;;126    			bsp_SetSpiSck(0);
;;;127    			DAC8501_CS1_0();
;;;128    		#endif
;;;129    
;;;130    		#ifdef HARD_SPI		/* 硬件SPI */
;;;131    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;132    				| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;133    
;;;134    			DAC8501_CS1_0();
000002  4d08              LDR      r5,|L3.36|
000004  2408              MOVS     r4,#8
000006  b120              CBZ      r0,|L3.18|
;;;135    		#endif
;;;136    	}
;;;137    	else
;;;138    	{
;;;139    		DAC8501_CS1_1();
000008  612c              STR      r4,[r5,#0x10]
;;;140    
;;;141    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
00000a  e8bd4070          POP      {r4-r6,lr}
00000e  f7ffbffe          B.W      bsp_SpiBusExit
                  |L3.18|
000012  f7fffffe          BL       bsp_SpiBusEnter
000016  f44f7045          MOV      r0,#0x314             ;131
00001a  f7fffffe          BL       bsp_SPI_Init
00001e  616c              STR      r4,[r5,#0x14]         ;134
;;;142    	}
;;;143    }
000020  bd70              POP      {r4-r6,pc}
;;;144    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0x40011000

                          AREA ||i.DAC8501_SetCS2||, CODE, READONLY, ALIGN=2

                  DAC8501_SetCS2 PROC
;;;152    */
;;;153    void DAC8501_SetCS2(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	if (_level == 0)
;;;156    	{
;;;157    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
;;;158    
;;;159    		#ifdef SOFT_SPI		/* 软件SPI */
;;;160    			bsp_SetSpiSck(0);
;;;161    			DAC8501_CS2_0();
;;;162    		#endif
;;;163    
;;;164    		#ifdef HARD_SPI		/* 硬件SPI */
;;;165    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;166    				| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;167    
;;;168    			DAC8501_CS2_0();
000002  2408              MOVS     r4,#8
000004  b128              CBZ      r0,|L4.18|
;;;169    		#endif
;;;170    	}
;;;171    	else
;;;172    	{
;;;173    		DAC8501_CS2_1();
000006  4808              LDR      r0,|L4.40|
000008  6004              STR      r4,[r0,#0]
;;;174    
;;;175    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      bsp_SpiBusExit
                  |L4.18|
000012  f7fffffe          BL       bsp_SpiBusEnter
000016  f44f7045          MOV      r0,#0x314             ;165
00001a  f7fffffe          BL       bsp_SPI_Init
00001e  4802              LDR      r0,|L4.40|
000020  1d00              ADDS     r0,r0,#4              ;168
000022  6004              STR      r4,[r0,#0]            ;168
;;;176    	}
;;;177    }
000024  bd10              POP      {r4,pc}
;;;178    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c10

                          AREA ||i.DAC8501_SetDacData||, CODE, READONLY, ALIGN=1

                  DAC8501_SetDacData PROC
;;;213    */
;;;214    void DAC8501_SetDacData(uint8_t _ch, uint16_t _dac)
000000  b570              PUSH     {r4-r6,lr}
;;;215    {
000002  0005              MOVS     r5,r0
;;;216    	uint32_t data;
;;;217    
;;;218    	/*
;;;219    		DAC8501.pdf page 12 有24bit定义
;;;220    
;;;221    		DB24:18 = xxxxx 保留
;;;222    		DB17： PD1
;;;223    		DB16： PD0
;;;224    
;;;225    		DB15：0  16位数据
;;;226    
;;;227    		其中 PD1 PD0 决定4种工作模式
;;;228    		      0   0  ---> 正常工作模式
;;;229    		      0   1  ---> 输出接1K欧到GND
;;;230    		      1   0  ---> 输出100K欧到GND
;;;231    		      1   1  ---> 输出高阻
;;;232    	*/
;;;233    
;;;234    	data = _dac; /* PD1 PD0 = 00 正常模式 */
000004  460c              MOV      r4,r1
;;;235    
;;;236    	if (_ch == 0)
;;;237    	{
;;;238    		DAC8501_SetCS1(0);
;;;239    	}
;;;240    	else
;;;241    	{
;;;242    		DAC8501_SetCS2(0);
000006  f04f0000          MOV      r0,#0
00000a  d011              BEQ      |L5.48|
00000c  f7fffffe          BL       DAC8501_SetCS2
                  |L5.16|
;;;243    	}
;;;244    
;;;245    	/*　DAC8501 SCLK时钟高达30M，因此可以不延迟 */
;;;246    	bsp_spiWrite0(data >> 16);
000010  0c20              LSRS     r0,r4,#16
000012  f7fffffe          BL       bsp_spiWrite0
;;;247    	bsp_spiWrite0(data >> 8);
000016  0a20              LSRS     r0,r4,#8
000018  f7fffffe          BL       bsp_spiWrite0
;;;248    	bsp_spiWrite0(data);
00001c  b2e0              UXTB     r0,r4
00001e  f7fffffe          BL       bsp_spiWrite0
;;;249    
;;;250    	if (_ch == 0)
;;;251    	{
;;;252    		DAC8501_SetCS1(1);
;;;253    	}
;;;254    	else
;;;255    	{
;;;256    		DAC8501_SetCS2(1);
000022  f04f0001          MOV      r0,#1
000026  b135              CBZ      r5,|L5.54|
000028  e8bd4070          POP      {r4-r6,lr}
00002c  f7ffbffe          B.W      DAC8501_SetCS2
                  |L5.48|
000030  f7fffffe          BL       DAC8501_SetCS1
000034  e7ec              B        |L5.16|
                  |L5.54|
000036  e8bd4070          POP      {r4-r6,lr}            ;252
00003a  f7ffbffe          B.W      DAC8501_SetCS1
;;;257    	}
;;;258    }
;;;259    
                          ENDP


                          AREA ||i.DAC8501_VoltageToDac||, CODE, READONLY, ALIGN=1

                  DAC8501_VoltageToDac PROC
;;;288    */
;;;289    uint32_t DAC8501_VoltageToDac(int32_t _volt)
000000  b508              PUSH     {r3,lr}
;;;290    {
;;;291    	/* CaculTwoPoint(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t x);*/
;;;292    	return CaculTwoPoint(Y1, X1, Y2, X2, _volt);
000002  f64f53e8          MOV      r3,#0xfde8
000006  9000              STR      r0,[sp,#0]
000008  f24c02f8          MOV      r2,#0xc0f8
00000c  2164              MOVS     r1,#0x64
00000e  2032              MOVS     r0,#0x32
000010  f7fffffe          BL       CaculTwoPoint
;;;293    }
000014  bd08              POP      {r3,pc}
;;;294    
                          ENDP


                          AREA ||i.bsp_InitDAC8501||, CODE, READONLY, ALIGN=2

                  bsp_InitDAC8501 PROC
;;;73     */
;;;74     void bsp_InitDAC8501(void)
000000  b538              PUSH     {r3-r5,lr}
000002  2101              MOVS     r1,#1
000004  2018              MOVS     r0,#0x18
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
000016  2408              MOVS     r4,#8
000018  f8ad4000          STRH     r4,[sp,#0]
00001c  4669              MOV      r1,sp
00001e  4809              LDR      r0,|L7.68|
000020  f7fffffe          BL       GPIO_Init
000024  f8ad4000          STRH     r4,[sp,#0]
000028  4669              MOV      r1,sp
00002a  4807              LDR      r0,|L7.72|
00002c  f7fffffe          BL       GPIO_Init
;;;75     {
;;;76     	DAC8501_ConfigGPIO();
;;;77     
;;;78     	DAC8501_SetDacData(0, 0);
000030  2100              MOVS     r1,#0
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       DAC8501_SetDacData
;;;79     	DAC8501_SetDacData(1, 0);
000038  e8bd4038          POP      {r3-r5,lr}
00003c  2100              MOVS     r1,#0
00003e  2001              MOVS     r0,#1
000040  f7ffbffe          B.W      DAC8501_SetDacData
;;;80     }
;;;81     
                          ENDP

                  |L7.68|
                          DCD      0x40011000
                  |L7.72|
                          DCD      0x40010c00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_dac8501.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_dac8501_c_173b0808____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_dac8501_c_173b0808____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_dac8501_c_173b0808____REVSH|
#line 128
|__asm___13_bsp_dac8501_c_173b0808____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
